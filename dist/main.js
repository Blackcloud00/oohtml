!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={env:"",context:{},attrMap:{hint:"data-tree",namespace:"data-namespace",superrole:"data-role",subrole:"data-role",bundle:"chtml-bundle",nocompose:["nocompose","shadow"]},tagMap:{jsen:'script[type="text/scoped-js"]',bundle:'template[is="chtml-bundle"]',import:"chtml-import"},treeProperty:"tree",bindingProperty:"binding",keyValAttributes:[],listAttributes:[],remodelCallback:null,recomposeCallback:null,hideDataBlockScript:!0},s=function(e){return Array.isArray(e)},i=function(e){return"string"==typeof e},a=function(e){return arguments.length&&(void 0===e||void 0===e)},o=function(e){return Array.isArray(e)||"object"==typeof e},l=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},p=function(e,t=!0){return s(e)?e:!t&&l(e)?[e]:!1!==e&&0!==e&&function(e){return function(e){return null===e||""===e}(e)||a(e)||!1===e||0===e||o(e)&&!Object.keys(e).length}(e)?[]:function(e){return!i(e)&&!a(e.length)}(e)?Array.prototype.slice.call(e):l(e)?Object.values(e):[e]},c=function(e){return Array.isArray(e)},h=function(e){return function(e){return"function"==typeof e}(e)||e&&"[object function]"==={}.toString.call(e)},u=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},d=function(e){return Array.isArray(e)||"object"==typeof e},f=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},g=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!c(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{!function(e,...t){t.forEach(t=>{e.indexOf(t)<0&&e.push(t)})}(r,...Object.getOwnPropertyNames(e))}),r};function m(e,t,r=!1,n=!1,s=!0){var i=0,a=e.shift();if((f(a)||!0===a||!1===a)&&(i=a,a=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,o)=>{(d(e)||h(e))&&(r?g(e):Object.getOwnPropertyNames(e)).forEach(l=>{var p=a[l],h=e[l];if((c(p)&&c(h)||u(p)&&u(h))&&(!0===i||i>0))a[l]=c(p)&&c(h)?[]:{},m([f(i)?i-1:i,a[l],p,h],t,r,n,s);else if(t(l,a,e,o))if(c(a)&&c(e))n?a[l]=h:a.push(h);else try{s?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(e,l)):a[l]=e[l]}catch(e){}})}),a}var v=function(...e){return m(e,(e,t,r)=>!0,!1,!1,!1)},b=function(e,t,r=!1){for(var n=e.indexOf(t);n>-1&&(r||!1===r);)e.splice(n,1),r>0&&r--,n=e.indexOf(t);return e},y=function(e,t){if(!e)return!1;if(e instanceof t)return!0;var r=e=>{for(;e&&e!==Function.prototype;){if(e===t||e.prototypes&&e.prototypes.reduce((e,n)=>e||n===t||r(n),!1))return!0;e=Object.getPrototypeOf(e)}return!1};return r(e.constructor)},w=function(e){return"number"==typeof e},x=function(e){return u(e)&&Object.getPrototypeOf(e)===Object.prototype},j=function(e){return!0===e||!1===e},E=function(e,t){var r=void 0;return d(e)&&Object.keys(e).forEach((n,s)=>{!1!==r&&(r=t(f(n)?parseFloat(n):n,e[n],s))}),r};const O=function(e,t,r=!0,n=1){if(c(e)&&c(t)&&e.length!==t.length)return!r;if(u(e)&&u(t)){var s=Object.keys(e),i=Object.keys(t);if(!s.length&&!i.length)return x(e)&&x(t)?r:e===t===r;if(!O(s,i))return!r}if(n>0&&(c(e)&&c(t)||u(e)&&u(t))){var a=function(e,t,r=!0,n=!0,s=!1,i=!1){if(c(e)&&c(t)){var a=[],o=!0;return e.forEach(e=>{if(o){var l=!1;E(t,(t,s)=>{(!l||n&&d(e))&&(l=r(e,s),(c(l)&&!l.length||u(l)&&!Object.keys(l).length)&&(l=!1),d(l)&&n&&(e=l))}),d(l)?a.push(n?l:e):j(l)?s&&!l||!s&&l?a.push(e):i&&(o=!1):a.push(l)}}),a}if(u(e)&&u(t)){a={},o=!0;return Object.keys(e).forEach(l=>{if(o){var p=r(e[l],t[l]);(c(p)&&!p.length||u(p)&&!Object.keys(p).length)&&(p=!1),d(p)?a[l]=n?p:e[l]:j(p)?s&&!p||!s&&p?a[l]=e[l]:i&&(o=!1):a[l]=p}}),a}}(e,t,(e,t)=>O(e,t,r,n-1),!1,!1,!0);return c(a)?a.length===e.length&&a.length===t.length:u(a)&&u(e)?Object.keys(a).length===Object.keys(e).length&&Object.keys(a).length===Object.keys(t).length:a}return h(r)?r(e,t):w(e)&&w(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var k=O,S=class{even(e){return!(!u(e)||e.jsenType!==this.jsenType)&&k(e,this)}inherit(e){return this}withComments(e){return this.meta||(this.meta={}),this.meta.comments=e,this}withVars(e){return this.meta||(this.meta={}),this.meta.vars=e,this}};const T=class extends S{};Object.defineProperty(T.prototype,"jsenType",{get:()=>"Reference"});var P=T;const C=class extends S{};Object.defineProperty(C.prototype,"jsenType",{get:()=>"CallExpression"});var F=C;const A=class extends S{};Object.defineProperty(A.prototype,"jsenType",{get:()=>"FunctionType"});var N=A;const D=class{static parse(e,t,r={},n=D){if(r.meta||(r.meta={vars:[],_vars:[]}),e.length){for(var s=Object.values(t||n.grammars),i=0;i<s.length;i++){var a=r.meta&&c(r.meta.vars)?r.meta.vars.length:0,o=s[i].parse(e,(e,t,s={})=>D.parse(e,t,s?v(r,s):r,n));if(o){if(o.meta||(o.meta={}),y(o,N)){var l=r.meta.vars.splice(a);r.meta._vars=r.meta._vars.concat(l),o.meta._vars=l}else o.meta.vars=r.meta.vars.slice(a);(y(o,P)||y(o,F))&&(b(o.meta.vars,o.context),b(r.meta.vars,o.context),r.meta.vars.push(o))}if(o&&c(r.explain)&&r.explain.push(e+" >>-------------\x3e> "+o.jsenType),o)return o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+e)}}};var _=D,R=function(e){return"string"==typeof e},$=function(e){return arguments.length&&(void 0===e||void 0===e)},M=function(e,t=!0){return c(e)?e:!t&&u(e)?[e]:!1!==e&&0!==e&&function(e){return function(e){return null===e||""===e}(e)||$(e)||!1===e||0===e||d(e)&&!Object.keys(e).length}(e)?[]:function(e){return!R(e)&&!$(e.length)}(e)?Array.prototype.slice.call(e):u(e)?Object.values(e):[e]};const W=function(e,t=1,r=!0){return!f(t)||t<=0?e:(!c(e)&&u(e)&&r&&(e=Object.values(e)),c(e)?e.reduce((e,n)=>c(n)||u(n)&&r?e.concat(W(c(n)?n:Object.values(n),t-1,r)):e.concat(n),[]):e)};var q=W,I=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},B=function(e,t=1){return arguments.length>1?I(e.slice().reverse(),t).reverse():I(e.slice().reverse())},L=function(e,t=[]){return m([{},e],(e,r,n)=>{if(!h(n[e]))return h(t)?t(e):!c(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)};const U=class{static lex(e,t,r={}){if(!R(e))throw new Error("Argument1 must be a string!");var n=e=>({delims:e.delims.slice(),options:L(e.options),nesting:e.nesting.slice(),maxDepth:e.maxDepth,comments:e.comments.slice(),tokens:e.tokens.slice(),matches:e.matches.slice(),matchesi:L(e.matchesi)});if(U.$cache[e]&&!1!==r.cache)for(var s=0;s<U.$cache[e].length;s++){var i=U.$cache[e][s];if(k(i.delims,t))return n(i)}var a=new U(e,r).lex(t);return!1!==r.cache&&(U.$cache[e]=U.$cache[e]||[],U.$cache[e].push(a)),n(a)}static split(e,t,r){return U.lex(e,t,r).tokens}static match(e,t,r){return U.lex(e,t,r).matches}constructor(e,t){if(!R(e))throw new Error("Lexer requires the first argument to be a string.");this.$str=e,this.$options=t||{},this.$options.blocks||(this.$options.blocks=U.$blocks),this.$options.quotes||(this.$options.quotes=U.$quotes),this.$options.comments||(this.$options.comments=U.$comments)}lex(e,t){var r={delims:M(e),options:v(!0,{},this.$options,t||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+q(r.nesting).join(", "));return r}_evalCharsAt(e,t){if(!(t>=this.$str.length)){var r=1,n={},s={},i={};if(e.openComment||(s=this._testQuotes(e,t)),e.openQuote||(n=this._testComments(e,t)),e.openComment||n.ending)if(e.nesting.length||i.ending)this._push(e,this.$str[t]);else r=(o=n.starting||n.ending||this.$str[t]).length,this._push(e,o,"comments",n.starting);else if(e.openQuote||s.ending)this._push(e,this.$str[t]);else{if(e.options.limit&&e.matches.length===e.options.limit)return this._push(e,this.$str[t]),this._evalCharsAt(e,t+1);i=this._testNesting(e,t);i=this._testNesting(e,t);var a=this._testChars(e.options.stopChars||[],e,t);if(!e.nesting.length&&!1!==a)return e.options.stopChar=a,void(e.options.stopCharForward=this.$str.substr(t));if(e.delims.length)if(e.nesting.length||i.ending){var o;r=(o=i.starting||i.ending||this.$str[t]).length,this._push(e,o)}else{this._push(e,"");var l=this._testChars(e.delims,e,t);if(!1!==l&&(e.matches.push(l),e.matchesi[t]=l,r=l.length||1,!e.options.preserveDelims))return this._evalCharsAt(e,t+(l.length||1));this._push(e,l||this.$str[t])}else 2===e.nesting.length&&i.starting?(e.matches.push(null),this._push(e,i.starting),r=i.starting.length):!e.nesting.length&&i.ending?(this._push(e,i.ending),r=i.ending.length,e.matches.push(null)):this._push(e,this.$str[t])}return this._evalCharsAt(e,t+r)}}_testQuotes(e,t){var r={};return(e.options.quotes||[]).forEach(n=>{this.$str.substr(t,1)===n&&(e.openQuote?n===e.openQuote&&(e.openQuote=!1,r.ending=n):(e.openQuote=n,r.starting=n))}),r}_testComments(e,t){var r={};return(e.options.comments||[]).forEach(n=>{if(e.openComment){if(B(n)===B(e.openComment)){var s=B(n);this.$str.substr(t).startsWith(s)&&(e.openComment=!1,r.ending=s)}}else{var i=I(n);this.$str.substr(t).startsWith(i)&&(e.openComment=n,r.starting=i)}}),r}_testNesting(e,t){var r={};return(e.options.blocks||[]).forEach(n=>{var s=I(n);if(this.$str.substr(t).startsWith(s))e.nesting=e.nesting.concat([n]),r.starting=s;else if(e.nesting.length&&B(n)===B(B(e.nesting))){var i=B(n);this.$str.substr(t).startsWith(i)&&(e.nesting=e.nesting.slice(0,-1),r.ending=i)}}),e.maxDepth=Math.max(e.maxDepth,e.nesting.length),r}_testChars(e,t,r){for(var n=0;n<e.length;n++){var s=e[n];if(h(s)){var i=s(this.$str.substr(0,r),this.$str.substr(r));if(!1!==i)return i}if(t.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+s,!0!==t.options.useRegex?t.options.useRegex:""));if(a)return a[0]}if(!t.options.ci&&this.$str.substr(r,s.length)===s||t.options.ci&&this.$str.substr(r,s.length).toLowerCase()===s.toLowerCase())return s}return!1}_push(e,t,r="tokens",n=!1){var s=e.matches.length;if($(e.tokens[s])&&(e.tokens[s]=""),"comments"===r){e.tokens[s].comments||(e.tokens[s]=new String(e.tokens[s]),e.tokens[s].comments=[]);var i=e.tokens[s].comments.length-(!e.tokens[s].comments.length||n?0:1);e.tokens[s].comments[i]=(e.tokens[s].comments[i]||"")+t}else{var a=e.tokens[s].comments;e.tokens[s]=new String(e.tokens[s]+t),e.tokens[s].comments=a}}split(e,t,r){return this.lex(t,r).tokens}match(e,t,r){return this.lex(t,r).matches}regParse(e,t){return this.lex(e,v({useRegex:!0},t||{}))}regSplit(e,t){return this.regParse(e,t).tokens}regMatch(e,t){return this.regParse(e,t).matches}};U.$blocks=[["(",")"],["[","]"],["{","}"]],U.$quotes=['"',"'","`"],U.$comments=[["/*","*/"],["//","\n"]],U.$cache={};var Q=U;class H{constructor(e,t=null,r={},n={}){this.mainContext=e,this.superContext=t?H.create(t):null,this.localContext=r,this.localContextMeta=n}handle(e,t,r,n=0){var s=()=>t(this.mainContext,null,()=>this.superContext?this.superContext.handle(e,t,r,n+1):r?r():void 0,n);return"toString"===e&&this.localContext.toString===Object.prototype.toString?s():t(this.localContext,this.localContextMeta,s,n)}get(e,t={},r=!0){return e instanceof String&&(e+=""),this.handle(e,(n,s,i,a)=>{var o=K(n,e,t);return!$(o)||z(n,e,t)?h(o)&&r?o.bind(n):o:i()})}set(e,t,r={},n=!1){e instanceof String&&(e+="");const s=(e,t,r,n)=>n.set?n.set(e,t,r):(e[t]=r,!0);return this.handle(!!n||e,(i,a,o)=>{if(a&&"const"===a[e])throw new Error("CONST "+e+"cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Error("Unrecognized declarator: "+n+"!");return a[e]=n,s(i,e,t,r)}return z(i,e,r)?s(i,e,t,r):o()},()=>{throw new Error('"'+e+'" is undefined!')})}del(e,t={}){return e instanceof String&&(e+=""),this.handle(e,(r,n,s)=>z(r,e,t)?t.deleteProperty||t.del?(t.deleteProperty||t.del)(r,e):(delete r[e],!0):s())}has(e,t,r={}){return e instanceof String&&(e+=""),t instanceof String&&(t+=""),this.handle(e,(n,s,i)=>{if(z(n,e,r)){var a=K(n,e,r);return z(a,t,r)}return i()},()=>{throw new Error('"'+e+'" is undefined!')})}exec(e,t,r={}){return e instanceof String&&(e+=""),this.handle(e,(n,s,i)=>{var a=K(n,e,r);if(!$(a)||z(n,e,r)){if(!h(a)){if(r.exec)return r.exec(n,e,t);throw new Error('"'+e+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,t):a.apply(n,t)}return i()},()=>{if(r.execUnknown)return r.execUnknown(this,e,t);throw new Error('"'+e+'()" is undefined!')})}static create(e){return e instanceof H?e:new H(e)}}const K=(e,t,r)=>r.get?r.get(e,t):d(e)&&e||R(e)||w(e)?e[t]:void 0,z=(e,t,r)=>r.has?r.has(e,t):d(e)&&e?t in e:!$(e[t]);var V=function(e,t,r){return e.startsWith(t)&&e.endsWith(r)},J=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},Y=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},Z=function(e,t,r){return function(e,t){return Y(e,t,!0)}(J(e,t),r)};const G=class extends S{};Object.defineProperty(G.prototype,"jsenType",{get:()=>"Abstraction"});var X=G;const ee=class extends X{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr.eval(e,t)}toString(e=null){return"("+this.expr.toString(e)+")"}static parse(e,t,r=ee){if(V(e,"(",")")&&!Q.match(e,[" "]).length)return new r(t(Z(e,"(",")")))}};var te=ee;const re=class extends S{};Object.defineProperty(re.prototype,"jsenType",{get:()=>"ArrayType"});var ne=re;const se=class extends ne{constructor(e){super(),this.exprs=e||[]}inherit(e){if(e instanceof ne){var t=e.exprs.filter(e=>this.exprs.reduce((t,r)=>t&&!e.even(r),!0));this.exprs=t.concat(this.exprs)}return this}eval(e=null,t={}){return this.exprs.map(r=>r.eval(e,t))}toString(e=null){return"["+this.exprs.map(t=>t.toString(e)).join(", ")+"]"}static parse(e,t,r=se){if(V(e,"[","]")&&!Q.match(e.trim(),[" "]).length)return new r(Q.split(Z(e,"[","]"),[","]).map(e=>e.trim()).filter(e=>e).map(e=>t(e)))}};var ie=se;const ae=class extends S{};Object.defineProperty(ae.prototype,"jsenType",{get:()=>"Arguments"});var oe=ae;const le=class extends oe{constructor(e=[]){super(),this.list=e}eval(e=null,t={}){return this.list.map(r=>r.eval(e,t))}toString(e=null){return"("+this.list.map(t=>t.toString(e)).join(", ")+")"}static parse(e,t,r=le){if(e=e.trim(),V(e,"(",")")&&!Q.match(e,[" "]).length)return new r(Q.split(Z(e,"(",")"),[","]).map(e=>t(e.trim())))}};var pe=le,ce=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)};const he=class extends S{};Object.defineProperty(he.prototype,"jsenType",{get:()=>"AssertionExpression"});var ue=he;const de=class extends ue{constructor(e,t){super(),this.exprs=e,this.logic=t}eval(e=null,t={}){if("!"===this.logic)return!I(this.exprs).eval(e,t);q(de.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(de.operators.or||"").trim().toUpperCase(),s=r===(de.operators.nor||"").trim().toUpperCase(),i=r===(de.operators.and||"").trim().toUpperCase(),a=r===(de.operators.nand||"").trim().toUpperCase(),o=!0,l=0,p=0;p<this.exprs.length;p++){if(o=this.exprs[p].eval(e,t),i&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:i||a?i:s&&0===l}toString(e=null){return"!"===this.logic?"!"+I(this.exprs).toString(e):this.exprs.map(t=>t.toString(e)).join(" "+this.logic+" ")}static parse(e,t,r=de){if(e.startsWith("!"))return new r([t(e.substr(1))],"!");var n=Q.lex(e,q(r.operators));if(n.tokens.length>1){var s=ce(n.matches);if(s.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+e+"!");return new r(n.tokens.map(e=>t(e.trim())),I(s))}}};de.operators={and:"&&",or:"||"};var fe=de;const ge=class extends S{};Object.defineProperty(ge.prototype,"jsenType",{get:()=>"AssignmentExpression"});var me=ge;const ve=class extends me{constructor(e,t,r,n="="){super(),this.initKeyword=e,this.reference=t,this.val=r,this.operator=n}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.val.eval(e,t);if(!$(r.context)&&!$(r.name))return H.create(r.context).set(r.name,n,t,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(e=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(e),this.operator,this.val.toString(e)].join(" ")}static parse(e,t,r=ve){var n=Q.lex(e,r.operators);if(2===n.tokens.length){var s,i=n.tokens.shift().trim(),a=n.tokens.shift().trim();if(["var","let","const"].includes(Y(i," "))&&(s=Y(i," "),i=J(i," ").trim()),!((i=t(i))instanceof P&&(a=t(a))))throw new Error("Invalid assignment expression: "+e);return new r(s,i,a,n.matches[0].trim())}}};ve.operators=[" = "];var be=ve;const ye=class extends S{};Object.defineProperty(ye.prototype,"jsenType",{get:()=>"BooleanType"});var we=ye;const xe=class extends we{constructor(e){super(),this.state=e}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(e,t,r=xe){if("true"===(e=e.toLowerCase().trim())||"false"===e)return new r(e)}};var je=xe;const Ee=class extends F{constructor(e,t){super(),this.reference=e,this.args=t}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.args.eval(e,t);if(!$(r.context)&&!$(r.name))return H.create(r.context).exec(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.reference.toString(e)+this.args.toString(e)}static parse(e,t,r=Ee){if(!e.startsWith("(")&&e.endsWith(")")&&!Q.match(e,[" "]).length){var n,s=Q.split(e,[]),i=s.pop();if(!((n=t(s.join("")))instanceof P&&(i=t(i,[pe]))))throw new Error("Invalid call directive: "+e);return new r(n,i)}}};var Oe=Ee;const ke=class extends S{};Object.defineProperty(ke.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Se=ke;const Te=class extends Se{constructor(e,t,r){super(),this.operand1=e,this.operand2=t,this.operator=r}eval(e=null,t={}){return Te.compare(this.operand1.eval(e,t),this.operand2.eval(e,t),this.operator)}toString(e=null){return[this.operand1.toString(e),this.operator,this.operand2.toString(e)].join(" ")}static parse(e,t,r=Te){var n=q(r.operators).map(e=>" "+e+" "),s=Q.lex(e,n);if(s.tokens.length>1){if(s.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+e+"!");return new r(t(I(s.tokens).trim()),t(B(s.tokens).trim()),s.matches[0].trim())}}static compare(e,t,r="=="){if(-1===q(Te.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return e===t;case"==":case"=":return e==t;case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"!=":return e!=t;case"!==":return e!==t;case"^=":return R(e)&&e.startsWith(t);case"$=":return R(e)&&e.endsWith(t);case"*=":return!(!c(t)&&!R(t))&&e.indexOf(t)>-1;case"~=":return R(e)&&R(t)&&(" "+e+" ").indexOf(" "+t+" ")>-1;case">=<":if(!c(t)||2!==t.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return e>=t[0]&&e<=t[1];case"/**/":return t.match(new RegExp(e));default:return!1}}static diff(e,t,r){return!Te.compare(e,t,r?"===":"==")}};Te.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var Pe=Te;const Ce=class extends S{};Object.defineProperty(Ce.prototype,"jsenType",{get:()=>"TernaryConditional"});var Fe=Ce;const Ae=class extends Fe{constructor(e,t,r){super(),this.assertion=e,this.onTrue=t,this.onFalse=r}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue.eval(e,t):this.onFalse.eval(e,t)}toString(e=null){return[this.assertion.toString(e),Ae.operators[0],this.onTrue.toString(e),Ae.operators[1],this.onFalse.toString(e)].join(" ")}static parse(e,t,r=Ae){var n=Q.split(e,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+e+"!");return new r(t(n[0].trim()),t(n[1].trim()),t(n[2].trim()))}}};Ae.operators=["?",":"];var Ne=Ae;const De=class extends S{};Object.defineProperty(De.prototype,"jsenType",{get:()=>"DeleteExpression"});var _e=De;const Re=class extends _e{constructor(e,t="delete"){super(),this.reference=e,this.operator=t}eval(e=null,t={}){var r=this.reference.getEval(e,t);if(!$(r.context)&&!$(r.name))return H.create(r.context).del(r.name,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.operator+" "+this.reference.toString(e)}static parse(e,t,r=Re){var n=Q.lex(e,Object.values(r.operators));if(1===n.matches.length&&e.startsWith(n.matches[0]+" ")){var s;if(!((s=t(n.tokens.pop().trim()))instanceof P))throw new Error("Invalid delete directive: "+e);return new r(s,n.matches[0].trim())}}};Re.operators={red:"reduce",del:"delete"};var $e=Re;const Me=class extends S{};Object.defineProperty(Me.prototype,"jsenType",{get:()=>"Statements"});var We=Me;const qe=class extends S{};Object.defineProperty(qe.prototype,"jsenType",{get:()=>"ReturnDirective"});var Ie=qe;const Be=class extends We{constructor(e,t){super(),this.stmts=e||[],this.delim=t}eval(e=null,t={}){e=H.create(e);for(var r=[],n=0;n<this.stmts.length;n++){if(this.stmts[n]instanceof Ie)return this.stmts[n].eval(e,t);r[n]=this.stmts[n].eval(e,t)}return r}toString(e=null){return this.stmts.map(t=>t.toString(e)).join(this.delim)}static parse(e,t,r=Be){var n=Q.lex(e,q(r.operators).concat([(e,t)=>!(!e.endsWith("}")||t.trim().startsWith("else"))&&""]));if(n.matches.length)return new r(n.tokens.map(e=>t(e.trim())).filter(e=>e),n.matches[0].trim())}};Be.operators=[";","\r\n"];var Le=Be;const Ue=class extends N{constructor(e,t,r={}){super(),this.paramters=e||{},this.statements=t,this.arrowFunctionFormatting=r}inherit(e){if(e instanceof N){for(var t=Object.keys(e.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,t.length);n++){var s=t[n],i=r[n];if(!i&&s)throw new Error("Parameter #"+n+" ("+s+") in parent function must be implemented.");if(i&&s){var a=e.paramters[s],o=this.paramters[i];if(o&&!a)throw new Error("Parameter #"+n+" ("+i+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+i+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=e}return this}eval(e=null,t={}){return(...r)=>{var n={};E(Object.keys(this.paramters),(s,i)=>{var a=this.paramters[i];if(r.length-1<s&&!a)throw new Error('The parameter "'+i+'" is required.');n[i]=r.length>s?r[s]:this.paramters[i]?this.paramters[i].eval(e,t):null});var s=new H(n,e);return this.statements.eval(s,t)}}toString(e=null){var t=[];if(E(this.paramters,(r,n)=>{t.push(r+(n?"="+n.toString(e):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===t.length&&-1===t[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?t[0]:"("+t.join(", ")+")")+" => "+(n?this.statements.toString(e):"{"+this.statements.toString(e)+"}")}return"function ("+t.join(", ")+") {"+this.statements.toString(e)+"}"}static parse(e,t,r=Ue){var n;if((e=e.trim()).startsWith("function")&&(n=Q.split(e,[]).slice(1).filter(e=>e.trim()))&&2===n.length)var s=!1,i=Z(n.shift().trim(),"(",")"),a=Z(n.shift().trim(),"{","}");else{if(e.startsWith("function")||!(n=Q.split(e,["=>"]))||2!==n.length)return;i=n.shift().trim(),a=n.shift().trim(),s={};V(i,"(",")")?i=Z(i,"(",")"):s.head=!1,V(a,"{","}")?a=Z(a,"{","}"):s.body=!1}var o={};Q.split(i,[","]).forEach(e=>{var r=e.split("=");r[1]?o[r[0].trim()]=t(r[1].trim()):o[e.trim()]=null});var l=t(a,[Le],{assert:!1})||t(a);return new r(o,l,s)}};Ue.operators=["=>"];var Qe=Ue;const He=class extends S{};Object.defineProperty(He.prototype,"jsenType",{get:()=>"IfConditional"});var Ke=He;const ze=class extends Ke{constructor(e,t,r,n={}){super(),this.assertion=e,this.onTrue=t,this.onFalse=r,this.params=n}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue?this.onTrue.eval(e,t):void 0:this.onFalse?this.onFalse.eval(e,t):void 0}toString(e=null){var t=this.params.onTrueIsBlock?"{"+this.onTrue.toString(e)+"}":this.onTrue?this.onTrue.toString(e):"",r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(e)+"}":this.onFalse?this.onFalse.toString(e):"";return"if ("+this.assertion.toString(e)+")"+t+(r?" else "+r:"")}static parse(e,t,r=ze){var n;if((e=e.trim()).startsWith("if")&&(n=Q.split(e,[],{limit:2}).slice(1).filter(e=>e.trim()))&&2===n.length){var s,i,a=t(Z(n.shift().trim(),"(",")").trim()),o=Q.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),p=(o.shift()||"").trim();return V(l,"{","}")?(s=!0,l=t(l=Z(l,"{","}").trim(),[Le],{assert:!1})||t(l)):l=t(l),p&&(V(p,"{","}")?(i=!0,p=t(p=Z(p,"{","}").trim(),[Le],{assert:!1})||t(p)):p=t(p)),new r(a,l,p,{onTrueIsBlock:s,onFalseIsBlock:i})}}};var Ve=ze,Je=function(e,t,r=null){return c(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]};const Ye=class extends S{};Object.defineProperty(Ye.prototype,"jsenType",{get:()=>"MathExpression"});var Ze=Ye;const Ge=class extends Ze{constructor(e,t){super(),this.val=e,this.exprs=t}eval(e=null,t={}){return this.exprs.reduce((r,n)=>{var s=n.val.eval(e,t),i=n.operator.trim();if(!(f(r)&&f(s)||"+"===i))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(i){case"+":return r+s;case"-":return r-s;case"*":return r*s;case"/":return r/s}},this.val.eval(e,t))}toString(e=null){return[this.val.toString(e)].concat(this.exprs.map(t=>t.operator+" "+t.val.toString(e))).join(" ")}static parse(e,t,r=Ge){var n=Q.lex(e,q(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var s=ce(n.matches);if(Je(s,Ge.operators.sup).length&&Je(s,Ge.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+e+"!");return new r(t(n.tokens.shift().trim()),n.tokens.map((e,r)=>({operator:n.matches[r],val:t(e.trim())})))}}};Ge.operators={sup:["*","/"],sub:[" + "," - "]};var Xe=Ge;const et=class extends S{};Object.defineProperty(et.prototype,"jsenType",{get:()=>"NumberType"});var tt=et;const rt=class extends tt{constructor(e,t=0){super(),this.int=e,this.dec=t}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(e=null){return this.int+(this.dec?"."+this.dec:null)}static parse(e,t,r=rt){if(f(e)){e=e.split(".");return new r(parseInt(e.shift()),parseInt(e.shift()))}}};var nt=rt;const st=class extends S{};Object.defineProperty(st.prototype,"jsenType",{get:()=>"ObjectType"});var it=st;const at=class extends it{constructor(e){super(),this.entries=e||{}}inherit(e){return e instanceof it&&E(e.entries,(e,t)=>{e in this.entries||(this.entries[e]=t)}),this}eval(e=null,t={}){var r={};return E(this.entries,(n,s)=>{r[n]=s.eval(e,t)}),r}toString(e=null){var t=[];return E(this.entries,(r,n)=>{t.push(r+at.operators.sub+n.toString(e))}),"{"+t.join(at.operators.sup)+"}"}static parse(e,t,r=at){if(V(e,"{","}")&&!Q.match(e.trim(),[" "]).length){var n={},s=Q.split(Z(e,"{","}"),[at.operators.sup]).map(e=>e.trim()).filter(e=>e);return E(s,(e,r)=>{var s=Q.split(r,[at.operators.sub],{limit:1});n[I(s).trim()]=t(B(s).trim())}),new r(n)}}};at.operators={sup:",",sub:":"};var ot=at;const lt=class extends S{};Object.defineProperty(lt.prototype,"jsenType",{get:()=>"PresenceOperator"});var pt=lt;const ct=class extends pt{constructor(e,t,r="in"){super(),this.prop=e,this.reference=t,this.operator=r}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.prop.eval(e,t);if(!$(r.context)&&!$(r.name))return H.create(r.context).has(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return[this.prop.toString(e),this.operator,this.reference.toString(e)].join(" ")}static parse(e,t,r=ct){var n=Q.lex(e,r.operators);if(2===n.tokens.length){var s,i;if(!((s=t(n.tokens.shift().trim()))&&(i=t(n.tokens.shift().trim()))instanceof P))throw new Error("Invalid presence check expression: "+e);return new r(s,i,n.matches[0].trim())}}};ct.operators=[" in "];var ht=ct;const ut=class extends P{constructor(e,t,r=!1){super(),this.context=e,this.name=t,this.backticks=r}getEval(e=null,t={}){var r=e,n=this.name;return this.context&&(n instanceof S&&(n=n.eval(e,t)),r=this.context.eval(e,t)),{context:r,name:n}}eval(e=null,t={}){var r=this.getEval(e,t);if(!$(r.context)&&!$(r.name))return H.create(r.context).get(r.name,t)}toString(e=null){var t=this.name;if(this.context){var r=this.context.toString(e);t instanceof S?t="["+t.toString(e)+"]":this.backticks&&(t="`"+t+"`")}else{r=e;this.backticks&&(t="`"+t+"`")}return(r||"")+(r&&!t.startsWith("[")?ut.separator:"")+t}static parse(e,t,r=ut){if(!Q.match(e.trim(),[" "]).length){var n,s,i=Q.split(e,[]),a=i.pop(),o=Q.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),i=i.concat(o)),V(a,"`","`")&&(a=Z(a,"`","`"),s=!0),i.length&&((n=t(i.join(""))).isContext=!0),V(a,"[","]")){if(!n)throw new Error("Invalid reference: "+e+"!");a=t(Z(a,"[","]"))}return new r(n,a,s)}}};ut.separator=".";var dt=ut;const ft=class extends Ie{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr?this.expr.eval(e,t):void 0}toString(e=null){return this.expr?"return "+this.expr.toString(e):"return"}static parse(e,t,r=ft){var n=e.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(t(e.substr(6).trim()))}};var gt=ft;const mt=class extends S{};Object.defineProperty(mt.prototype,"jsenType",{get:()=>"StringType"});var vt=mt;const bt=class extends vt{constructor(e,t){super(),this.expr=e,this.quote=t}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(e,t,r=bt){if(e=e.trim(),(V(e,'"','"')||V(e,"'","'"))&&!Q.match(e,[" "]).length){var n=V(e,'"','"')?'"':"'";return new r(Z(e,n,n),n)}}};var yt=bt;_.grammars={If:Ve,Return:gt,Deletion:$e,Assignment:be,Presence:ht,Func:Qe,Abstraction:te,Condition:Ne,Assertion:fe,Comparison:Pe,Math:Xe,Arr:ie,Obj:ot,Num:nt,Str:yt,Bool:je,Call:Oe,Reference:dt};var wt=_,xt=function(e){return Array.isArray(e)||"object"==typeof e},jt=function(e){return Array.isArray(e)},Et=function(e){return"string"==typeof e},Ot=function(e){return arguments.length&&(void 0===e||void 0===e)},kt=function(e){return null===e||""===e},St=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},Tt=function(e,t=!0){return jt(e)?e:!t&&St(e)?[e]:!1!==e&&0!==e&&function(e){return kt(e)||Ot(e)||!1===e||0===e||xt(e)&&!Object.keys(e).length}(e)?[]:function(e){return!Et(e)&&!Ot(e.length)}(e)?Array.prototype.slice.call(e):St(e)?Object.values(e):[e]},Pt=function(e,t=null){var r={};return 2===arguments.length&&(Et(e)?r[e]=t:jt(e)&&jt(t)&&e.forEach((e,n)=>r[e]=t[n])),r},Ct=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},Ft=function(e){return function(e){return"function"==typeof e}(e)||e&&"[object function]"==={}.toString.call(e)},At=function(e,t){var r=void 0;return xt(e)&&Object.keys(e).forEach((n,s)=>{!1!==r&&(r=t(Ct(n)?parseFloat(n):n,e[n],s))}),r},Nt=class{constructor(e,t={}){this.$={},this.$.target=e,this.$.details=t,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],At(t,(e,t)=>{"$"!==e&&Object.defineProperty(this,e,{value:t})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(e){if(!(e instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(e),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(e){var t,r=St(e)&&!Ot(e.propagationStopped)&&!Ot(e.defaultPrevented);!1===e||r&&e.propagationStopped?this.stopPropagation():!1===e||r&&e.defaultPrevented?this.preventDefault():(e instanceof Promise&&(t=e)||r&&(t=e.promises))&&this.promise(t)}},Dt=class extends Nt{constructor(e,t={}){super(e,t)}},_t=function(e){return"number"==typeof e},Rt=function(e){return St(e)&&Object.getPrototypeOf(e)===Object.prototype},$t=function(e){return!0===e||!1===e};const Mt=function(e,t,r=!0,n=1){if(jt(e)&&jt(t)&&e.length!==t.length)return!r;if(St(e)&&St(t)){var s=Object.keys(e),i=Object.keys(t);if(!s.length&&!i.length)return Rt(e)&&Rt(t)?r:e===t===r;if(!Mt(s,i))return!r}if(n>0&&(jt(e)&&jt(t)||St(e)&&St(t))){var a=function(e,t,r=!0,n=!0,s=!1,i=!1){if(jt(e)&&jt(t)){var a=[],o=!0;return e.forEach(e=>{if(o){var l=!1;At(t,(t,s)=>{(!l||n&&xt(e))&&(l=r(e,s),(jt(l)&&!l.length||St(l)&&!Object.keys(l).length)&&(l=!1),xt(l)&&n&&(e=l))}),xt(l)?a.push(n?l:e):$t(l)?s&&!l||!s&&l?a.push(e):i&&(o=!1):a.push(l)}}),a}if(St(e)&&St(t)){a={},o=!0;return Object.keys(e).forEach(l=>{if(o){var p=r(e[l],t[l]);(jt(p)&&!p.length||St(p)&&!Object.keys(p).length)&&(p=!1),xt(p)?a[l]=n?p:e[l]:$t(p)?s&&!p||!s&&p?a[l]=e[l]:i&&(o=!1):a[l]=p}}),a}}(e,t,(e,t)=>Mt(e,t,r,n-1),!1,!1,!0);return jt(a)?a.length===e.length&&a.length===t.length:St(a)&&St(e)?Object.keys(a).length===Object.keys(e).length&&Object.keys(a).length===Object.keys(t).length:a}return Ft(r)?r(e,t):_t(e)&&_t(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var Wt=Mt,qt=class{disconnect(){this.disconnected=!0}},It=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(e){return this.fireables.push(e),e}removeFireable(e,t=[]){this.fireables=this.fireables.filter(t=>t!==e)}findFireables(e){return this.fireables.filter(t=>!(e.handler&&t.handler!==e.handler||e.params&&(e.params.type&&t.params.type!==e.params.type||e.params.tags&&function(e,t,r=null){return jt(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]}(t.params.tags||[],e.params.tags).length!==e.params.tags.length)))}static createForTarget(e,t,r){var n;if(e&&xt(e))return(n=e[Bt])||(n={},Object.defineProperty(e,Bt,{get:()=>n,set:e=>{if(e!==n)throw new Error('Attempt to overwrite the "'+Bt+'" special property!')},enumerable:!1})),n[t]="listeners"===t?new r(e):new r,n[t]}static getForTarget(e,t){var r;if(e&&xt(e)&&(r=e[Bt]))return r[t]}};const Bt="< r e f l e x >";var Lt=class extends qt{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e,t,r){return this.disconnected||this.params.type&&this.params.type!==e.type?t(...Tt(arguments).slice(2)):this.handler(e,r,t)}};class Ut extends It{fire(e,t=null){if(this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.query===e.query).length)return t?t():void 0;this.currentlyFiringEvents.push(e);const r=(n,...s)=>{var i=this.fireables[n];return i?i.fire(e,(...e)=>r(n+1,...e),...s):t?t(...s):s[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(e){return super.createForTarget(e,"traps",Ut)}static getForTarget(e){return super.getForTarget(e,"traps")}}var Qt=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},Ht=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!jt(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{Qt(r,...Object.getOwnPropertyNames(e))}),r};function Kt(e,t,r=!1,n=!1,s=!0){var i=0,a=e.shift();if((Ct(a)||!0===a||!1===a)&&(i=a,a=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,o)=>{(xt(e)||Ft(e))&&(r?Ht(e):Object.getOwnPropertyNames(e)).forEach(l=>{var p=a[l],c=e[l];if((jt(p)&&jt(c)||St(p)&&St(c))&&(!0===i||i>0))a[l]=jt(p)&&jt(c)?[]:{},Kt([Ct(i)?i-1:i,a[l],p,c],t,r,n,s);else if(t(l,a,e,o))if(jt(a)&&jt(e))n?a[l]=c:a.push(c);else try{s?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(e,l)):a[l]=e[l]}catch(e){}})}),a}var zt=function(e,t=[],r=!0){var n=0;return Ct(arguments[0])&&xt(arguments[1])&&(n=arguments[0],e=arguments[1],t=arguments[2]||[]),Kt([n,{},e],(e,r,n)=>Ft(t)?t(e):!jt(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)},Vt=function(...e){return Kt(e,(e,t,r)=>!0,!1,!1,!1)},Jt=class extends Nt{constructor(e,t={}){if(t.data&&(t.fields=Object.keys(t.data)),super(e,t),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(e=>{var t=r+"."+e;this.originatingFields.push(t),this.originatingData[t]=this.srcEvt.originatingData[e],this._originatingData[t]=this.srcEvt._originatingData[e]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=Wt(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class Yt extends It{findFireables(e){return super.findFireables(e).filter(t=>kt(e.fields)||Ot(e.fields)||Wt(Tt(t.fields),Tt(e.fields)))}fire(e){return this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.fields===e.fields).length||(this.currentlyFiringEvents.push(e),this.fireables.forEach(t=>{e.propagationStopped||t.params.type&&t.params.type!==e.type||t.fire(e)}),this.currentlyFiringEvents.pop()),e}static createForTarget(e){return super.createForTarget(e,"observers",Yt)}static getForTarget(e){return super.getForTarget(e,"observers")}}var Zt=function(e,t,r=null,n={}){if(!e||!xt(e))throw new Error("Object must be of type object!");var s;(Ft(t)||kt(t)||Ot(t))&&(n=arguments.length>2?r:{},r=t,t=null),(s=Yt.getForTarget(e))&&s.findFireables({handler:r,fields:t,params:n}).forEach(e=>{s.removeFireable(e)})},Gt=function(e,t,r){Zt(r,null,{tags:["#e-bubbling",t,e]})},Xt=function(e){return typeof e},er=function(e,t,r={},n={}){t=Tt(t).slice();for(var s=e;!Ot(s)&&!kt(s)&&t.length;){var i=t.shift();if(!(r.get?r.get(s,i):xt(s)?i in s:s[i]))return void(n.exists=!1);s=r.get?r.get(s,i):s[i]}return n.exists=!0,s},tr=class extends qt{constructor(e,t=null,r={}){if(super(),this.handler=e,this.fields=t,this.params=r,this.fieldsArray=Tt(this.fields),this.isDynamicField=this.fieldsArray.filter(e=>e.indexOf("..")>-1||e.startsWith(".")||e.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(e){this.disconnected||this.params.type&&this.params.type!==e.type||e.dataEven&&!1!==this.params.diff||this.fireCallback(e,t=>{if(t){var r=[],n=[];return!1!==this.params.data&&t.forEach(t=>{var s=e.originatingFields.reduce((r,n)=>{var s=e.originatingData[n],i=e._originatingData[n];if(!r&&t===n)return[s,i];if(!r&&(t+".").startsWith(n+".")){var a=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)}(t,n+".");return[er(s,a.split("."),{get:ir}),er(i,a.split("."),{get:ir})]}return r},null);if(s)r.push(s.shift()),n.push(s.shift());else{var i=er(e.target,Et(t)?t.split("."):t,{get:ir});r.push(i),n.push(i)}}),jt(this.fields)?e.response(this.handler(r,n,e)):e.response(this.handler(r[0],n[0],e))}r={},n={};return e.fields.forEach(t=>{var s=t in e.data?e.data[t]:ir(e.target,t),i=t in e._data?e._data[t]:s;r[t]=s,n[t]=i}),e.response(this.handler(r,n,e))})}fireCallback(e,t){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((t,n)=>(t=Et(t)?t.replace(/`/g,""):t,r[n]=[],e.originatingFields.filter(s=>{var i=s.split("."),a=this.isDynamicField?t.split(".").map((e,t)=>e||i[t]||"").join("."):t;return Qt(r[n],a),(a===s&&!e.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(s+".")||this.params.observeDown&&(s+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(e=>!e).length)}).length)).length&&(n=r,n.reduce((e,t)=>{var r=[];return e.forEach(e=>{Tt(t).forEach(t=>{var n=e.slice();n.push(t),r.push(n)})}),r},[[]])).forEach(t)}else e.srcEvt&&!this.params.observeDown||t();var n}},rr=function(e,t,r=null,n={}){if(!e||!xt(e))throw new Error("Object must be of type object!");if(Ft(t)&&(n=arguments.length>2?r:{},r=t,t=null),!Ft(r))throw new Error('Callback must be a function; "'+Xt(r)+'" given!');var s;return(s=Yt.getForTarget(e))||(s=Yt.createForTarget(e)),s.addFireable(new tr(r,t,n))},nr=function(e,t,r){var n;rr(r,(s,i,a)=>{if(n=Yt.getForTarget(e)){var o=Pt(t,r);return n.fire(new Jt(e,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",t,e]})},sr=function(e,t,r=[],n=!1){var s=e.map((e,t)=>{if(!e||!xt(e))throw new Error("Target must be of type object!");return{target:e,targetCopy:zt(e,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),i=t(...e);return s.map(e=>{var t,s,i,a=Object.keys(e.targetCopy),o=Object.keys(e.target),l=(t=a.concat(o),t.filter((e,t,r)=>r.indexOf(e)===t)).filter(t=>{if(!(r.length&&!r.includes(t)||jt(e.target)&&("length"===t||"< r e f l e x >"===t))){if(o.includes(t)?(e._setData[t]=e.targetCopy[t],e.setData[t]=e.target[t],a.includes(t)||e.created.push(t)):(e._delData[t]=e.targetCopy[t],e.delData[t]=void 0,e.deleted.push(t)),e.targetCopy[t]!==e.target[t])return e.targetCopy[t]&&xt(e.targetCopy[t])&&Gt(e.target,t,e.targetCopy[t]),e.target[t]&&xt(e.target[t])&&nr(e.target,t,e.target[t]),!0;delete e.setData[t],delete e._setData[t]}});return((i=Yt.getForTarget(e.target))||n)&&(s=new Jt(e.target,{type:"transaction",data:Vt(e.setData,e.delData),_data:Vt(e._setData,e._delData),created:e.created,deleted:e.deleted}),i&&(Object.keys(e.delData).length&&s.response(i.fire(new Jt(e.target,{type:"del",data:e.delData,_data:e._delData,deleted:e.deleted}))),Object.keys(e.setData).length&&s.response(i.fire(new Jt(e.target,{type:"set",data:e.setData,_data:e._setData,created:e.created}))))),n?s:l}),i},ir=function(e,t){if(!e||!xt(e))throw new Error("Target must be of type object!");var r,n,s=function(r){return arguments.length?r:jt(t)?Pt(t,e):e[t]};return r=(n=Ut.getForTarget(e))?n.fire(new Dt(e,{type:"get",query:t}),s):s(),jt(e)&&!Ct(t)&&Ft(r)?function(...t){return sr([e],()=>r.apply(e,t))}:r},ar=function(e,t){return e.reduce((e,r)=>e&&t(r),!0)},or=function(e,t){if(!e||!xt(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t in e};return(r=Ut.getForTarget(e))?r.fire(new Dt(e,{type:"has",query:t}),n):n()},lr=function(e,t,r,n=null,s=!1){if(!t||!xt(t))throw new Error("Target must be of type object!");St(r)&&(s=n);var i,a,o=r,l={},p={},c=[],h=(r,n,s)=>{var i;l[r]=t[r],or(t,r)||c.push(r),e&&(n=(i=n||{}).value);var a,o,h=function(e){return arguments.length?e:(i?Object.defineProperty(t,r,i):t[r]=n,!0)};if(o=Ut.getForTarget(t)){var u=i?{type:"def",query:r,descriptor:i,related:s}:{type:"set",query:r,value:n,related:s};a=o.fire(new Dt(t,u),h)}else a=h();return a?(p[r]=n,p[r]!==l[r]?(l[r]&&xt(l[r])&&Gt(t,r,l[r]),p[r]&&xt(p[r])&&nr(t,r,p[r])):(delete p[r],delete l[r])):delete l[r],a},u=[];if(jt(o)||(Et(o)||_t(o))&&(o=Tt(o)))u=o.map(e=>h(e,n,o));else if(St(r)){var d=Object.keys(r);u=d.map(e=>h(e,r[e],d))}return((a=Yt.getForTarget(t))||s)&&(i=new Jt(t,{type:"set",data:p,_data:l,created:c}),a&&a.fire(i)),s?i:ar(u,e=>e)},pr=function(e,t,r=null,n=!1){return lr(!1,...arguments)},cr=function(e,t){Tt(t).forEach(t=>{var r,n,s=e[t],i=Object.getOwnPropertyDescriptor(e,t)||{enumerable:!(t in e)};"value"in i&&delete i.value,"writable"in i&&delete i.writable,i.get=()=>{if(r)return s;r=!0;var n=ir(e,t);return r=!1,n},i.set=r=>{if(n)return s=r,!0;n=!0;pr(e,t,r);return n=!1,!0},Object.defineProperty(e,t,i)})},hr=function(e,t){if(!t||!xt(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e?Object.getOwnPropertyNames(t):Object.keys(t)};return(r=Ut.getForTarget(t))?r.fire(new Dt(t,{type:e?"ownKeys":"keys"}),n):n()},ur=function(e){return hr(!1,...arguments)};var dr=function(e,t,r=null,n=!1){return lr(!0,...arguments)},fr=function(e,t,r=!1){if(!e||!xt(e))throw new Error("Target must be of type object!");t=Tt(t);var n,s,i={},a={},o=[],l=t.map(r=>{i[r]=e[r],or(e,r)&&o.push(r);var n,s,l=function(t){return arguments.length?t:(delete e[r],!0)};return(n=(s=Ut.getForTarget(e))?s.fire(new Dt(e,{type:"del",query:r,related:t}),l):l())&&(a[r]=void 0,i[r]&&xt(i[r])&&Gt(e,r,i[r])),n});return((s=Yt.getForTarget(e))||r)&&(n=new Jt(e,{type:"del",data:a,_data:i,deleted:o}),s&&Object.keys(a).length&&s.fire(n)),r?n:ar(l,e=>e)};class gr extends It{fire(e){return this.fireables.forEach(t=>{e.propagationStopped||t.fire(e)}),e}static createForTarget(e,t=gr){return super.createForTarget(e,"listeners",t)}static getForTarget(e){return super.getForTarget(e,"listeners")}}var mr=class extends qt{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e){this.params.type===e.type&&e.response(this.handler.call(this.target,e.e))}};var vr={build:function e(t,r=!1){if(!t||!xt(t))throw new Error("Target must be of type object!");var n=ur(t);n.forEach(n=>{var s=ir(t,n);xt(s)&&s&&(nr(t,n,s),e(s,r))}),r&&cr(t,n)},observe:rr,unobserve:Zt,trap:function(e,t,r={}){if(!e||!xt(e))throw new Error("Object must be of type object!");if(!Ft(t))throw new Error('Callback must be a function; "'+Xt(t)+'" given!');var n;return(n=Ut.getForTarget(e))||(n=Ut.createForTarget(e)),n.addFireable(new Lt(t,r))},untrap:function(e,t=null,r={}){if(!e||!xt(e))throw new Error("Object must be of type object!");var n;(n=Yt.getForTarget(e))&&n.findFireables({handler:t,params:r}).forEach(e=>{n.removeFireable(e)})},def:dr,defineProperty:dr,set:pr,del:fr,deleteProperty:fr,link:nr,unlink:Gt,transaction:sr,get:ir,has:or,init:cr,keys:ur,ownKeys:function(e){return hr(!0,...arguments)},on:function(e,t,r,n={}){var s;return(s=gr.getForTarget(e))||(s=gr.createForTarget(e)),s.addFireable(new mr(r,Vt(n,{type:t})))},off:function(e,t,r=null,n={}){var s;(s=gr.getForTarget(e))&&s.findFireables({handler:r,type:t,params:n}).forEach(e=>{s.removeFireable(e)})},trigger:function(e,t,r={}){var n;if(n=gr.getForTarget(e))return n.fire(new Nt(e,Vt(r,{type:t})))},MutationEvent:Jt,QueryEvent:Dt,Event:Nt},br=function(e){return function(e){return"function"==typeof e}(e)||e&&"[object function]"==={}.toString.call(e)},yr=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},wr=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)},xr=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},jr=function(e,t){return xr(e,t,!0)},Er=function(e,t,r,a=[]){if(a=a.concat([n.attrMap.namespace,...n.attrMap.nocompose]),t.hasAttribute("norecompose")&&(a=a.concat((t.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()))),br(n.recomposeCallback)){var o=n.recomposeCallback(e,t,r,a);if(!1===o)return!1;(i(o)||s(o))&&(a=a.concat(o))}wr(n.listAttributes.concat([n.attrMap.hint,n.attrMap.superrole,n.attrMap.subrole,"role","class"])).forEach(n=>{var s,i;if(!a.includes(n)&&!a.includes("*")&&(s=e.getAttribute(n))){if(i=t.getAttribute(n))var o="prepend"===r?[s,i]:[i,s];else o=[s];t.setAttribute(n,wr(o.join(" ").split(" ").map(e=>e.trim())).join(" ")),a.push(n)}}),wr(n.keyValAttributes.concat("style")).forEach(n=>{var s,i;if(!a.includes(n)&&!a.includes("*")&&(s=e.getAttribute(n))){if(i=t.getAttribute(n))(o="prepend"===r?[s,i]:[i,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(n,o.join(" ")),a.push(n)}});for(var l=0;l<e.attributes.length;l++){var c=e.attributes[l];a.includes(c.name)||a.includes("*")||t.hasAttribute(c.name)||(t.setAttribute(c.name,c.value),a.push(c.name))}if(!a.includes("@directives")&&!a.includes("*")){var h=p((t.shadowRoot||t).children).filter(e=>e.matches(n.tagMap.jsen)),u=p((e.shadowRoot||e).children).filter(e=>e.matches(n.tagMap.jsen));u.length&&(h.length?h[0][r](u[0].textContent):t.prepend(u[0].cloneNode(!0)))}return t},Or=function(e,t){return t.matches(n.tagMap.import)?function(e,t){t=t.cloneNode(!0);var r=e.getAttribute(n.attrMap.namespace),s=(t.getAttribute(n.attrMap.namespace),(t.getAttribute(n.attrMap.superrole)||"").split(" ").map(e=>e.trim()));return t.setAttribute(n.attrMap.namespace,r),Er(e,t,"append"),p((e.shadowRoot||e).children).forEach((e,r)=>{if(!e.matches(n.tagMap.jsen)){e=e.cloneNode(!0);var i=[],a=[];(e.getAttribute(n.attrMap.subrole)||"").split(" ").map(e=>e.trim()).forEach(e=>{var t=s.filter(t=>e.startsWith(t+"-"));t.length&&(i.push(t[0]),a.push(e))});var o=n.context.CSS?n.context.CSS.escape:e=>e;if(i.length){var l,p=i.map(e=>"["+o(n.attrMap.superrole)+'~="'+e+'"]'),c=a.map(e=>"["+o(n.attrMap.subrole)+'~="'+e+'"]');t.shadowRoot&&(l=t.shadowRoot.querySelectorAll(c))||1===(l=t.querySelectorAll(c)).length&&l[0].closest(p)===t?(Er(l[0],e,"prepend"),l[0].replaceWith(e)):t.append(e)}else t.append(e)}}),t}(t,e):Er(e,t,"prepend")};class kr{constructor(e,t,r,n=null){this.sources=p(e),this.namespace=p(t),this.getter=r,this.carry=n,this.collections={},this.value}enter(e){return e in this.collections||(this.collections[e]=new kr(this.sources,this.namespace.concat(e),this.getter,this)),this.collections[e]}leave(){return this.carry}get(){if(!this.value){var e=this.namespace.slice(),t=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(t=this.getter.call(null,r,e,t,n))&&(this.value=t)})}return this.value}find(e){for(var t,r,n=e.split("/"),s=this;(r=n.shift())&&(s=s.enter(r));)t=s;var i=t.get();if(i)return i.cloneNode(!0)}}var Sr=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},Tr=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},Pr=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!s(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{Tr(r,...Object.getOwnPropertyNames(e))}),r};function Cr(e,t,r=!1,n=!1,i=!0){var a=0,p=e.shift();if((yr(p)||!0===p||!1===p)&&(a=p,p=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,c)=>{(o(e)||br(e))&&(r?Pr(e):Object.getOwnPropertyNames(e)).forEach(o=>{var h=p[o],u=e[o];if((s(h)&&s(u)||l(h)&&l(u))&&(!0===a||a>0))p[o]=s(h)&&s(u)?[]:{},Cr([yr(a)?a-1:a,p[o],h,u],t,r,n,i);else if(t(o,p,e,c))if(s(p)&&s(e))n?p[o]=u:p.push(u);else try{i?Object.defineProperty(p,o,Object.getOwnPropertyDescriptor(e,o)):p[o]=e[o]}catch(e){}})}),p}var Fr=function(...e){return Cr(e,(e,t,r)=>!0,!1,!1,!1)};class Ar extends Le{filter(){var e=[];return this.stmts.forEach(t=>{Ar.flatten(t,t=>{e.push(t)})}),(e=e.reduce((e,t)=>(e.forEach(e=>{e.isDuplicate||e.overridden||(t.toString()!==e.toString()||t.important!==e.important&&t.fallback!==e.fallback?t.important||e.fallback?e.overridden=!0:(e.important||t.fallback)&&(t.overridden=!0):t.isDuplicate=!0)}),e.concat([t])),[])).filter(e=>!e.isDuplicate&&!e.overridden)}static flatten(e,t,r=""){if("IfConditional"===e.jsenType){var n="("+e.assertion.toString()+")";e.onTrue&&("Statements"===e.onTrue.jsenType?e.onTrue.stmts.forEach(e=>{Ar.flatten(e,t,(r?r+" && ":"")+n)}):Ar.flatten(e.onTrue,t,(r?r+" && ":"")+n)),e.onFalse&&("Statements"===e.onFalse.jsenType?e.onFalse.stmts.forEach(e=>{Ar.flatten(e,t,(r?r+" && ":"")+"!"+n)}):Ar.flatten(e.onFalse,t,(r?r+" && ":"")+"!"+n))}else t(r?wt.parse(r+' && "[ENDIF]" && '+e.toString()):e)}static parse(e,t={}){return super.parse(e.trim().endsWith(";")?e:e+";",(e,r=null,n=null)=>wt.parse(e,r,n?Fr(t,n):t),Ar)}}var Nr=function(e,t=[],r=!0){var n=0;return yr(arguments[0])&&o(arguments[1])&&(n=arguments[0],e=arguments[1],t=arguments[2]||[]),Cr([n,{},e],(e,r,n)=>br(t)?t(e):!s(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)};var Dr=function(e,t,r=null){return s(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]};const _r={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{div:["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(e){var t=e.nodeName.toLowerCase();return _r.std[t]?_r.expandRules(e,_r.std[t].model||[]):[]},getCategoriesFor(e,t=!0){var r=e.nodeName.toLowerCase(),n=_r.std[r]||_r.aria[r]||{},s=[];if(t&&!e.nodeName.startsWith("#")&&(e.hasAttribute("role")||n.implicitRole))if(e.hasAttribute("role")){e.getAttribute("role").split(" ");e.getAttribute("role").split(" ").forEach(t=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(t)||(t=t.trim(),s.push("@"+t),_r.aria[t]&&_r.aria[t].type&&(s=s.concat(_r.expandRules(e,_r.aria[t].type||[]))))})}else n.implicitRole&&Tr(s,"@"+n.implicitRole,r);else s=Tr(_r.expandRules(e,n.type||[]),r);return s},assertNodeBelongsInContentModel(e,t){var r,n=e instanceof HTMLElement?_r.getContentModelFor(e):e,s=t instanceof HTMLElement?_r.getCategoriesFor(t):t;return!Dr(n,["#nothing","#text"]).length&&(n.forEach(e=>{if(e.startsWith("!")){var t=e.substr(1);s.includes(t)&&(r=!1)}else!1!==r&&s.includes(e)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(e,t,r=null){for(var n,s=_r.getCategoriesFor(e),i=t;!n&&(i=i.parentNode);)Dr(s,_r.getCategoriesFor(i)).length&&_r.assertNodeBelongsInContentModel(i,r&&r.type||t)&&(n=i);return n===e},expandRules(e,t){var r=t.reduce((t,r)=>(l(r)?e.matches(Object.keys(r)[0])&&(t=t.concat(Object.values(r)[0])):t.push(r),t),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var Rr,$r=_r;class Mr{constructor(e,t={}){Object.defineProperty(this,"params",{value:Fr(n,t)}),Object.defineProperty(this,"descendantParams",{value:Nr(this.params)}),Object.defineProperty(this,"_el",{value:e,enumerable:!0}),Object.defineProperty(this,"el",{value:"#document"===e.nodeName?e.querySelector("html"):e,enumerable:!0});const r=(e.getAttribute(n.attrMap.superrole)||"").split(" ").map(e=>e.trim()).filter(e=>e);Object.defineProperty(this,"roles",{value:r,enumerable:!0});const s={};vr.defineProperty(this,n.treeProperty,{value:s,enumerable:!0}),vr.trap(s,(e,t,r)=>r(t||this.getNodes(e.query)),{type:"get"});const i=(e.getAttribute(n.attrMap.hint)||"").split(" ").map(e=>e.trim()).filter(e=>e);vr.init(this[n.treeProperty],i)}getNodes(e){return p(e).forEach(e=>{if(e in this[n.treeProperty]&&this[n.treeProperty][e]instanceof Mr)return this[n.treeProperty][e];var t;((t=this.getExplicitNode(e))||(t=this.getImplicitNode(e)))&&this.addNode(e,t)}),s(e)?_objFrom(e,this[n.treeProperty]):this[n.treeProperty][e]}getExplicitNode(e){if(this.roles&&this.roles.length){var t=n.rolecase?[n.rolecase]:this.roles,r=n.context.CSS?n.context.CSS.escape:e=>e;return t.reduce((t,s)=>{if(!t){var i,a,o="["+r(n.attrMap.superrole)+'~="'+s+'"]',l="["+r(n.attrMap.subrole)+'~="'+s+"-"+e+'"]';(a=(this.el.shadowRoot||this.el).querySelector(l))&&(this.el.shadowRoot&&(!a.parentNode.closest||!a.parentNode.closest(o))||!this.el.shadowRoot&&a.parentNode&&(i=a.parentNode.closest(o))&&i.isSameNode(this.el))&&(t=a)}return t},null)}}getImplicitNode(e){if(!yr(e)&&!e.match(/[^a-zA-Z0-9\-]/)){var t,r,n,i=[];$r.aria[e]?i.push({schema:$r.aria[e],selector:['[role="'+e+'"]']}):i.push({schema:$r.std[e]||$r.aria[e],selector:[e,'[role="'+e+'"]']}),t=$r.std,r=(t,r)=>{r.implicitRole===e&&i.push({schema:r,selector:[t]})},n=void 0,o(t)&&Object.keys(t).forEach((e,s)=>{!1!==n&&(n=r(yr(e)?parseFloat(e):e,t[e],s))});var a=null;return i.forEach(e=>{(this.el.shadowRoot||this.el).querySelectorAll(e.selector.join(",")).forEach(t=>{$r.assertNodeBelongsInScopeAs(this.el,t,e.schema)&&(e.schema&&e.schema.singleton?a=t:a&&!s(a)||(a=a||[]).push(t))}),a||!e.schema||e.schema.singleton||(a=[])}),a}}addNode(e,t){var r,i=this.params.factory||((e,t)=>new Mr(e,t));return s(t)?r=t.map(e=>i(e,this.descendantParams)):(r=i(t,this.descendantParams),function e(t,r){if(t.parentNode&&n.context.MutationObserver){var s=!1;new n.context.MutationObserver(e=>{e.forEach(e=>{!s&&p(e.removedNodes).includes(t)&&(s=!0,r())})}).observe(t.parentNode,{childList:!0}),e(t.parentNode,()=>{s||(s=!0,r())})}}(t,()=>{vr.del(this[n.treeProperty],e)})),vr.set(this[n.treeProperty],e,r),r}}class Wr extends Mr{constructor(e,t={}){super(e,t),this.params.factory=this.constructor.from,this.el.addEventListener("imported",e=>{this.params.factory(e.target),e.stopImmediatePropagation()});const r=function(e){var t={roadmap:e};return t.roadmap&&(t.namespace=xr(t.roadmap,"//"),t.subnamespace=Sr(t.roadmap,"//"),t.subnamespace.startsWith("/")&&(t.subnamespace=Sr(t.subnamespace,"/")),t.subnamespace.endsWith("//")&&-1===t.subnamespace.indexOf("///")&&(t.subnamespace=t.subnamespace+t.namespace+"//")),t}(e.getAttribute(n.attrMap.namespace)||"");Object.defineProperty(this,"namespace",{value:r.namespace,enumerable:!0}),vr.init(this,n.bindingProperty),vr.observe(this,n.bindingProperty,(e,t,s)=>{if(r.subnamespace)return o(e)&&e&&vr.observe(e,t=>this.populate(e,r.subnamespace,n.remodelCallback),{tags:["#mirror",this]}),o(t)&&t&&vr.unobserve(t,null,null,{tags:["#mirror",this]}),this.populate(e||{},r.subnamespace,n.remodelCallback)});vr.defineProperty(this,"directives",{value:[],enumerable:!0});var s={},i=this.params.env,a=new H(this,i,s);this.descendantParams.env=new H(s,i);vr.observe(this.directives,(e,t,r)=>{Object.keys(e).forEach(r=>{var n;t[r]&&vr.unobserve(this,null,null,{tags:["#directive",t[r]]}),e[r]&&(!1!==this.autoEval&&e[r].eval(a,vr),vr.observe(this,(n=e[r].meta.vars,wr(n.map(e=>xr(xr(e.toString(),"["),"(")))),(t,n,s)=>{var i=e[r].eval(a,vr);if(!1!==i)return i},{data:!1,tags:["#directive",e[r]]}))})}),setTimeout(()=>{if(this.dataBlockScript=p(e.children).filter(e=>e.matches(n.tagMap.jsen))[0]){var t=vr.get(this.directives,"push");Ar.parse((this.dataBlockScript.textContent||"").trim()).filter().forEach(e=>{this.autoEval=n.initialRendering,t(e),this.autoEval=!0})}this.dataBlockScript&&n.hideDataBlockScript&&this.dataBlockScript.remove()},0)}get(e){return super.getNodes(e)}bind(e){if(!n.bindingProperty)throw new Error("Data key has not been set!");return vr.set(this,n.bindingProperty,e)}unbind(){if(!n.bindingProperty)throw new Error("Data key has not been set!");return vr.set(this,n.bindingProperty,null)}populate(e,t,r=null){var s=t.split("//");s[0].indexOf("[")>-1&&(s[0]='"'+s[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var i=vr.keys(e),o=vr.keys(this[n.treeProperty]),l=new vr.MutationEvent(this.el,{type:"remodelling"});return wr(i.concat(o)).forEach(t=>{t=yr(t)?parseInt(t):t;var n,o=this.getNodes(t);if(vr.has(e,t)){var p=vr.get(e,t),c=!1;if(!o){var h=s.slice();h[0].indexOf('"')>-1&&(h[0]=wt.parse(h[0]).eval(p)),h[0]+="/"+t;var u=Wr.import(h.join("//"));if(u){var d=function(e,t,r=!1,n=!1,s=!1){if(-1===e.indexOf(t))return r?[]:void 0;var i=!0===r?e.length-1:!1===r?1:r,o=s?e.lastIndexOf(t)+1:e.indexOf(t)+1,l=a(t)?[]:e.slice(o,o+i);return n&&l.length<i&&l.length<e.length&&(br(n)&&!n(i-l.length)||(l=l.concat(e.slice(0,i-l.length)))),r?l:l[0]}(i,t+"",!0).reduce((e,t)=>e||this.getNodes(t),null);d?d.el.before(u):this.el.append(u),o=this.addNode(t,u),c=!0}}o&&(n=br(r)?r(o,p,t,c):o.bind(p))}else if(o){var f=()=>{o.destroy(),o.el.remove()};(n=br(r)?r(o,t):o.unbind())instanceof Promise?n.then(f).catch(f):f()}l.response(n)}),l}destroy(){this.directives.forEach(e=>vr.unobserve(this,null,null,{tags:["#directive",e]})),this.dataBlockScript&&n.hideDataBlockScript&&this.prepend(this.dataBlockScript)}static init(e,t=null){n.context=e,function(){const e=n.context;e.customElements.define(n.attrMap.bundle,class extends e.HTMLTemplateElement{attributeChangedCallback(e,t,r){r&&this.load()}load(){var t=this.getAttribute("src");t&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):t&&(e.fetch?e.fetch(t).then(e=>e.ok?e.text():Promise.reject(e.statusText)).then(t=>{this.innerHTML=t,this.dispatchEvent(new e.Event("bundleloadsuccess",{bubbles:!0}))}).catch(r=>{console.warn("Error fetching the bundle at "+t+". ("+r+")"),this.dispatchEvent(new e.Event("bundleloaderror",{bubbles:!0}))}):setTimeout(()=>{this.dispatchEvent(new e.Event("bundleloadsuccess",{bubbles:!0}))},0))}static get observedAttributes(){return["src"]}},{extends:"template"})}(),Wr.contentLoadedPromise=new Promise(t=>{"complete"!==e.document.readyState?(e.document.addEventListener("DOMContentLoaded",t,!1),e.addEventListener("load",t,!1)):t()}),Wr.contentLoadedPromise.then(()=>{var e;if(t&&(e=t())){if(!s(e))throw new Error("The bundlesCallback() function must return an array!");n.bundles=function(e,t=null){var[r,s]=function(e,t){for(var r=[],n=[],s=e.length,i=0;i<s;i++)t(e[i])?r.push(e[i]):n.push(e[i]);return[r,n]}(e,e=>e instanceof Promise);const i=Promise.all(r).then(e=>{s.push(...e),r=[]});var a;t&&t(i);const o=[],l=new kr(s,[],(e,t,s,i)=>{var c=t.join("/");if(o.includes(c))return l.find(t.slice(0,-1).join("/"));o.push(c),r.length&&!a&&(a=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within Chtml.ready(callback[, true/*waitForBundles*/])."));var h=n.context.CSS?n.context.CSS.escape:e=>e,u=p(e.content.children).filter(e=>e.matches("["+h(n.attrMap.namespace)+'="'+c+'"]'))[0];if(u&&s){try{e.hasAttribute("norecompose")&&(e.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()),u=Or(s,u)}catch(e){console.error("[Inheritance error at source #"+i+"]: "+e.message)}return o.pop(),u}return o.pop(),u?u.cloneNode(!0):s?s.cloneNode(!0):null});return l}(e,e=>{Wr.loadingBundlesPromise=e,setTimeout(()=>{!function(e){const t=n.context;t.customElements.define(n.tagMap.import,class extends t.HTMLElement{shouldResolve(){return!this.hasAttribute("ondemand")&&!this.closest("template")&&!this.closest(n.tagMap.import+"[ondemand]")}connectedCallback(){this.processed=!1,this.shouldResolve()&&this.resolve()}attributeChangedCallback(e,t,r){this.shouldResolve()&&this.resolve()}resolve(){if(!this.parentNode)return!1;e.then(()=>{var e,r,s=n.attrMap.namespace;if((r=xr(this.getAttribute(s)||"","//"))&&r!==this.__namespace)if(this.__namespace=r,n.bundles&&(e=n.bundles.find(r))){var i=Or(e,this);this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(i),this.remove()):this.replaceWith(i),i.setAttribute("autoimported","true"),i.dispatchEvent(new t.Event("imported",{bubbles:!0}))}else this.innnerText='No element found on the namespace "'+r+'"!'})}static get observedAttributes(){return["ondemand",n.attrMap.namespace]}})}(e)},0)})}})}static ready(e,t=!0){Wr.contentLoadedPromise.then(()=>{t?Wr.loadingBundlesPromise.then(e):e()})}static from(e,t={},r=Wr){var s=e;if(i(e)&&!e.trim().startsWith("<")&&-1!==e.indexOf("/")){if(!(s=Wr.import(xr(e,"//"))))throw new Error('No element found on the namespace "'+e+'"!')}else{if(i(e)&&!(s=function(e,t=null){if(t=t||n.context.document){var r;if(e.trim().startsWith("<")){var s=t.createElement("div");s.innerHtml=e,r=s.firstChild}else r=t.querySelector(e);return r}}(e)))throw new Error('Could not resolve the string "'+e+'" to an element!');var a,o,l,p=s.matches(n.tagMap.import);if((a=xr(s.getAttribute(n.attrMap.namespace)||"","//"))&&(p&&(o=a)||(o=jr(a,"/"))&&o.indexOf("/")>-1)&&(l=Wr.import(o))){var c=s;s=Or(l,s),p&&c.replaceWith(s)}else a&&console.warn("Namespace resolution failed: "+a)}return new r(s,t)}static import(e){if(n.bundles)return n.bundles.find(e)}}Rr=window,Wr.init(Rr,()=>p(Rr.document.querySelectorAll(n.tagMap.bundle)).reverse().map(e=>e.hasAttribute("src")&&!e.content.children.length?new Promise(t=>{e.addEventListener("bundleloadsuccess",()=>t(e)),e.addEventListener("bundleloaderror",()=>t(e))}):e));var qr=Wr;n.env="browser",window.WebNative||(window.WebNative={}),window.WebNative.Chtml=qr,window.WebNative.Chtml.params=n,window.WebNative.Chtml.Reflex=vr,window.WebNative.Chtml.Jsen=wt}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc0FycmF5LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc0VtcHR5LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzTnVsbC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc1R5cGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0UHJvdG90eXBlQ2hhaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaW5zdGFuY2VvZi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29tcGFyZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHBySW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1JlZmVyZW5jZUludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9DYWxsSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Z1bmNJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0pzZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZpcnN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5UGxhaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0xleGVyLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9Db250ZXh0cy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmVMYXN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fic3RyYWN0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fic3RyYWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0FyckludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9BcnIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXJndW1lbnRzSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fzc2VydGlvbkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bc3NlcnRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXNzaWdubWVudEludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bc3NpZ25tZW50LmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Jvb2xJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQm9vbC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9DYWxsLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NvbXBhcmlzb25JbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ29tcGFyaXNvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Db25kaXRpb25JbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ29uZGl0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0RlbGV0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0RlbGV0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1N0YXRlbWVudHNJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUmV0dXJuSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1N0YXRlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvRnVuYy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9JZkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9JZi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL01hdGhJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvTWF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9OdW1JbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvTnVtLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL09iakludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9PYmouanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUHJlc2VuY2VJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUHJlc2VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1JldHVybi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9TdHJJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvU3RyLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9mcm9tLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvUXVlcnlFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtYmVyLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvbXBhcmVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9GaXJlYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9GaXJlYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvVHJhcC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9UcmFwQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldEFsbFByb3BlcnR5TmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0UHJvdG90eXBlQ2hhaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2VDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL3Vub2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy91bmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9nZXRUeXBlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9hZnRlci5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9jcm9zc0pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvb2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9saW5rLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL3RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvYWxsLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9fc2V0UHJvcC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9zZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9fZ2V0UHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy90cmFwLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2RlZi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL0xpc3RlbmVyLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2J1aWxkLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL3VudHJhcC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9vd25LZXlzLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL29uLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL29mZi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy90cmlnZ2VyLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci91bmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYmVmb3JlTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9zaW5nL3JlY29tcG9zZURpcmVjdGl2ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvc2luZy9yZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvc2luZy9yZWNvbXBvc2VOb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9zaW5nL01hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9zaW5nL2NyZWF0ZUJ1bmRsZU1hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2dldEFsbFByb3BlcnR5TmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9tZXJnZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRGlyZWN0aXZlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovY29weS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3NjaGVtYS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvQ29yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9kaXNjb25uZWN0ZWRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvc2luZy9wYXJzZU5hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvZm9sbG93aW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb3NpbmcvZGVmaW5lQnVuZGxlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2RpdmlkZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9zaW5nL2RlZmluZUltcG9ydEVsZW1lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL2NyZWF0ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jyb3dzZXItZW50cnkuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlbnYiLCJjb250ZXh0IiwiYXR0ck1hcCIsImhpbnQiLCJuYW1lc3BhY2UiLCJzdXBlcnJvbGUiLCJzdWJyb2xlIiwiYnVuZGxlIiwibm9jb21wb3NlIiwidGFnTWFwIiwianNlbiIsImltcG9ydCIsInRyZWVQcm9wZXJ0eSIsImJpbmRpbmdQcm9wZXJ0eSIsImtleVZhbEF0dHJpYnV0ZXMiLCJsaXN0QXR0cmlidXRlcyIsInJlbW9kZWxDYWxsYmFjayIsInJlY29tcG9zZUNhbGxiYWNrIiwiaGlkZURhdGFCbG9ja1NjcmlwdCIsIkFycmF5IiwiaXNBcnJheSIsInZhbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNhc3RPYmplY3QiLCJrZXlzIiwic2xpY2UiLCJ2YWx1ZXMiLCJ0b1N0cmluZyIsImlzTmFOIiwia2V5c0FsbCIsInVudGlsIiwicHJvdG90eXBhbENoYWluIiwib2JqIiwiaW5kZXhPZiIsInB1c2giLCJnZXRQcm90b3R5cGVPZiIsImZvckVhY2giLCJpdGVtcyIsIml0bSIsImFyciIsImdldE93blByb3BlcnR5TmFtZXMiLCJtZXJnZUNhbGxiYWNrIiwib2JqcyIsImNhbGxiYWNrIiwiZGVlcFByb3BzIiwiaXNSZXBsYWNlIiwid2l0aFN5bWJvbHMiLCJkZXB0aCIsIm9iajEiLCJzaGlmdCIsIkVycm9yIiwib2JqMiIsInZhbEF0T2JqMSIsInZhbEF0T2JqMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImUiLCJrIiwibGltaXQiLCJzcGxpY2UiLCJjbGFzc0IiLCJtaXhpblRlc3QiLCJjbGFzc0EiLCJGdW5jdGlvbiIsInByb3RvdHlwZXMiLCJyZWR1Y2UiLCJwcmV2QW5zIiwiY29uc3RydWN0b3IiLCJyZXR1cm5WYWx1ZSIsInBhcnNlRmxvYXQiLCJfZXZlbiIsImFzc2VydGlvbiIsIm9iajFLZXlzIiwib2JqMktleXMiLCJyZXN1bHQiLCJjb250biIsInYxIiwidGVzdFBhc3MiLCJ2MiIsIm5ldENvbXBhcmlzb24iLCJjb250cmFzdCIsInJldHVybk9uRmlyc3RGYWxzZSIsIkV4cHIiLCJqc2VuVHlwZSIsInRoaXMiLCJTdXBlciIsImNvbW1lbnRzIiwibWV0YSIsInZhcnMiLCJJbnRlcmZhY2UiLCJFeHBySW50ZXJmYWNlIiwiSnNlbiIsImV4cHIiLCJQYXJzZXJzIiwicGFyYW1zIiwiU3RhdGljIiwiX3ZhcnMiLCJwYXJzZXJzIiwiZ3JhbW1hcnMiLCJ2YXJzU2NvcGUiLCJwYXJzZWQiLCJwYXJzZSIsIl9leHByIiwiX1BhcnNlcnMiLCJfcGFyYW1zIiwiRnVuY0ludGVyZmFjZSIsInNlY29uZExldmVsVmFycyIsImNvbmNhdCIsIlJlZmVyZW5jZUludGVyZmFjZSIsIkNhbGxJbnRlcmZhY2UiLCJleHBsYWluIiwiYXNzZXJ0IiwiX2ZsYXR0ZW4iLCJ3aXRoT2JqZWN0cyIsImFjYyIsImNvdW50IiwiZmlyc3RzIiwiYW1vdW50IiwicmV2ZXJzZSIsImZpbHRlciIsIkxleGVyIiwic3RyIiwiZGVsaW1zIiwib3B0aW9ucyIsImNvcHlSZXN1bHQiLCJuZXN0aW5nIiwibWF4RGVwdGgiLCJ0b2tlbnMiLCJtYXRjaGVzIiwibWF0Y2hlc2kiLCIkY2FjaGUiLCJjYWNoZSIsImNhY2hlZCIsImxleCIsIiRzdHIiLCIkb3B0aW9ucyIsImJsb2NrcyIsIiRibG9ja3MiLCJxdW90ZXMiLCIkcXVvdGVzIiwiJGNvbW1lbnRzIiwicnVudGltZSIsIl9ldmFsQ2hhcnNBdCIsImpvaW4iLCJjaGFyV2lkdGgiLCJjb21tZW50VGVzdCIsInF1b3RlVGVzdCIsIm5lc3RpbmdUZXN0Iiwib3BlbkNvbW1lbnQiLCJfdGVzdFF1b3RlcyIsIm9wZW5RdW90ZSIsIl90ZXN0Q29tbWVudHMiLCJlbmRpbmciLCJfcHVzaCIsImNoYXJzIiwic3RhcnRpbmciLCJfdGVzdE5lc3RpbmciLCJzdG9wQ2hhciIsIl90ZXN0Q2hhcnMiLCJzdG9wQ2hhcnMiLCJzdG9wQ2hhckZvcndhcmQiLCJzdWJzdHIiLCJtYXRjaGVkRGVsaW0iLCJwcmVzZXJ2ZURlbGltcyIsInF1b3RlIiwiYmxvY2siLCJzdGFydHNXaXRoIiwiTWF0aCIsIm1heCIsInRlc3RMaXN0IiwidGVzdCIsInJldCIsInVzZVJlZ2V4IiwibWF0Y2giLCJSZWdFeHAiLCJjaSIsInRvTG93ZXJDYXNlIiwidGFyZ2V0IiwiaXNOZXdTZXJpZXMiLCJzcGxpdFNlcmllcyIsIlN0cmluZyIsInNwbGl0U2VyaWVzMiIsInJlZ1BhcnNlIiwibWFpbkNvbnRleHQiLCJzdXBlckNvbnRleHQiLCJsb2NhbENvbnRleHQiLCJsb2NhbENvbnRleHRNZXRhIiwicHJvcCIsImZpbmFsIiwibGV2ZWwiLCJjYWxsTWFpbiIsImhhbmRsZSIsInRyYXAiLCJiaW5kVGhpcyIsImNvbnR4dE9iaiIsImNvbnR4dE1ldGEiLCJhZHZhbmNlIiwiX2dldCIsIl9oYXMiLCJpbml0S2V5d29yZCIsIl9zZXQiLCJjbnR4dCIsInNldCIsImxvY2FsQ29udHh0TWV0YSIsImluY2x1ZGVzIiwiZGVsZXRlUHJvcGVydHkiLCJkZWwiLCJwcm9wMiIsImNvbnRleHRPYmoyIiwiYXJncyIsImZuIiwiZXhlYyIsImFwcGx5IiwiZXhlY1Vua25vd24iLCJoYXMiLCJzdWJqZWN0Iiwib3BlbmluZ1RhZyIsImVuZHNXaXRoIiwiY2xvc2luZ1RhZyIsInNlYXJjaCIsInBvcyIsImFmdGVyTGFzdCIsImxhc3RJbmRleE9mIiwiYmVmb3JlTGFzdCIsIkFic3RyYWN0aW9uIiwiQWJzdHJhY3Rpb25JbnRlcmZhY2UiLCJzdXBlciIsImV2YWwiLCJwYXJzZUNhbGxiYWNrIiwiQXJyIiwiQXJySW50ZXJmYWNlIiwiZXhwcnMiLCJuZXdFeHBycyIsImV4cHJBIiwidW5pcXVlU29GYXIiLCJleHByQiIsImV2ZW4iLCJtYXAiLCJ0cmltIiwic3BsaXQiLCJBcmd1bWVudHMiLCJBcmd1bWVudHNJbnRlcmZhY2UiLCJsaXN0IiwiYXJnIiwiaW5kZXgiLCJzZWxmIiwiQXNzZXJ0aW9uIiwiQXNzZXJ0aW9uSW50ZXJmYWNlIiwibG9naWMiLCJvcGVyYXRvcnMiLCJ0b1VwcGVyQ2FzZSIsImlzT3IiLCJvciIsImlzTm9yIiwibm9yIiwiaXNBbmQiLCJhbmQiLCJpc05hbmQiLCJuYW5kIiwibGFzdFJlc3VsdCIsInRydWVzIiwiQXNzaWdubWVudCIsIkFzc2lnbm1lbnRJbnRlcmZhY2UiLCJyZWZlcmVuY2UiLCJvcGVyYXRvciIsImdldEV2YWwiLCJCb29sIiwiQm9vbEludGVyZmFjZSIsInN0YXRlIiwiQ2FsbCIsInBvcCIsIkNvbXBhcmlzb24iLCJDb21wYXJpc29uSW50ZXJmYWNlIiwib3BlcmFuZDEiLCJvcGVyYW5kMiIsImNvbXBhcmUiLCJvcGVyIiwic3RyaWN0IiwiZXhhY3QiLCJpcyIsImlzTnVsbCIsImVxdWFsc1RvIiwic3RyaWN0bHlOb3RFcXVhbHNUbyIsIm5vdEVxdWFsc1RvIiwicmVsYXRpdmUiLCJsZXNzZXJUaGFuIiwiZ3JlYXRlclRoYW4iLCJsZXNzZXJUaGFuT3JFcXVhbHNUbyIsImdyZWF0ZXJUaGFuT3JFcXVhbHNUbyIsImJldHdlZW4iLCJwYXJ0aWFsIiwiY29udGFpbnMiLCJhbnkiLCJpbiIsIkNvbmRpdGlvbiIsIkNvbmRpdGlvbkludGVyZmFjZSIsIm9uVHJ1ZSIsIm9uRmFsc2UiLCJzcGxpdHMiLCJEZWxldGlvbiIsIkRlbGV0aW9uSW50ZXJmYWNlIiwicmVkIiwiU3RhdGVtZW50cyIsIlN0YXRlbWVudHNJbnRlcmZhY2UiLCJzdG10cyIsImRlbGltIiwiUmV0dXJuSW50ZXJmYWNlIiwic3RtdCIsImEiLCJiIiwiRnVuYyIsInBhcmFtdGVycyIsInN0YXRlbWVudHMiLCJhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyIsInBhcmVudFBhcmFtcyIsIm93blBhcmFtcyIsIm5hbWVJblBhcmVudCIsIm5hbWVJblNlbGYiLCJkZWZhdWx0VmFsSW5QYXJlbnQiLCJkZWZhdWx0VmFsSW5TZWxmIiwic3VwIiwibmV3TWFpbkNvbnRleHQiLCJkZWZhdWx0VmFsIiwibmVzdGVkQ29udGV4dCIsImhlYWROb1dyYXAiLCJoZWFkIiwiYm9keU5vV3JhcCIsImJvZHkiLCJmdW5jSGVhZCIsImZ1bmNCb2R5IiwicGFyYW0iLCJwYXJhbVNwbGl0IiwiSWYiLCJJZkludGVyZmFjZSIsIm9uVHJ1ZUlzQmxvY2siLCJvbkZhbHNlSXNCbG9jayIsInJlc3QiLCJhcnIyIiwidmFsMSIsInZhbDIiLCJNYXRoSW50ZXJmYWNlIiwiY3VycmVudFRvdGFsIiwic3ViIiwiTnVtIiwiTnVtSW50ZXJmYWNlIiwiaW50IiwiZGVjIiwicGFyc2VJbnQiLCJPYmoiLCJPYmpJbnRlcmZhY2UiLCJlbnRyaWVzIiwiX2VudHJpZXNTcGxpdCIsImVudHJ5IiwiUHJlc2VuY2UiLCJQcmVzZW5jZUludGVyZmFjZSIsIlJlZmVyZW5jZSIsImJhY2t0aWNrcyIsInNvdXJjZUNvbnRleHQiLCJwYXJ0cyIsInN1YmplY3RDb250ZXh0Iiwic2VwYXJhdG9yIiwibmFtZVNwbGl0IiwiaXNDb250ZXh0IiwiUmV0dXJuIiwiZXhwckxjIiwiU3RyIiwiU3RySW50ZXJmYWNlIiwiZGV0YWlscyIsIiQiLCJwcm9wYWdhdGlvblN0b3BwZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicHJvbWlzZXNJbnN0YW5jZSIsInByb21pc2VzIiwicHJvbWlzZSIsIlByb21pc2UiLCJhbGwiLCJyc3BucyIsInByb21zIiwiaXNFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiRXZlbnQiLCJkaXNjb25uZWN0ZWQiLCJmaXJlYWJsZXMiLCJjdXJyZW50bHlGaXJpbmdFdmVudHMiLCJmaXJlYWJsZSIsInRhZ3MiLCJfZmlyZWFibGUiLCJxdWVyeSIsIm9ic2VydmVyIiwiaGFuZGxlciIsInR5cGUiLCJCYXNlIiwiZmlyZWJhc2VzIiwiZmlyZWJhc2VLZXkiLCJGaXJlYWJsZSIsImV2dCIsIm5leHQiLCJyZWNpZXZlZCIsIkZpcmViYXNlIiwiZGVmYXVsdEhhbmRsZXIiLCJfYXJncyIsImZpcmUiLCJjcmVhdGVGb3JUYXJnZXQiLCJnZXRGb3JUYXJnZXQiLCJkYXRhIiwiZmllbGRzIiwic3JjRXZ0IiwiZGF0YUV2ZW4iLCJvcmlnaW5hdGluZ1RhcmdldCIsIm9yaWdpbmF0aW5nVHlwZSIsIm9yaWdpbmF0aW5nRmllbGRzIiwib3JpZ2luYXRpbmdEYXRhIiwiX29yaWdpbmF0aW5nRGF0YSIsImZpZWxkIiwicGF0aCIsIl9wYXRoIiwib3JpZ2luYXRpbmdDcmVhdGVkIiwib3JpZ2luYXRpbmdEZWxldGVkIiwiX2RhdGEiLCJjcmVhdGVkIiwiZGVsZXRlZCIsImZpbmRGaXJlYWJsZXMiLCJmaXJlYmFzZSIsIm9yaWdpbmFsQ2FsbGJhY2siLCJyZW1vdmVGaXJlYWJsZSIsInVub2JzZXJ2ZSIsInJlY2lldmVyIiwiX2N0eHQiLCJjdHh0IiwiX2tleSIsImV4aXN0cyIsImZpZWxkc0FycmF5IiwiaXNEeW5hbWljRmllbGQiLCJkaWZmIiwiZmlyZUNhbGxiYWNrIiwiZmllbGREYXRhIiwib3JpZ2luYXRpbmdGaWVsZCIsIl92YWx1ZSIsImZpZWxkUXVlcnkiLCJjdXJyZW50VmFsdWUiLCJyZXNwb25zZSIsInByZXZWYWx1ZSIsImR5bmFtaWNGaWVsZE91dGNvbWVzIiwib2JzZXJ2ZWRGaWVsZCIsInJlcGxhY2UiLCJpbnB1dE9yaWdpbmF0aW5nRmllbGQiLCJpbnB1dE9yaWdpbmF0aW5nRmllbGRTcGxpdCIsIm9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSIsInNlZyIsIm9ic2VydmVVcCIsIm9ic2VydmVEb3duIiwiY3VyclRhYmxlIiwiY29sdW1uIiwibmV3VGFibGUiLCJyb3ciLCJfcm93IiwiYWRkRmlyZWFibGUiLCJPYnNlcnZlciIsIm9ic2VydmUiLCJfZW50cmllcyIsImJhc2UiLCJNdXRhdGlvbkV2ZW50IiwiYnViYmxpbmciLCJ0YXJnZXRzIiwidGFyZ2V0Q29weSIsInNldERhdGEiLCJfc2V0RGF0YSIsImRlbERhdGEiLCJfZGVsRGF0YSIsIm11dGF0aW9uQmFzZSIsImluaXRpYWxLZXlzIiwiY3VycmVudEtleXMiLCJjaGFuZ2VkS2V5cyIsInVubGluayIsInJldHVybkV2ZW50IiwidHJhcEJhc2UiLCJkZWZhdWx0R2V0IiwiUXVlcnlFdmVudCIsInRyYW5zYWN0aW9uIiwicHJldlRlc3QiLCJkZWZhdWx0SGFzIiwiX3N0YXRlIiwia2V5c09yUGF5bG9hZCIsImhhbmRsZVNldCIsInJlbGF0ZWQiLCJkZXNjcmlwdG9yIiwiZGVmaW5lIiwic3VjY2VzcyIsImRlZmF1bHRTZXQiLCJfc3VjY2VzcyIsInN1Y2Nlc3NTdGF0ZXMiLCJwYXlsb2FkS2V5cyIsIl9zZXRQcm9wIiwib25HZXRGaXJlIiwib25TZXRGaXJlIiwiY3VycmVudERlc2NyaXB0b3IiLCJ3cml0YWJsZSIsIm5ld1ZhbHVlIiwiZGVmYXVsdEtleXMiLCJfa2V5cyIsIm93bktleXMiLCJfZ2V0UHJvcHMiLCJkZWZhdWx0RGVsIiwibGlzdGVuZXIiLCJidWlsZCIsIl9pbml0IiwiaW5pdCIsIlRyYXAiLCJ1bnRyYXAiLCJkZWYiLCJsaW5rIiwib24iLCJMaXN0ZW5lciIsIm9mZiIsInRyaWdnZXIiLCJub3JlY29tcG9zZSIsImVsVG8iLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJkaXNwb3NpdGlvbiIsImVsRnJvbSIsImFwcGVuZE9yUHJlcGVuZCIsImJfYXR0ciIsImFfYXR0ciIsImpvaW50TGlzdCIsInNldEF0dHJpYnV0ZSIsImpvaW50RGVmcyIsImF0dHJpYnV0ZXMiLCJhdHRyIiwiZWxUb0RlZnMiLCJzaGFkb3dSb290IiwiY2hpbGRyZW4iLCJub2RlIiwiZWxGcm9tRGVmcyIsInRleHRDb250ZW50IiwicHJlcGVuZCIsImNsb25lTm9kZSIsImVsRnJvbU5zIiwiZWxUb1JvbGVzIiwicmVjb21wb3NlRGlyZWN0aXZlcyIsInJlcGxhY2VtZW50Tm9kZSIsImFwcGxpY2FibGVDb250ZXh0Um9sZXMiLCJhcHBsaWNhYmxlUmVwbGFjZW1lbnROb2RlUm9sZXMiLCJyZXBsYWNlbWVudE5vZGVSb2xlIiwiX2FwcGxpY2FibGVDb250ZXh0Um9sZXMiLCJjb250ZXh0Um9sZSIsIkNTU0VzY2FwZSIsIkNTUyIsImVzY2FwZSIsInNsb3ROb2RlcyIsImNvbnRleHRTZWxlY3RvciIsInNsb3ROb2RlU2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xvc2VzdCIsInJlcGxhY2VXaXRoIiwiYXBwZW5kIiwicmVjb21wb3NlTm9kZXMiLCJzb3VyY2VzIiwiY2FycnkiLCJjb2xsZWN0aW9ucyIsInNvdXJjZSIsInN1Yk1hdHJpeCIsIm5zS2V5IiwibnNBcnJheSIsIm5zRHJpbGwiLCJlbnRlciIsImVsIiwiZGlyZWN0aXZlcyIsImRpcmVjdGl2ZSIsImZsYXR0ZW4iLCJfZGlyZWN0aXZlIiwiY3VycmVudCIsImV4aXN0aW5nIiwiaXNEdXBsaWNhdGUiLCJvdmVycmlkZGVuIiwiaW1wb3J0YW50IiwiZmFsbGJhY2siLCJfYXNzZXJ0aW9uIiwiU2NoZW1hIiwic3RkIiwiaHRtbCIsIm1vZGVsIiwic2luZ2xldG9uIiwiY2FwdGlvbiIsImNvbCIsImNvbGdyb3VwIiwiZGQiLCJpbXBsaWNpdFJvbGUiLCJkdCIsImZpZ2NhcHRpb24iLCJsZWdlbmQiLCJsaSIsIm9wdGdyb3VwIiwib3B0aW9uIiwicnAiLCJydCIsInN1bW1hcnkiLCJ0cmFjayIsInRib2R5IiwidGQiLCJ0Zm9vdCIsInRoZWFkIiwidHIiLCJhYmJyIiwiYWRkcmVzcyIsImFyZWEiLCJhcnRpY2xlIiwiYWNjZXB0YWJsZVJvbGVzIiwiYXNpZGUiLCJhdWRpbyIsImJkaSIsImJkbyIsImJsb2NrcXVvdGUiLCJiciIsImJ1dHRvbiIsImNhbnZhcyIsImNpdGUiLCJjb2RlIiwiZGF0YWxpc3QiLCJkZm4iLCJkaWFsb2ciLCJkaXYiLCJkbCIsImVtIiwiZW1iZWQiLCJmaWVsZHNldCIsImZpZ3VyZSIsImZvb3RlciIsImZvcm0iLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkZXIiLCJoZ3JvdXAiLCJociIsImlmcmFtZSIsImltZyIsImlucHV0IiwiaW5zIiwia2JkIiwibGFiZWwiLCJtYWluIiwibWFyayIsIm1hdGgiLCJtZW51IiwibmFtZXMiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvdXRwdXQiLCJwaWN0dXJlIiwicHJlIiwicHJvZ3Jlc3MiLCJxIiwicnVieSIsInNhbXAiLCJzY3JpcHQiLCJzZWN0aW9uIiwic2VsZWN0Iiwic2xvdCIsInNtYWxsIiwic3BhbiIsInN0cm9uZyIsInN0eWxlIiwic3ZnIiwidGFibGUiLCJ0ZW1wbGF0ZSIsInRleHRhcmVhIiwidGltZSIsInRpdGxlIiwidSIsInVsIiwidmFyIiwidmlkZW8iLCJ3YnIiLCJhcmlhIiwiYmFubmVyIiwiY29udGVudGluZm8iLCJjb21wbGVtZW50YXJ5IiwibmF2aWdhdGlvbiIsImxpc3RpdGVtIiwiZWxUYWdOYW1lIiwibm9kZU5hbWUiLCJleHBhbmRSdWxlcyIsInJvbGVJbmNsdXNpdmUiLCJlbFNjaGVtYSIsImN1cnJlbnRFbENhdGVnb3JpZXMiLCJyb2xlIiwidmFsaWQiLCJjb250ZXh0TW9kZWwiLCJIVE1MRWxlbWVudCIsImdldENvbnRlbnRNb2RlbEZvciIsIm5vZGVDYXRlZ29yaWVzIiwiZ2V0Q2F0ZWdvcmllc0ZvciIsImFsbG93ZWROb2RlIiwiZGlzYWxsb3dlZE5vZGUiLCJzY29wZSIsIm5vZGVTY2hlbWEiLCJjb250ZXh0Q2F0ZWdvcmllcyIsInBhcmVudE5vZGUiLCJhc3NlcnROb2RlQmVsb25nc0luQ29udGVudE1vZGVsIiwicnVsZXMiLCJybGVzIiwiY2F0ZWdvcmllcyIsInJ1bGUiLCJXaW5kb3ciLCJxdWVyeVNlbGVjdG9yIiwicm9sZXMiLCJ0cmVlIiwiZ2V0Tm9kZXMiLCJub2Rlc0hpbnQiLCJub2RlTmFtZXMiLCJnZXRFeHBsaWNpdE5vZGUiLCJnZXRJbXBsaWNpdE5vZGUiLCJhZGROb2RlIiwiX29iakZyb20iLCJyZXF1ZXN0Tm9kZU5hbWUiLCJyb2xlY2FzZSIsIm1hdGNoZWROb2RlIiwiY2xvc2VzdFN1cGVyIiwiX21hdGNoZWROb2RlIiwiY2xvc2VzdFN1cGVyU2VsZWN0b3IiLCJub2RlU2VsZWN0b3IiLCJpc1NhbWVOb2RlIiwidHJpZXMiLCJzY2hlbWEiLCJzZWxlY3RvciIsInRhZ25hbWUiLCJ0cmllIiwiYXNzZXJ0Tm9kZUJlbG9uZ3NJblNjb3BlQXMiLCJub2RlQ29tcG9uZW50IiwiZmFjdG9yeSIsIl9ub2RlIiwiZGVzY2VuZGFudFBhcmFtcyIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiTXV0YXRpb25PYnNlcnZlciIsImNhbGxlZCIsIm11dGF0aW9ucyIsInJlbW92ZWROb2RlcyIsImNoaWxkTGlzdCIsImZyb20iLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibmFtZXNwYWNlUGFyc2UiLCJyb2FkbWFwIiwibmFtZXNwYWNlU3RyIiwic3VibmFtZXNwYWNlIiwicGFyc2VOYW1lc3BhY2UiLCJjaGFuZ2VzIiwicG9wdWxhdGUiLCJldmFsdWF0aW9uQ29udGV4dCIsImV4aXRzIiwiYXV0b0V2YWwiLCJuZXdTdGF0ZSIsIm9sZFN0YXRlIiwiZXZhbFJldHVybiIsInNldFRpbWVvdXQiLCJkYXRhQmxvY2tTY3JpcHQiLCJkaXJlY3RpdmVzUHVzaCIsImluaXRpYWxSZW5kZXJpbmciLCJyZW1vdmUiLCJzcmNNb2RlbCIsIm5vZGVOYW1lc3BhY2VBcnJheSIsInNyY01vZGVsS2V5cyIsImN1cnJlbnROb2RlTmFtZXMiLCJleGlzdGluZ05vZGUiLCJzcmNJdGVtIiwiaXNOZXdOb2RlIiwibm9kZU5hbWVzcGFjZUFycmF5Q29weSIsIm5vZGVFbCIsImZvbGxvd2luZyIsImxhc3RSZWZlcmVuY2UiLCJhZnRlciIsImxvb3AiLCJfbm9kZU5hbWUiLCJiZWZvcmUiLCJkZXN0cm95IiwidW5iaW5kIiwidGhlbiIsImNhdGNoIiwiYmluZGluZyIsImNvbnRleHRXaW5kb3ciLCJidW5kbGVzQ2FsbGJhY2siLCJjdXN0b21FbGVtZW50cyIsIkhUTUxUZW1wbGF0ZUVsZW1lbnQiLCJvbGRWYWx1ZSIsImxvYWQiLCJzcmMiLCJjb250ZW50IiwiY29uc29sZSIsIndhcm4iLCJmZXRjaCIsIm9rIiwidGV4dCIsInJlamVjdCIsInN0YXR1c1RleHQiLCJpbm5lckhUTUwiLCJkaXNwYXRjaEV2ZW50IiwiYnViYmxlcyIsImVycm9yIiwiZXh0ZW5kcyIsImRlZmluZUJ1bmRsZUVsZW1lbnRzIiwiY29udGVudExvYWRlZFByb21pc2UiLCJyZXNvbHZlIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiYnVuZGxlRWxlbWVudHMiLCJidW5kbGVzIiwibG9hZGluZ0J1bmRsZXMiLCJyZWFkeUJ1bmRsZXMiLCJwYXNzZXMiLCJmYWlsdXJlcyIsImxvYWRpbmdCdW5kbGVzUHJvbWlzZSIsImZldGNoZWRCdW5kbGVzIiwid2FybmVkRWFybHlCdW5kbGVBY2Nlc3MiLCJwcm9taXNlUmVjaWV2ZXIiLCJhbnRpY3ljbGljQnVuZGxlc1F1ZXJ5IiwiYnVuZGxlTWF0cml4Iiwic3VwZXJFbCIsImJ1bmRsZUluZGV4IiwiX25hbWVzcGFjZSIsImZpbmQiLCJyZWNvbXBvc2UiLCJtZXNzYWdlIiwiY3JlYXRlQnVuZGxlTWF0cml4IiwicHJvY2Vzc2VkIiwic2hvdWxkUmVzb2x2ZSIsInJlcGxhY2VtZW50IiwibmFtZXNwYWNlQXR0ciIsIl9fbmFtZXNwYWNlIiwicmVzb2x2ZWQiLCJhdHRhY2hTaGFkb3ciLCJpbm5uZXJUZXh0IiwiZGVmaW5lSW1wb3J0RWxlbWVudHMiLCJ3YWl0Rm9yQnVuZGxlcyIsImNvbnRleHREb2N1bWVudCIsInRlbXAiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIdG1sIiwiZmlyc3RDaGlsZCIsInN1cGVyTnMiLCJpc0ltcG9ydCIsIl9lbCIsIndpbmRvdyIsIldlYk5hdGl2ZSIsIkNodG1sIiwiUmVmbGV4Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdB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QUFTQSxHQUFPbUcsU0FBU2hRLGlCQUFpQixFQUFPamlCLE9BQU9GLFNBQVNnSCxVQUNoRXVILElBQUl3RSxHQUNkQSxFQUFFaU4sYUFBYSxTQUFXak4sRUFBRW9lLFFBQVFyUSxTQUFTOWYsT0FDekMsSUFBSWdXLFFBQVFrYixJQUNsQm5mLEVBQUVxYixpQkFBaUIsb0JBQXFCLElBQU04RCxFQUFRbmYsSUFDdERBLEVBQUVxYixpQkFBaUIsa0JBQW1CLElBQU04RCxFQUFRbmYsTUFHL0NBLElBYUssVVVuQ2YsRUFBT3RULElBQU0sVUFHUmkxQixPQUFPQyxZQUNYRCxPQUFPQyxVQUFZLElBRXBCRCxPQUFPQyxVQUFVQyxNQUFRLEdBQ3pCRixPQUFPQyxVQUFVQyxNQUFNcHZCLE9BQVMsRUFDaENrdkIsT0FBT0MsVUFBVUMsTUFBTUMsT0FBUyxHQUNoQ0gsT0FBT0MsVUFBVUMsTUFBTXZ2QixLQUFPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJcclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFN0YXRpYyBwYXJhbWV0ZXJzXHJcbiAqIHVzZWQgYWNyb3NzIENIVE1MXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0ZW52OiAnJyxcclxuXHRjb250ZXh0Ont9LFxyXG5cdGF0dHJNYXA6IHtcclxuXHRcdGhpbnQ6ICdkYXRhLXRyZWUnLFxyXG5cdFx0bmFtZXNwYWNlOiAnZGF0YS1uYW1lc3BhY2UnLFxyXG5cdFx0c3VwZXJyb2xlOiAnZGF0YS1yb2xlJyxcclxuXHRcdHN1YnJvbGU6ICdkYXRhLXJvbGUnLFxyXG5cdFx0YnVuZGxlOiAnY2h0bWwtYnVuZGxlJyxcclxuXHRcdG5vY29tcG9zZTogWydub2NvbXBvc2UnLCAnc2hhZG93JyxdLFxyXG5cdH0sXHJcblx0dGFnTWFwOiB7XHJcblx0XHRqc2VuOiAnc2NyaXB0W3R5cGU9XCJ0ZXh0L3Njb3BlZC1qc1wiXScsXHJcblx0XHRidW5kbGU6ICd0ZW1wbGF0ZVtpcz1cImNodG1sLWJ1bmRsZVwiXScsXHJcblx0XHRpbXBvcnQ6ICdjaHRtbC1pbXBvcnQnLFxyXG5cdH0sXHJcblx0dHJlZVByb3BlcnR5Oid0cmVlJyxcclxuXHRiaW5kaW5nUHJvcGVydHk6J2JpbmRpbmcnLFxyXG5cdGtleVZhbEF0dHJpYnV0ZXM6W10sXHJcblx0bGlzdEF0dHJpYnV0ZXM6W10sXHJcblx0cmVtb2RlbENhbGxiYWNrOm51bGwsXHJcblx0cmVjb21wb3NlQ2FsbGJhY2s6bnVsbCxcclxuXHRoaWRlRGF0YUJsb2NrU2NyaXB0OnRydWUsXHJcbn07IiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImFycmF5XCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJ1bmRlZmluZWRcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJvYmplY3RcIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBhbnl0aGluZyBvYmplY3QsIGluY2x1ZGluZyBidWlsdC1pbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHB1cmUgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsKSAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1R5cGVBcnJheSBmcm9tICcuLi9qcy9pc1R5cGVBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNFbXB0eSBmcm9tICcuLi9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogQ2FzdHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYW4gYXJyYXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdHZhbFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0Y2FzdE9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwsIGNhc3RPYmplY3QgPSB0cnVlKSB7XHJcblx0aWYgKF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiB2YWw7XHJcblx0fTtcclxuXHRpZiAoIWNhc3RPYmplY3QgJiYgX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBbdmFsXTtcclxuXHR9O1xyXG5cdGlmICh2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gMCAmJiBfaXNFbXB0eSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fTtcclxuXHRpZiAoX2lzVHlwZUFycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWwpO1xyXG5cdH07XHJcblx0aWYgKF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWwpO1xyXG5cdH07XHJcblx0cmV0dXJuIFt2YWxdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4vaXNUeXBlT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgZW1wdHkgaW4gaXRzIG93biB0eXBlLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIE5VTExzLCBVTkRFRklORUQsIEZBTFNFLCAwLFxyXG4gKiBvYmplY3RzIHdpdGhvdXQga2V5cywgZW1wdHkgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc051bGwodmFsKSB8fCBfaXNVbmRlZmluZWQodmFsKSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gMCBcclxuXHRcdHx8IChfaXNUeXBlT2JqZWN0KHZhbCkgJiYgIU9iamVjdC5rZXlzKHZhbCkubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG51bGwuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gJyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIFwiYXJyYXktbGlrZVwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIHRoYXQgaGFzIGEgbGVuZ3RoIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIV9pc1N0cmluZyh2YWwpICYmICFfaXNVbmRlZmluZWQodmFsLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJhcnJheVwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc1R5cGVGdW5jdGlvbih2YWwpIHx8ICh2YWwgJiYge30udG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBmdW5jdGlvbl0nKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCByZWd1bGFyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlcy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHB1cmUgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsKSAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJvYmplY3RcIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBhbnl0aGluZyBvYmplY3QsIGluY2x1ZGluZyBidWlsdC1pbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIiBvciBhIG51bWVyaWMgc3RyaW5nLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggbnVtYmVycyBhbmQgbnVtZXJpYyBzdHJpbmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCAhPT0gdHJ1ZSAmJiB2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09ICcnICYmICFpc05hTih2YWwgKiAxKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJy4uL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9nZXRQcm90b3R5cGVDaGFpbiBmcm9tICcuL2dldFByb3RvdHlwZUNoYWluLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFYWdlcmx5IHJldHJpZXZlcyBvYmplY3QgbWVtYmVycyBhbGwgZG93biB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHZhciBrZXlzQWxsID0gW107XHJcblx0X2dldFByb3RvdHlwZUNoYWluKG9iaiwgdW50aWwpLmZvckVhY2gob2JqID0+IHtcclxuXHRcdF9wdXNoVW5pcXVlKGtleXNBbGwsIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikpO1xyXG5cdH0pO1xyXG5cdHJldHVybiBrZXlzQWxsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dW50aWwgPSB1bnRpbCB8fCBPYmplY3QucHJvdG90eXBlO1xyXG5cdHVudGlsID0gdW50aWwgJiYgIV9pc0FycmF5KHVudGlsKSA/IFt1bnRpbF0gOiB1bnRpbDtcclxuXHQvLyBXZSBnZXQgdGhlIGNoYWluIG9mIGluaGVyaXRhbmNlXHJcblx0dmFyIHByb3RvdHlwYWxDaGFpbiA9IFtdO1xyXG5cdHZhciBvYmogPSBvYmo7XHJcblx0d2hpbGUoKG9iaiAmJiAoIXVudGlsIHx8IHVudGlsLmluZGV4T2Yob2JqKSA8IDApICYmIG9iai5uYW1lICE9PSAnZGVmYXVsdCcpKSB7XHJcblx0XHRwcm90b3R5cGFsQ2hhaW4ucHVzaChvYmopO1xyXG5cdFx0b2JqID0gb2JqID8gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgOiBudWxsO1xyXG5cdH1cclxuXHRyZXR1cm4gcHJvdG90eXBhbENoYWluO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEFkZHMgYW4gaXRlbSBpZiBub3QgYWxyZWFkeSBleGlzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0Li4uaXRtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIC4uLml0ZW1zKSB7XHJcblx0aXRlbXMuZm9yRWFjaChpdG0gPT4ge1xyXG5cdFx0aWYgKGFyci5pbmRleE9mKGl0bSkgPCAwKSB7XHJcblx0XHRcdGFyci5wdXNoKGl0bSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2dldEFsbFByb3BlcnR5TmFtZXMgZnJvbSAnLi9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2FsbGJhY2sob2JqcywgY2FsbGJhY2ssIGRlZXBQcm9wcyA9IGZhbHNlLCBpc1JlcGxhY2UgPSBmYWxzZSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHR2YXIgb2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHRpZiAoX2lzTnVtZXJpYyhvYmoxKSB8fCBvYmoxID09PSB0cnVlIHx8IG9iajEgPT09IGZhbHNlKSB7XHJcblx0XHRkZXB0aCA9IG9iajE7XHJcblx0XHRvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdH1cclxuXHRpZiAoIW9ianMubGVuZ3RoKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ19tZXJnZSgpIHJlcXVpcmVzIHR3byBvciBtb3JlIGFycmF5L29iamVjdHMuJyk7XHJcblx0fVxyXG5cdG9ianMuZm9yRWFjaCgob2JqMiwgaSkgPT4ge1xyXG5cdFx0aWYgKCFfaXNUeXBlT2JqZWN0KG9iajIpICYmICFfaXNGdW5jdGlvbihvYmoyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQoZGVlcFByb3BzID8gX2dldEFsbFByb3BlcnR5TmFtZXMob2JqMikgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmoyKSkuZm9yRWFjaChrZXkgPT4ge1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoxID0gb2JqMVtrZXldO1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoyID0gb2JqMltrZXldO1xyXG5cdFx0XHRpZiAoKChfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikpIHx8IChfaXNPYmplY3QodmFsQXRPYmoxKSAmJiBfaXNPYmplY3QodmFsQXRPYmoyKSkpIFxyXG5cdFx0XHQmJiAoZGVwdGggPT09IHRydWUgfHwgZGVwdGggPiAwKSkge1xyXG5cdFx0XHRcdC8vIFJFQ1VSU0UuLi5cclxuXHRcdFx0XHRvYmoxW2tleV0gPSBfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikgPyBbXSA6IHt9O1xyXG5cdFx0XHRcdG1lcmdlQ2FsbGJhY2soW19pc051bWVyaWMoZGVwdGgpID8gZGVwdGggLSAxIDogZGVwdGgsIG9iajFba2V5XSwgdmFsQXRPYmoxLCB2YWxBdE9iajJdLCBjYWxsYmFjaywgZGVlcFByb3BzLCBpc1JlcGxhY2UsIHdpdGhTeW1ib2xzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChjYWxsYmFjayhrZXksIG9iajEsIG9iajIsIGkpKSB7XHJcblx0XHRcdFx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNSZXBsYWNlKSB7XHJcblx0XHRcdFx0XHRcdG9iajFba2V5XSA9IHZhbEF0T2JqMjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG9iajEucHVzaCh2YWxBdE9iajIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHdlJ3JlIHNldHRpbmcgYSByZWFkLW9ubHkgcHJvcGVydHlcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGlmICh3aXRoU3ltYm9scykge1xyXG5cdFx0XHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmoxLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqMiwga2V5KSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0b2JqMVtrZXldID0gb2JqMltrZXldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGNhdGNoKGUpIHt9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHRyZXR1cm4gb2JqMTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5vYmpzKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKG9ianMsIChrLCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJlbW92ZXMgaW5zdGFuY2VzIG9mIHJlZmVyZW5jZSB1cCB0byA8bGltaXQ+IHRpbWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIG1peGVkXHQgXHRpdG1cclxuICogQHBhcmFtIGludHxib29sIFx0bGltaXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBpdG0sIGxpbWl0ID0gZmFsc2UpIHtcclxuXHR2YXIgaSA9IGFyci5pbmRleE9mKGl0bSk7XHJcblx0d2hpbGUgKGkgPiAtMSAmJiAobGltaXQgfHwgbGltaXQgPT09IGZhbHNlKSkge1xyXG5cdFx0YXJyLnNwbGljZShpLCAxKTtcclxuXHRcdGlmIChsaW1pdCA+IDApIHtcclxuXHRcdFx0bGltaXQgLS07XHJcblx0XHR9O1xyXG5cdFx0aSA9IGFyci5pbmRleE9mKGl0bSk7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEluc3RhbmNlb2YgdGhhdCBzdXBwb3J0cyBvdXIgbXVsdGktaW5oZXJpdGFuY2UgaW1wbGVtZW50c3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9iajFcclxuICogQHBhcmFtIG9iamVjdFx0IFx0Y2xhc3NCXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBjbGFzc0IpIHtcclxuXHRpZiAoIW9iaikge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRpZiAob2JqIGluc3RhbmNlb2YgY2xhc3NCKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0dmFyIG1peGluVGVzdCA9IGNsYXNzQSA9PiB7XHJcblx0XHR3aGlsZSAoY2xhc3NBICYmIGNsYXNzQSAhPT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XHJcblx0XHRcdGlmIChjbGFzc0EgPT09IGNsYXNzQiB8fCAoY2xhc3NBLnByb3RvdHlwZXMgJiYgY2xhc3NBLnByb3RvdHlwZXMucmVkdWNlKChwcmV2QW5zLCBwcm90b3R5cGUpID0+IHByZXZBbnMgfHwgKHByb3RvdHlwZSA9PT0gY2xhc3NCKSB8fCBtaXhpblRlc3QocHJvdG90eXBlKSwgZmFsc2UpKSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNsYXNzQSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjbGFzc0EpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH07XHJcblx0cmV0dXJuIG1peGluVGVzdChvYmouY29uc3RydWN0b3IpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwibnVtYmVyXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgYW4gb2JqZWN0IGlzIGRpcmVjdCBpbnN0YW5jZSBvZiBPYmplY3QucHJvdG90eXBlLlxyXG4gKiBRdWl0ZSB1c2VmdWwgaW4gZGlmZmVyZW50aWF0aW5nIG5hdGl2ZSBvYmplY3RzIGFuZCBjbGFzcyBpbnN0YW5jZXMgZnJvbSBwbGFpbiBvYmplY3RzICh7fSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRvYmpcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmopIHtcclxuXHRyZXR1cm4gX2lzT2JqZWN0KG9iaikgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwiYm9vbGVhblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgb2JqIGZsYXRseSB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIFN0b3BzIHdoZW4gY2FsbGJhY2sgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqIFx0XHRcdFRoZSBhcnJheSBvciBvYmplY3QgdG8gaXRlcmF0ZS5cclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRcdFx0Y2FsbGJhY2sgXHRcdFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybiBtaXhlZHxudWxsXHRcdFx0QW55IG5vbi1udWxsIHJldHVybiBmcm9tIGNhbGxiYWNrXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XHJcblx0dmFyIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdGlmIChfaXNUeXBlT2JqZWN0KG9iaikpIHtcclxuXHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoaywgaSkgPT4ge1xyXG5cdFx0XHRpZiAocmV0dXJuVmFsdWUgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuVmFsdWUgPSBjYWxsYmFjayhfaXNOdW1lcmljKGspID8gcGFyc2VGbG9hdChrKSA6IGssIG9ialtrXSwgaSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnLi4vanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNQbGFpbk9iamVjdCBmcm9tICcuLi9qcy9pc1BsYWluT2JqZWN0LmpzJztcclxuaW1wb3J0IF9jb21wYXJlQ2FsbGJhY2sgZnJvbSAnLi9jb21wYXJlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIEFzc2VydHMgKG1lbWJlcnMgb2YpIHRoZSBmaXJzdCB2YWx1ZSBhZ2FpbnN0IChtZW1iZXJzIG9mKSBzdWJzZXF1ZW50IHZhbHVlcy5cclxuICogQXNzZXJ0aW9uIGNvdWxkIGJlIFRSVUUsIEZBTFNFLCBvciBjdXN0b20uXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRcdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gaW50XHRcdFx0XHRkZXB0aFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmNvbnN0IF9ldmVuID0gZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgZGVwdGggPSAxKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpICYmIG9iajEubGVuZ3RoICE9PSBvYmoyLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuICFhc3NlcnRpb247XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSB7XHJcblx0XHR2YXIgb2JqMUtleXMgPSBPYmplY3Qua2V5cyhvYmoxKTtcclxuXHRcdHZhciBvYmoyS2V5cyA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG5cdFx0aWYgKCFvYmoxS2V5cy5sZW5ndGggJiYgIW9iajJLZXlzLmxlbmd0aCkge1xyXG5cdFx0XHQvLyBPYmplY3RzIHRoYXQgd29uJ3Qgc2hvdyBrZXlzIG11c3QgYmUgY29tcGFyZWQgYnkgaW5zdGFuY2VcclxuXHRcdFx0Ly8gTWFueSBuYXRpdmUgb2JqZWN0cyB3b24ndC4gU28gd2UgY2FuJ3QganVkZ2UgYnkga2V5cyBhbG9uZS5cclxuXHRcdFx0cmV0dXJuIF9pc1BsYWluT2JqZWN0KG9iajEpICYmIF9pc1BsYWluT2JqZWN0KG9iajIpIFxyXG5cdFx0XHRcdD8gYXNzZXJ0aW9uXHJcblx0XHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvbjtcclxuXHRcdH1cclxuXHRcdGlmICghX2V2ZW4ob2JqMUtleXMsIG9iajJLZXlzKSkge1xyXG5cdFx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGRlcHRoID4gMCAmJiAoKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB8fCAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gX2NvbXBhcmVDYWxsYmFjayhvYmoxLCBvYmoyLCAodjEsIHYyKSA9PiB7XHJcblx0XHRcdHJldHVybiBfZXZlbih2MSwgdjIsIGFzc2VydGlvbiwgZGVwdGggLSAxKTtcclxuXHRcdH0sIGZhbHNlLypuZXRDb21wYXJpc29uKi8sIGZhbHNlLypjb250cmFzdCovLCB0cnVlLypyZXR1cm5PbkZpcnN0RmFsc2UqLyk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkocmVzdWx0KSBcclxuXHRcdFx0PyByZXN1bHQubGVuZ3RoID09PSBvYmoxLmxlbmd0aCAmJiByZXN1bHQubGVuZ3RoID09PSBvYmoyLmxlbmd0aCBcclxuXHRcdFx0OiAoX2lzT2JqZWN0KHJlc3VsdCkgJiYgX2lzT2JqZWN0KG9iajEpIFxyXG5cdFx0XHRcdD8gT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gIE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCBcclxuXHRcdFx0XHQ6IHJlc3VsdCk7XHJcblx0fVxyXG5cdHJldHVybiBfaXNGdW5jdGlvbihhc3NlcnRpb24pID8gYXNzZXJ0aW9uKG9iajEsIG9iajIpIDogKFxyXG5cdFx0X2lzTnVtYmVyKG9iajEpICYmIF9pc051bWJlcihvYmoyKSAmJiBpc05hTihvYmoxKSAmJiBpc05hTihvYmoyKSBcclxuXHRcdFx0PyBhc3NlcnRpb24gXHJcblx0XHRcdDogKG9iajEgPT09IG9iajIpID09PSBhc3NlcnRpb25cclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBfZXZlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0Jvb2xlYW4gZnJvbSAnLi4vanMvaXNCb29sZWFuLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJy4vZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbWF0Y2goZXMpIGJldHdlZW4gKG1lbWJlcnMgb2YpIHR3byB2YWx1ZXM7XHJcbiAqIGFzc2VydGlvbiBvcHRpb25hbGx5IGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iMVxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMlxyXG4gKiBAcGFyYW0gc3RyaW5nfGZ1bmN0aW9uXHRhc3NlcnRpb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdG5ldENvbXBhcmlzb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdGNvbnRyYXN0XHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRyZXR1cm5PbkZpcnN0RmFsc2VcclxuICpcclxuICogQHJldHVybiBib29sfGFycmF5fG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgbmV0Q29tcGFyaXNvbiA9IHRydWUsIGNvbnRyYXN0ID0gZmFsc2UsIHJldHVybk9uRmlyc3RGYWxzZSA9IGZhbHNlKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHR2YXIgY29udG4gPSB0cnVlO1xyXG5cdFx0b2JqMS5mb3JFYWNoKHYxID0+IHtcclxuXHRcdFx0aWYgKCFjb250bikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0X2VhY2gob2JqMiwgKGssIHYyKSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0ZXN0UGFzcyB8fCAobmV0Q29tcGFyaXNvbiAmJiBfaXNUeXBlT2JqZWN0KHYxKSkpIHtcclxuXHRcdFx0XHRcdHRlc3RQYXNzID0gYXNzZXJ0aW9uKHYxLCB2Mik7XHJcblx0XHRcdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSAmJiBuZXRDb21wYXJpc29uKSB7XHJcblx0XHRcdFx0XHRcdC8vIEZ1cnRoZXIgcmVjdXJzaW9ucyBzaG91bGQgdXNlIHRoaXMgdGVzdFBhc3MgYXMgdjFcclxuXHRcdFx0XHRcdFx0djEgPSB0ZXN0UGFzcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiB2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godGVzdFBhc3MpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godjEpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblx0XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRPYmplY3Qua2V5cyhvYmoxKS5mb3JFYWNoKGsgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGFzc2VydGlvbihvYmoxW2tdLCBvYmoyW2tdKTtcclxuXHRcdFx0aWYgKChfaXNBcnJheSh0ZXN0UGFzcykgJiYgIXRlc3RQYXNzLmxlbmd0aCkgfHwgKF9pc09iamVjdCh0ZXN0UGFzcykgJiYgIU9iamVjdC5rZXlzKHRlc3RQYXNzKS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfaXNCb29sZWFuKHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IHRlc3RQYXNzO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gb2JqMVtrXTtcclxuXHRcdFx0fSBlbHNlIGlmIChyZXR1cm5PbkZpcnN0RmFsc2UpIHtcclxuXHRcdFx0XHRjb250biA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEV4cHJJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ29tcGFyZXMgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugd2l0aCBhbm90aGVyIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgRXhwclxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0ZXZlbihFeHByKSB7XHJcblx0XHRpZiAoX2lzT2JqZWN0KEV4cHIpICYmIEV4cHIuanNlblR5cGUgPT09IHRoaXMuanNlblR5cGUpIHtcclxuXHRcdFx0cmV0dXJuIF9ldmVuKEV4cHIsIHRoaXMpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBJbmhlcml0cyBwcm9wZXJ0aWVzIGZyb20gYSBzdXBlciBFeHByLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV4cHJJbnRlcmZhY2UgU3VwZXJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGluaGVyaXQoU3VwZXIpIHtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGRzIGNvbW1lbnRzIHRvIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdCBjb21tZW50c1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0d2l0aENvbW1lbnRzKGNvbW1lbnRzKSB7XHJcblx0XHRpZiAoIXRoaXMubWV0YSkge1xyXG5cdFx0XHR0aGlzLm1ldGEgPSB7fTtcclxuXHRcdH1cclxuXHRcdHRoaXMubWV0YS5jb21tZW50cyA9IGNvbW1lbnRzO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgdmFyaWFibGVzIHRvIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHQgdmFyc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0d2l0aFZhcnModmFycykge1xyXG5cdFx0aWYgKCF0aGlzLm1ldGEpIHtcclxuXHRcdFx0dGhpcy5tZXRhID0ge307XHJcblx0XHR9XHJcblx0XHR0aGlzLm1ldGEudmFycyA9IHZhcnM7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRXZhbHVhdGVzIHRoZSBleHByZXNzaW9uIGluc3RhbmNlIGZvciBhIHJlc3VsdCxcclxuXHQgKiBvcHRpb25hbGx5IGluIHRoZSBjb250ZXh0IG9mIGFuIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgY29udGV4dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdC8vZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGV4cHJlc3Npb24gaW5zdGFuY2UgYmFjayB0byBhIHN0cmluZyxcclxuXHQgKiBvcHRpb25hbGx5IGluIHRoZSBjb250ZXh0IG9mIGFuIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgY29udGV4dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHQvL3RvU3RyaW5nKGNvbnRleHQgPSBudWxsKVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNBdHRlbXB0cyB0byBwYXJzZSBhIHN0cmluZyBpbnRvIHRoZSBjbGFzcyBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgZXhwclxyXG5cdCAqIEBwYXJhbSBvYmplY3QgcGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV4cHJJbnRlcmZhY2VcclxuXHQgKi9cclxuXHQvL3N0YXRpYyBwYXJzZShleHByLCBwYXJhbXMgPSB7fSlcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJlZmVyZW5jZUludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnUmVmZXJlbmNlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENhbGxJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0NhbGxFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEZ1bmNJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Z1bmN0aW9uVHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX3JlbW92ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9yZW1vdmUuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pbnN0YW5jZW9mIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaW5zdGFuY2VvZi5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDYWxsSW50ZXJmYWNlIGZyb20gJy4vRXhwci9DYWxsSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEZ1bmNJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Z1bmNJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBKc2VuIChiYXNlKSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEpzZW4gPSBjbGFzcyB7XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIFBhcnNlcnMsIHBhcmFtcyA9IHt9LCBTdGF0aWMgPSBKc2VuKSB7XHJcblx0XHRpZiAoIXBhcmFtcy5tZXRhKSB7XHJcblx0XHRcdHBhcmFtcy5tZXRhID0ge3ZhcnM6IFtdLCBfdmFyczogW119O1xyXG5cdFx0fVxyXG5cdFx0aWYgKGV4cHIubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBwYXJzZXJzID0gT2JqZWN0LnZhbHVlcyhQYXJzZXJzIHx8IFN0YXRpYy5ncmFtbWFycyk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2Vycy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdFx0XHQvLyBGcm9tIHRoaXMgcG9pbnQgZm9yd2FyZCwgYWxsIHZhcnMgaXMgd2l0aGluIGN1cnJlbnQgc2NvcGVcclxuXHRcdFx0XHR2YXIgdmFyc1Njb3BlID0gcGFyYW1zLm1ldGEgJiYgX2lzQXJyYXkocGFyYW1zLm1ldGEudmFycykgPyBwYXJhbXMubWV0YS52YXJzLmxlbmd0aCA6IDA7XHJcblx0XHRcdFx0dmFyIHBhcnNlZCA9IHBhcnNlcnNbaV0ucGFyc2UoZXhwciwgKF9leHByLCBfUGFyc2VycywgX3BhcmFtcyA9IHt9KSA9PiBKc2VuLnBhcnNlKF9leHByLCBfUGFyc2VycywgX3BhcmFtcyA/IF9tZXJnZShwYXJhbXMsIF9wYXJhbXMpIDogcGFyYW1zLCBTdGF0aWMpKTtcclxuXHRcdFx0XHQvLyBBZGQvcmVtb3ZlIHZhcnMgdG8gc2NvcGVcclxuXHRcdFx0XHRpZiAocGFyc2VkKSB7XHJcblx0XHRcdFx0XHRpZiAoIXBhcnNlZC5tZXRhKSB7XHJcblx0XHRcdFx0XHRcdHBhcnNlZC5tZXRhID0ge307XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBSZWFwIHZhcnMgaW50byBzY29wZSBleHByXHJcblx0XHRcdFx0XHRpZiAoX2luc3RhbmNlb2YocGFyc2VkLCBGdW5jSW50ZXJmYWNlKSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgc2Vjb25kTGV2ZWxWYXJzID0gcGFyYW1zLm1ldGEudmFycy5zcGxpY2UodmFyc1Njb3BlKTtcclxuXHRcdFx0XHRcdFx0cGFyYW1zLm1ldGEuX3ZhcnMgPSBwYXJhbXMubWV0YS5fdmFycy5jb25jYXQoc2Vjb25kTGV2ZWxWYXJzKTtcclxuXHRcdFx0XHRcdFx0cGFyc2VkLm1ldGEuX3ZhcnMgPSBzZWNvbmRMZXZlbFZhcnM7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRwYXJzZWQubWV0YS52YXJzID0gcGFyYW1zLm1ldGEudmFycy5zbGljZSh2YXJzU2NvcGUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gQWRkIHZhcnMgdG8gc2NvcGVcclxuXHRcdFx0XHRcdGlmIChfaW5zdGFuY2VvZihwYXJzZWQsIFJlZmVyZW5jZUludGVyZmFjZSkgfHwgX2luc3RhbmNlb2YocGFyc2VkLCBDYWxsSW50ZXJmYWNlKSkge1xyXG5cdFx0XHRcdFx0XHRfcmVtb3ZlKHBhcnNlZC5tZXRhLnZhcnMsIHBhcnNlZC5jb250ZXh0KTtcclxuXHRcdFx0XHRcdFx0X3JlbW92ZShwYXJhbXMubWV0YS52YXJzLCBwYXJzZWQuY29udGV4dCk7XHJcblx0XHRcdFx0XHRcdHBhcmFtcy5tZXRhLnZhcnMucHVzaChwYXJzZWQpO1xyXG5cdFx0XHRcdFx0fSBcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHBhcnNlZCAmJiBfaXNBcnJheShwYXJhbXMuZXhwbGFpbikpIHtcclxuXHRcdFx0XHRcdHBhcmFtcy5leHBsYWluLnB1c2goZXhwciArICcgPj4tLS0tLS0tLS0tLS0tPj4gJyArIHBhcnNlZC5qc2VuVHlwZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChwYXJzZWQpIHtcclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChwYXJhbXMuYXNzZXJ0ID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1tTeW50YXggZXJyb3I6XSAnICsgZXhwcik7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBKc2VuO1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwidW5kZWZpbmVkXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCAmJiAodmFsID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNUeXBlQXJyYXkgZnJvbSAnLi4vanMvaXNUeXBlQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnLi4vanMvaXNFbXB0eS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIENhc3RzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGFuIGFycmF5LlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHR2YWxcclxuICogQHBhcmFtIGJvb2xcdCBcdGNhc3RPYmplY3RcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsLCBjYXN0T2JqZWN0ID0gdHJ1ZSkge1xyXG5cdGlmIChfaXNBcnJheSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH07XHJcblx0aWYgKCFjYXN0T2JqZWN0ICYmIF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW3ZhbF07XHJcblx0fTtcclxuXHRpZiAodmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IDAgJiYgX2lzRW1wdHkodmFsKSkge1xyXG5cdFx0cmV0dXJuIFtdO1xyXG5cdH07XHJcblx0aWYgKF9pc1R5cGVBcnJheSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmFsKTtcclxuXHR9O1xyXG5cdGlmIChfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIE9iamVjdC52YWx1ZXModmFsKTtcclxuXHR9O1xyXG5cdHJldHVybiBbdmFsXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bGwgZnJvbSAnLi9pc051bGwuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuL2lzVHlwZU9iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIGVtcHR5IGluIGl0cyBvd24gdHlwZS5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBOVUxMcywgVU5ERUZJTkVELCBGQUxTRSwgMCxcclxuICogb2JqZWN0cyB3aXRob3V0IGtleXMsIGVtcHR5IGFycmF5cy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBfaXNOdWxsKHZhbCkgfHwgX2lzVW5kZWZpbmVkKHZhbCkgfHwgdmFsID09PSBmYWxzZSB8fCB2YWwgPT09IDAgXHJcblx0XHR8fCAoX2lzVHlwZU9iamVjdCh2YWwpICYmICFPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBudWxsLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09ICcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJy4vaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBcImFycmF5LWxpa2VcIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBhbnl0aGluZyB0aGF0IGhhcyBhIGxlbmd0aCBwcm9wZXJ0eS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuICFfaXNTdHJpbmcodmFsKSAmJiAhX2lzVW5kZWZpbmVkKHZhbC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEZsYXR0ZW5zIGEgbmVzdGVkIGFycmF5IHRvIHRoZSBnaXZlbiBkZXB0aC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnQgXHQgXHRkZXB0aFxyXG4gKiBAcGFyYW0gYm9vbCBcdCBcdHdpdGhPYmplY3RzXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmNvbnN0IF9mbGF0dGVuID0gZnVuY3Rpb24oYXJyLCBkZXB0aCA9IDEsIHdpdGhPYmplY3RzID0gdHJ1ZSkge1xyXG5cdGlmICghX2lzTnVtZXJpYyhkZXB0aCkgfHwgZGVwdGggPD0gMCkge1xyXG5cdFx0cmV0dXJuIGFycjtcclxuXHR9O1xyXG5cdGlmICghX2lzQXJyYXkoYXJyKSAmJiBfaXNPYmplY3QoYXJyKSAmJiB3aXRoT2JqZWN0cykge1xyXG5cdFx0YXJyID0gT2JqZWN0LnZhbHVlcyhhcnIpO1xyXG5cdH07XHJcblx0aWYgKCFfaXNBcnJheShhcnIpKSB7XHJcblx0XHRyZXR1cm4gYXJyO1xyXG5cdH07XHJcblx0cmV0dXJuIGFyci5yZWR1Y2UoKGFjYywgdmFsKSA9PiBfaXNBcnJheSh2YWwpIHx8IChfaXNPYmplY3QodmFsKSAmJiB3aXRoT2JqZWN0cykgXHJcblx0XHQ/IGFjYy5jb25jYXQoX2ZsYXR0ZW4oIV9pc0FycmF5KHZhbCkgPyBPYmplY3QudmFsdWVzKHZhbCkgOiB2YWwsIGRlcHRoIC0gMSwgd2l0aE9iamVjdHMpKSBcclxuXHRcdDogYWNjLmNvbmNhdCh2YWwpLCBbXSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IF9mbGF0dGVuOyIsIlxyXG4vKipcclxuICogUmV0dXJucyBUSEUgRklSU1QgRU5UUlkgT1IgQSBOVU1CRVIgT0YgRU5UUklFUyBjb3VudGluZyBmb3J3YXJkIGZyb20gdGhlIGJlZ2luaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGludFx0IFx0YW1vdW50XHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWR8YXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgYW1vdW50ID0gMSkge1xyXG5cdHZhciBjb3VudCA9IDA7XHJcblx0YXJyLmZvckVhY2goaXRtID0+IHtcclxuXHRcdGNvdW50ICsrO1xyXG5cdH0pO1xyXG5cdHZhciBmaXJzdHMgPSBhcnIuc2xpY2UoYXJyLmxlbmd0aCAtIGNvdW50LCBhbW91bnQpO1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGZpcnN0cyA6IGZpcnN0c1swXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9maXJzdCBmcm9tICcuL2ZpcnN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIFRIRSBMQVNUIEVOVFJZIE9SIEEgTlVNQkVSIE9GIEVOVFJJRVMgY291bnRpbmcgZm9yd2FyZCB0byB0aGUgZW5kLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGludFx0IFx0YW1vdW50XHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWR8YXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgYW1vdW50ID0gMSkge1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxyXG5cdFx0PyBfZmlyc3QoYXJyLnNsaWNlKCkucmV2ZXJzZSgpLCBhbW91bnQpLnJldmVyc2UoKVxyXG5cdFx0OiBfZmlyc3QoYXJyLnNsaWNlKCkucmV2ZXJzZSgpKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIENvcGllcyBvbmx5IHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdG9ubHlcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdGV4Y2VwdFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBmaWx0ZXIgPSBbXSkge1xyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhbe30sIG9ial0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24ob2JqMltrZXldKSkge1xyXG5cdFx0XHRyZXR1cm4gX2lzRnVuY3Rpb24oZmlsdGVyKSA/IGZpbHRlcihrZXkpIFxyXG5cdFx0XHRcdDogKF9pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA/IGZpbHRlci5pbmRleE9mKGtleSkgPiAtMSA6IHRydWUpO1xyXG5cdFx0fVxyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCBmYWxzZS8qd2l0aFN5bWJvbHMqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF9maXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuaW1wb3J0IF9jb3B5UGxhaW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weVBsYWluLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUT0tFTklaRVJcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5jb25zdCBMZXhlciA9IGNsYXNzIHtcclxuXHJcblx0LyoqXHJcblx0ICogRmFjdG9yeSBtZXRob2QuXHJcblx0ICpcclxuXHQgKiBIYW5kbGVzIGNhY2hpbmcuXHJcblx0ICpcclxuXHQgKiBAc2VlIGNvbnN0cnVjdG9yKClcclxuXHQgKi9cclxuXHRzdGF0aWMgbGV4KHN0ciwgZGVsaW1zLCBvcHRpb25zID0ge30pIHtcclxuXHRcdGlmICghX2lzU3RyaW5nKHN0cikpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudDEgbXVzdCBiZSBhIHN0cmluZyEnKTtcclxuXHRcdH1cclxuXHRcdHZhciBjb3B5UmVzdWx0ID0gcmVzdWx0ID0+IHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRkZWxpbXM6IHJlc3VsdC5kZWxpbXMuc2xpY2UoKSxcclxuXHRcdFx0XHRvcHRpb25zOiBfY29weVBsYWluKHJlc3VsdC5vcHRpb25zKSxcclxuXHRcdFx0XHRuZXN0aW5nOiByZXN1bHQubmVzdGluZy5zbGljZSgpLFxyXG5cdFx0XHRcdG1heERlcHRoOiByZXN1bHQubWF4RGVwdGgsXHJcblx0XHRcdFx0Y29tbWVudHM6IHJlc3VsdC5jb21tZW50cy5zbGljZSgpLFxyXG5cdFx0XHRcdHRva2VuczogcmVzdWx0LnRva2Vucy5zbGljZSgpLFxyXG5cdFx0XHRcdG1hdGNoZXM6IHJlc3VsdC5tYXRjaGVzLnNsaWNlKCksXHJcblx0XHRcdFx0bWF0Y2hlc2k6IF9jb3B5UGxhaW4ocmVzdWx0Lm1hdGNoZXNpKSxcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0XHQvLyBBU0sgQ0FDSEUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoTGV4ZXIuJGNhY2hlW3N0cl0gJiYgb3B0aW9ucy5jYWNoZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBMZXhlci4kY2FjaGVbc3RyXS5sZW5ndGg7IGkgKyspIHtcclxuXHRcdFx0XHR2YXIgY2FjaGVkID0gTGV4ZXIuJGNhY2hlW3N0cl1baV07XHJcblx0XHRcdFx0aWYgKF9ldmVuKGNhY2hlZC5kZWxpbXMsIGRlbGltcykpIHtcclxuXHRcdFx0XHRcdHJldHVybiBjb3B5UmVzdWx0KGNhY2hlZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLyBGUkVTSCBQQVJTRVx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBpbnN0YW5jZSA9IG5ldyBMZXhlcihzdHIsIG9wdGlvbnMpO1xyXG5cdFx0dmFyIHJlc3VsdCA9IGluc3RhbmNlLmxleChkZWxpbXMpO1xyXG5cdFx0Ly8gU0FWRSBUTyBDQUNIRSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAob3B0aW9ucy5jYWNoZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0TGV4ZXIuJGNhY2hlW3N0cl0gPSBMZXhlci4kY2FjaGVbc3RyXSB8fCBbXTtcclxuXHRcdFx0TGV4ZXIuJGNhY2hlW3N0cl0ucHVzaChyZXN1bHQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNvcHlSZXN1bHQocmVzdWx0KTtcclxuXHRcdFxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIC5zcGxpdCgpLlxyXG5cdCAqXHJcblx0ICogSGFuZGxlcyBjYWNoaW5nLlxyXG5cdCAqXHJcblx0ICogQHNlZSBjb25zdHJ1Y3RvcigpXHJcblx0ICovXHJcblx0c3RhdGljIHNwbGl0KHN0ciwgZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gTGV4ZXIubGV4KHN0ciwgZGVsaW1zLCBvcHRpb25zKS50b2tlbnM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgLm1hdGNoKCkuXHJcblx0ICpcclxuXHQgKiBIYW5kbGVzIGNhY2hpbmcuXHJcblx0ICpcclxuXHQgKiBAc2VlIGNvbnN0cnVjdG9yKClcclxuXHQgKi9cclxuXHRzdGF0aWMgbWF0Y2goc3RyLCBkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiBMZXhlci5sZXgoc3RyLCBkZWxpbXMsIG9wdGlvbnMpLm1hdGNoZXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgbGV4ZXIgaW5zdGFuY2Ugb24gYSBzdHJpbmcgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRvcHRpb25zOlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRcdGJsb2Nrc1x0XHRcdFx0VGhlIHN0cmluZ3MgdGhhdCBiZWdpbiBhbmQgZW5kIGEgbmVzdGVkIHN0cnVjdHVyZVxyXG5cdCAqIEBwYXJhbSBudW1iZXIgXHRcdGxpbWl0XHRcdFx0XHRNYXggcmVzdWx0cyB0byByZXR1cm5cclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0XHRiYWNrcmVmZXJlbmNlXHRcdEEgY2hhcmFjdGVyIGxpa2UgKFxcKSB0aGF0IHByZWZpeGVzIG5vbi1kZWxpbSBjaGFyYWN0ZXJzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0Y29uc3RydWN0b3Ioc3RyLCBvcHRpb25zKSB7XHJcblx0XHRpZiAoIV9pc1N0cmluZyhzdHIpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignTGV4ZXIgcmVxdWlyZXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nLicpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kc3RyID0gc3RyO1xyXG5cdFx0dGhpcy4kb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0XHRpZiAoIXRoaXMuJG9wdGlvbnMuYmxvY2tzKSB7XHJcblx0XHRcdHRoaXMuJG9wdGlvbnMuYmxvY2tzID0gTGV4ZXIuJGJsb2NrcztcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy4kb3B0aW9ucy5xdW90ZXMpIHtcclxuXHRcdFx0dGhpcy4kb3B0aW9ucy5xdW90ZXMgPSBMZXhlci4kcXVvdGVzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLiRvcHRpb25zLmNvbW1lbnRzKSB7XHJcblx0XHRcdHRoaXMuJG9wdGlvbnMuY29tbWVudHMgPSBMZXhlci4kY29tbWVudHM7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBQYXJzZXMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycy5cclxuXHQgKlxyXG5cdCAqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIHN0YXRpYyBjYWxsaW5nLFxyXG5cdCAqIGluIHdoaWNoIGNhc2UgYSBzdHJpbmcgaXMgcmVxdWlyZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0bGV4KGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0dmFyIHJ1bnRpbWUgPSB7XHJcblx0XHRcdGRlbGltczogX2FyckZyb20oZGVsaW1zKSxcclxuXHRcdFx0b3B0aW9uczogX21lcmdlKHRydWUsIHt9LCB0aGlzLiRvcHRpb25zLCBvcHRpb25zIHx8IHt9KSxcclxuXHRcdFx0bmVzdGluZzogW10sXHJcblx0XHRcdG1heERlcHRoOiAwLFxyXG5cdFx0XHRjb21tZW50czogW10sXHJcblx0XHRcdHRva2VuczogW10sXHJcblx0XHRcdG1hdGNoZXM6IFtdLFxyXG5cdFx0XHRtYXRjaGVzaToge30sXHJcblx0XHR9O1xyXG5cdFx0Ly8gSXRlcmF0ZSBvdmVyIGVhY2ggY2hhcmFjdGVyLCBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgcm93IGFuZCBjb2x1bW4gKG9mIHRoZSByZXR1cm5lZCBhcnJheSlcclxuXHRcdHRoaXMuX2V2YWxDaGFyc0F0KHJ1bnRpbWUsIDApO1xyXG5cdFx0aWYgKHJ1bnRpbWUubmVzdGluZy5sZW5ndGgpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFcnJvciBwYXJzaW5nIHRoZSBzdHJpbmc6ICcgKyB0aGlzLiRzdHIgKyAnLiBVbnRlcm1pbmF0ZWQgYmxvY2tzOiAnICsgX2ZsYXR0ZW4ocnVudGltZS5uZXN0aW5nKS5qb2luKCcsICcpICsgJycpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gUkVUVVJOIE5FVyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRyZXR1cm4gcnVudGltZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cHIgaGVscGVyOiBldmFsdWF0ZXMgYW5kIGhhbmRsZXMgdGhlIGNoYXJhY3RlciBvbiB0aGUgY3VycmVudCBjdXJzb3IuXHJcblx0ICogQWR2YW5jZXMgdGhlIGN1cnNvci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRfZXZhbENoYXJzQXQocnVudGltZSwgaSkge1xyXG5cdFx0aWYgKGkgPj0gdGhpcy4kc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR2YXIgY2hhcldpZHRoID0gMTtcclxuXHRcdHZhciBjb21tZW50VGVzdCA9IHt9LCBxdW90ZVRlc3QgPSB7fSwgbmVzdGluZ1Rlc3QgPSB7fTtcclxuXHRcdC8vIFF1b3RlcyBpbnNpZGUgY29tbWVudHMgbXVzdCBiZSBpZ25vcmVkXHJcblx0XHRpZiAoIXJ1bnRpbWUub3BlbkNvbW1lbnQpIHtcclxuXHRcdFx0cXVvdGVUZXN0ID0gdGhpcy5fdGVzdFF1b3RlcyhydW50aW1lLCBpKTtcclxuXHRcdH1cclxuXHRcdC8vIENvbW1lbnRzIGluc2lkZSBxdW90ZXMgbXVzdCBiZSBpZ25vcmVkXHJcblx0XHRpZiAoIXJ1bnRpbWUub3BlblF1b3RlKSB7XHJcblx0XHRcdGNvbW1lbnRUZXN0ID0gdGhpcy5fdGVzdENvbW1lbnRzKHJ1bnRpbWUsIGkpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gU2F2ZSBjb21tZW50c1xyXG5cdFx0aWYgKHJ1bnRpbWUub3BlbkNvbW1lbnQgfHwgY29tbWVudFRlc3QuZW5kaW5nKSB7XHJcblx0XHRcdC8vIFNhdmUgb25seSBvdXRlciBjb21tZW50c1xyXG5cdFx0XHRpZiAoIXJ1bnRpbWUubmVzdGluZy5sZW5ndGggJiYgIW5lc3RpbmdUZXN0LmVuZGluZykge1xyXG5cdFx0XHRcdHZhciBjaGFycyA9IGNvbW1lbnRUZXN0LnN0YXJ0aW5nIHx8IGNvbW1lbnRUZXN0LmVuZGluZyB8fCB0aGlzLiRzdHJbaV07XHJcblx0XHRcdFx0Y2hhcldpZHRoID0gY2hhcnMubGVuZ3RoO1xyXG5cdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgY2hhcnMsICdjb21tZW50cycsIGNvbW1lbnRUZXN0LnN0YXJ0aW5nKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIHRoaXMuJHN0cltpXSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAocnVudGltZS5vcGVuUXVvdGUgfHwgcXVvdGVUZXN0LmVuZGluZykge1xyXG5cdFx0XHQvLyBZZXMgYWRkIHF1b3Rlc1xyXG5cdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIHRoaXMuJHN0cltpXSk7XHJcblx0XHR9IGVsc2UgaWYgKHJ1bnRpbWUub3B0aW9ucy5saW1pdCAmJiBydW50aW1lLm1hdGNoZXMubGVuZ3RoID09PSBydW50aW1lLm9wdGlvbnMubGltaXQpIHtcclxuXHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCB0aGlzLiRzdHJbaV0pO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fZXZhbENoYXJzQXQocnVudGltZSwgaSArIDEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gTmVzdGluZyB0YWdzIGluc2lkZSBjb21tZW50cyBhbmQgcXVvdGVzIGhhdmUgYmVlbiBpZ25vcmVkXHJcblx0XHRcdG5lc3RpbmdUZXN0ID0gdGhpcy5fdGVzdE5lc3RpbmcocnVudGltZSwgaSk7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBTVE9QIE9OIFRISVMgQ0hBUkFDVEVSLi4uP1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIG5lc3RpbmdUZXN0ID0gdGhpcy5fdGVzdE5lc3RpbmcocnVudGltZSwgaSk7XHJcblx0XHRcdC8vIFNUT1AgQ0hBUihTKT8gYXQgdG9wIGxldmVsP1xyXG5cdFx0XHR2YXIgc3RvcENoYXIgPSB0aGlzLl90ZXN0Q2hhcnMocnVudGltZS5vcHRpb25zLnN0b3BDaGFycyB8fCBbXSwgcnVudGltZSwgaSk7XHJcblx0XHRcdGlmICghcnVudGltZS5uZXN0aW5nLmxlbmd0aCAmJiBzdG9wQ2hhciAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRydW50aW1lLm9wdGlvbnMuc3RvcENoYXIgPSBzdG9wQ2hhcjtcclxuXHRcdFx0XHRydW50aW1lLm9wdGlvbnMuc3RvcENoYXJGb3J3YXJkID0gdGhpcy4kc3RyLnN1YnN0cihpKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIE1hdGNoIGFuZCBzcGxpdCBub3cuLi5cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmICghcnVudGltZS5kZWxpbXMubGVuZ3RoKSB7XHJcblx0XHRcdFx0Ly8gQkxPQ0stQkFTRUQgU1BMSVRUSU5HLi4uXHJcblx0XHRcdFx0aWYgKHJ1bnRpbWUubmVzdGluZy5sZW5ndGggPT09IDIgJiYgbmVzdGluZ1Rlc3Quc3RhcnRpbmcpIHtcclxuXHRcdFx0XHRcdHJ1bnRpbWUubWF0Y2hlcy5wdXNoKG51bGwpO1xyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCBuZXN0aW5nVGVzdC5zdGFydGluZyk7XHJcblx0XHRcdFx0XHRjaGFyV2lkdGggPSBuZXN0aW5nVGVzdC5zdGFydGluZy5sZW5ndGg7XHJcblx0XHRcdFx0fSBlbHNlIGlmICghcnVudGltZS5uZXN0aW5nLmxlbmd0aCAmJiBuZXN0aW5nVGVzdC5lbmRpbmcpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgbmVzdGluZ1Rlc3QuZW5kaW5nKTtcclxuXHRcdFx0XHRcdGNoYXJXaWR0aCA9IG5lc3RpbmdUZXN0LmVuZGluZy5sZW5ndGg7XHJcblx0XHRcdFx0XHRydW50aW1lLm1hdGNoZXMucHVzaChudWxsKTtcclxuXHRcdFx0XHR9IGVsc2UvKm5vLW5lc3RpbmcgZmxhZyovIHtcclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgdGhpcy4kc3RyW2ldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0Ly8gREVMSU1TLUJBU0VEIFNQTElUVElOR1xyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdGlmICghcnVudGltZS5uZXN0aW5nLmxlbmd0aCAmJiAhbmVzdGluZ1Rlc3QuZW5kaW5nKSB7XHJcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHRoZSBjaGFycyBhdCBpbmRleCAwIGlzIGEgZGVsaW0sXHJcblx0XHRcdFx0XHQvLyB0aGUgcmVzdWx0aW5nIHNwbGl0IHNob3VsZCBmaXJzdCBoYXZlIGFuIGVtcHR5IHN0cmluZywgaW5zdGVhZCBvZiB1bmRlZmluZWRcclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgJycpO1xyXG5cdFx0XHRcdFx0dmFyIG1hdGNoZWREZWxpbSA9IHRoaXMuX3Rlc3RDaGFycyhydW50aW1lLmRlbGltcywgcnVudGltZSwgaSk7XHJcblx0XHRcdFx0XHRpZiAobWF0Y2hlZERlbGltICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRydW50aW1lLm1hdGNoZXMucHVzaChtYXRjaGVkRGVsaW0pO1xyXG5cdFx0XHRcdFx0XHRydW50aW1lLm1hdGNoZXNpW2ldID0gbWF0Y2hlZERlbGltO1xyXG5cdFx0XHRcdFx0XHRjaGFyV2lkdGggPSBtYXRjaGVkRGVsaW0ubGVuZ3RoIHx8IDE7XHJcblx0XHRcdFx0XHRcdGlmICghcnVudGltZS5vcHRpb25zLnByZXNlcnZlRGVsaW1zKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhlIGN1cnJlbnQgY2hhcmFjdGVyIGlzIGEgZGVsaW1pdGVyLi4uXHJcblx0XHRcdFx0XHRcdFx0Ly8gYW5kIHNob3VsZCBub3QgZ2V0IHRvIGFwcGVuZGluZyB0byB0aGUgc3BsaXQgc2VyaWVzIGRvd24gdGhlIGxpbmVcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fZXZhbENoYXJzQXQocnVudGltZSwgaSArIChtYXRjaGVkRGVsaW0ubGVuZ3RoIHx8IDEpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCBtYXRjaGVkRGVsaW0gfHwgdGhpcy4kc3RyW2ldKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIGNoYXJzID0gbmVzdGluZ1Rlc3Quc3RhcnRpbmcgfHwgbmVzdGluZ1Rlc3QuZW5kaW5nIHx8IHRoaXMuJHN0cltpXTtcclxuXHRcdFx0XHRcdGNoYXJXaWR0aCA9IGNoYXJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgY2hhcnMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuX2V2YWxDaGFyc0F0KHJ1bnRpbWUsIGkgKyBjaGFyV2lkdGgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IHRlc3RzIGZvciBhIHF1b3RlIHN0YXJ0L2VuZCBjaGFyYWN0ZXIgb24gdGhlIGN1cnJlbnQgY3Vyc29yLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRfdGVzdFF1b3RlcyhydW50aW1lLCBpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0ge307XHJcblx0XHQocnVudGltZS5vcHRpb25zLnF1b3RlcyB8fCBbXSkuZm9yRWFjaChxdW90ZSA9PiB7XHJcblx0XHRcdGlmICh0aGlzLiRzdHIuc3Vic3RyKGksIDEpID09PSBxdW90ZSkge1xyXG5cdFx0XHRcdGlmICghcnVudGltZS5vcGVuUXVvdGUpIHtcclxuXHRcdFx0XHRcdHJ1bnRpbWUub3BlblF1b3RlID0gcXVvdGU7XHJcblx0XHRcdFx0XHRyZXN1bHQuc3RhcnRpbmcgPSBxdW90ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHF1b3RlID09PSBydW50aW1lLm9wZW5RdW90ZSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5vcGVuUXVvdGUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHJlc3VsdC5lbmRpbmcgPSBxdW90ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cHIgaGVscGVyOiB0ZXN0cyBmb3IgYSBjb21tZW50IHN0YXJ0L2VuZCBjaGFyYWN0ZXIgb24gdGhlIGN1cnJlbnQgY3Vyc29yLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRfdGVzdENvbW1lbnRzKHJ1bnRpbWUsIGkpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdChydW50aW1lLm9wdGlvbnMuY29tbWVudHMgfHwgW10pLmZvckVhY2goYmxvY2sgPT4ge1xyXG5cdFx0XHRpZiAoIXJ1bnRpbWUub3BlbkNvbW1lbnQpIHtcclxuXHRcdFx0XHR2YXIgc3RhcnRpbmcgPSBfZmlyc3QoYmxvY2spO1xyXG5cdFx0XHRcdGlmICh0aGlzLiRzdHIuc3Vic3RyKGkpLnN0YXJ0c1dpdGgoc3RhcnRpbmcpKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm9wZW5Db21tZW50ID0gYmxvY2s7XHJcblx0XHRcdFx0XHRyZXN1bHQuc3RhcnRpbmcgPSBzdGFydGluZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoX2xhc3QoYmxvY2spID09PSBfbGFzdChydW50aW1lLm9wZW5Db21tZW50KSkge1xyXG5cdFx0XHRcdHZhciBlbmRpbmcgPSBfbGFzdChibG9jayk7XHJcblx0XHRcdFx0aWYgKHRoaXMuJHN0ci5zdWJzdHIoaSkuc3RhcnRzV2l0aChlbmRpbmcpKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm9wZW5Db21tZW50ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRyZXN1bHQuZW5kaW5nID0gZW5kaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IHRlc3RzIGZvciBhIG5lc3Rpbmcgc3RhcnQvZW5kIGNoYXJhY3RlciBvbiB0aGUgY3VycmVudCBjdXJzb3IuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdF90ZXN0TmVzdGluZyhydW50aW1lLCBpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0ge307XHJcblx0XHQocnVudGltZS5vcHRpb25zLmJsb2NrcyB8fCBbXSkuZm9yRWFjaChibG9jayA9PiB7XHJcblx0XHRcdHZhciBzdGFydGluZyA9IF9maXJzdChibG9jayk7XHJcblx0XHRcdGlmICh0aGlzLiRzdHIuc3Vic3RyKGkpLnN0YXJ0c1dpdGgoc3RhcnRpbmcpKSB7XHJcblx0XHRcdFx0cnVudGltZS5uZXN0aW5nID0gcnVudGltZS5uZXN0aW5nLmNvbmNhdChbYmxvY2tdKTtcclxuXHRcdFx0XHRyZXN1bHQuc3RhcnRpbmcgPSBzdGFydGluZztcclxuXHRcdFx0fSBlbHNlIGlmIChydW50aW1lLm5lc3RpbmcubGVuZ3RoICYmIF9sYXN0KGJsb2NrKSA9PT0gX2xhc3QoX2xhc3QocnVudGltZS5uZXN0aW5nKSkpIHtcclxuXHRcdFx0XHR2YXIgZW5kaW5nID0gX2xhc3QoYmxvY2spO1xyXG5cdFx0XHRcdGlmICh0aGlzLiRzdHIuc3Vic3RyKGkpLnN0YXJ0c1dpdGgoZW5kaW5nKSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5uZXN0aW5nID0gcnVudGltZS5uZXN0aW5nLnNsaWNlKDAsIC0xKTtcclxuXHRcdFx0XHRcdHJlc3VsdC5lbmRpbmcgPSBlbmRpbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJ1bnRpbWUubWF4RGVwdGggPSBNYXRoLm1heChydW50aW1lLm1heERlcHRoLCBydW50aW1lLm5lc3RpbmcubGVuZ3RoKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogdGVzdHMgZm9yIGEgZGVsaW1pdGVyIG9yIHN0b3AgY2hhcmFjdGVyIG9uIHRoZSBjdXJyZW50IGN1cnNvci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHR0ZXN0TGlzdFxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0X3Rlc3RDaGFycyh0ZXN0TGlzdCwgcnVudGltZSwgaSkge1xyXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCB0ZXN0TGlzdC5sZW5ndGg7IGsgKyspIHtcclxuXHRcdFx0dmFyIHRlc3QgPSB0ZXN0TGlzdFtrXTtcclxuXHRcdFx0aWYgKF9pc0Z1bmN0aW9uKHRlc3QpKSB7XHJcblx0XHRcdFx0dmFyIHJldCA9IHRlc3QodGhpcy4kc3RyLnN1YnN0cigwLCBpKSwgdGhpcy4kc3RyLnN1YnN0cihpKSk7XHJcblx0XHRcdFx0aWYgKHJldCAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChydW50aW1lLm9wdGlvbnMudXNlUmVnZXgpIHtcclxuXHRcdFx0XHR2YXIgbSA9IHRoaXMuJHN0ci5zdWJzdHIoaSkubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyB0ZXN0LCBydW50aW1lLm9wdGlvbnMudXNlUmVnZXggIT09IHRydWUgPyBydW50aW1lLm9wdGlvbnMudXNlUmVnZXggOiAnJykpO1xyXG5cdFx0XHRcdGlmIChtKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbVswXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCghcnVudGltZS5vcHRpb25zLmNpICYmIHRoaXMuJHN0ci5zdWJzdHIoaSwgdGVzdC5sZW5ndGgpID09PSB0ZXN0KVxyXG5cdFx0XHR8fCAocnVudGltZS5vcHRpb25zLmNpICYmIHRoaXMuJHN0ci5zdWJzdHIoaSwgdGVzdC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHRlc3QudG9Mb3dlckNhc2UoKSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGVzdDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogcHVzaGVzIGEgY2hhcmFjdGVyIG9yIHNldCBvZiBjaGFyYWN0ZXJzIGludG8gdGhlIGN1cnJlbnQgc3BsaXQgc2VyaWVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBcdHJ1bnRpbWVcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRjaGFyc1xyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdGlzTmV3U2VyaWVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRfcHVzaChydW50aW1lLCBjaGFycywgdGFyZ2V0ID0gJ3Rva2VucycsIGlzTmV3U2VyaWVzID0gZmFsc2UpIHtcclxuXHRcdHZhciBzcGxpdFNlcmllcyA9IHJ1bnRpbWUubWF0Y2hlcy5sZW5ndGg7XHJcblx0XHRpZiAoX2lzVW5kZWZpbmVkKHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSkpIHtcclxuXHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdID0gJyc7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gJ2NvbW1lbnRzJykge1xyXG5cdFx0XHRpZiAoIXJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50cykge1xyXG5cdFx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSA9IG5ldyBTdHJpbmcocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdKTtcclxuXHRcdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgc3BsaXRTZXJpZXMyID0gcnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzLmxlbmd0aCAtICghcnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzLmxlbmd0aCB8fCBpc05ld1NlcmllcyA/IDAgOiAxKTtcclxuXHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzW3NwbGl0U2VyaWVzMl0gPSAocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzW3NwbGl0U2VyaWVzMl0gfHwgJycpICsgY2hhcnM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgY29tbWVudHMgPSBydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHM7XHJcblx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSA9IG5ldyBTdHJpbmcocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdICsgY2hhcnMpO1xyXG5cdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHMgPSBjb21tZW50cztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNwbGl0cyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIGFuZCByZXR1cm5zIHRoZSB0b2tlbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdHNwbGl0KHN0ciwgZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXgoZGVsaW1zLCBvcHRpb25zKS50b2tlbnM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNwbGl0cyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIGFuZCByZXR1cm5zIHRoZSBtYXRjaGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnM6XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0bWF0Y2goc3RyLCBkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLmxleChkZWxpbXMsIG9wdGlvbnMpLm1hdGNoZXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIHVzaW5nIHJlZ2V4LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0cmVnUGFyc2UoZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXgoZGVsaW1zLCBfbWVyZ2Uoe3VzZVJlZ2V4OiB0cnVlfSwgb3B0aW9ucyB8fCB7fSkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTcGxpdHMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycyB1c2luZyByZWdleDsgcmV0dXJucyB0aGUgdG9rZW5zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRyZWdTcGxpdChkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlZ1BhcnNlKGRlbGltcywgb3B0aW9ucykudG9rZW5zO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBNYXRjaGVzIHRoZSBpbnN0YW5jZSBzdHJpbmcgb24gdGhlIGdpdmVuIGRlbGltZXRlcnMgdXNpbmcgcmVnZXg7IHJldHVybnMgdGhlIG1hdGNoZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdHJlZ01hdGNoKGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVnUGFyc2UoZGVsaW1zLCBvcHRpb25zKS5tYXRjaGVzO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kYmxvY2tzID0gW1snKCcsICcpJ10sIFsnWycsICddJ10sIFsneycsICd9J10sXTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kcXVvdGVzID0gWydcIicsIFwiJ1wiLCAnYCcsXTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kY29tbWVudHMgPSBbWycvKicsICcqLyddLCBbJy8vJywgXCJcXG5cIl0sXTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIG9iamVjdFxyXG4gKi9cclxuTGV4ZXIuJGNhY2hlID0ge307XHJcblxyXG4vKipcclxuICogQGV4cG9ydFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgTGV4ZXI7XHJcblxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZXh0cyB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgY29udGV4dCBzdGFjay5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhbnlcdFx0IFx0bWFpbkNvbnRleHRcclxuXHQgKiBAcGFyYW0gQ29udGV4dHNcdCBcdHN1cGVyQ29udGV4dFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdCBcdGxvY2FsQ29udGV4dFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdCBcdGxvY2FsQ29udGV4dE1ldGFcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29udGV4dHNcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihtYWluQ29udGV4dCwgc3VwZXJDb250ZXh0ID0gbnVsbCwgbG9jYWxDb250ZXh0ID0ge30sIGxvY2FsQ29udGV4dE1ldGEgPSB7fSkge1xyXG5cdFx0dGhpcy5tYWluQ29udGV4dCA9IG1haW5Db250ZXh0O1xyXG5cdFx0dGhpcy5zdXBlckNvbnRleHQgPSBzdXBlckNvbnRleHQgPyBDb250ZXh0cy5jcmVhdGUoc3VwZXJDb250ZXh0KSA6IG51bGw7XHJcblx0XHR0aGlzLmxvY2FsQ29udGV4dCA9IGxvY2FsQ29udGV4dFxyXG5cdFx0dGhpcy5sb2NhbENvbnRleHRNZXRhID0gbG9jYWxDb250ZXh0TWV0YVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUcmllcyB0aGUgaGFuZGxlciBvbiB0aGUgZGlmZmVyZW50IGNvbnRleHRzIGluIHRoZSBzdGFjay5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIFx0cHJvcFxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRjYWxsYmFja1xyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRmaW5hbFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb250ZXh0c1xyXG5cdCAqL1xyXG5cdGhhbmRsZShwcm9wLCBjYWxsYmFjaywgZmluYWwsIGxldmVsID0gMCkge1xyXG5cdFx0dmFyIGNhbGxNYWluID0gKCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gY2FsbGJhY2sodGhpcy5tYWluQ29udGV4dCwgbnVsbCwgKCkgPT4ge1xyXG5cdFx0XHRcdGlmICh0aGlzLnN1cGVyQ29udGV4dCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuc3VwZXJDb250ZXh0LmhhbmRsZShwcm9wLCBjYWxsYmFjaywgZmluYWwsIGxldmVsICsgMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChmaW5hbCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZpbmFsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBsZXZlbCk7XHJcblx0XHR9O1xyXG5cdFx0aWYgKHByb3AgPT09ICd0b1N0cmluZycgJiYgdGhpcy5sb2NhbENvbnRleHQudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcclxuXHRcdFx0cmV0dXJuIGNhbGxNYWluKCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2FsbGJhY2sodGhpcy5sb2NhbENvbnRleHQsIHRoaXMubG9jYWxDb250ZXh0TWV0YSwgY2FsbE1haW4sIGxldmVsKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYSBwcm9wZXJ0eSdzIHZhbHVlIGZyb20gdGhlIGZpcnN0IHBvc3Nlc3NpbmcgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHRcdGJpbmRUaGlzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0Z2V0KHByb3AsIHRyYXAgPSB7fSwgYmluZFRoaXMgPSB0cnVlKSB7XHJcblx0XHRpZiAocHJvcCBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AgPSBwcm9wICsgJyc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUocHJvcCwgKGNvbnR4dE9iaiwgY29udHh0TWV0YSwgYWR2YW5jZSwgbGV2ZWwpID0+IHtcclxuXHRcdFx0dmFyIHZhbCA9IF9nZXQoY29udHh0T2JqLCBwcm9wLCB0cmFwKTtcclxuXHRcdFx0Ly8gYXNraW5nIGZpcnN0IG11Z2h0IG5vdCBnbyB3ZWxsIGdlbmVyYWxseSAmJiBfaGFzKHRoaXNbaV0sIHByb3AsIHRyYXApXHJcblx0XHRcdGlmICghX2lzVW5kZWZpbmVkKHZhbCkgfHwgX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0aWYgKF9pc0Z1bmN0aW9uKHZhbCkgJiYgYmluZFRoaXMpIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWwuYmluZChjb250eHRPYmopO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhZHZhbmNlKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyBhIHByb3BlcnR5J3MgdmFsdWUgZnJvbSB0aGUgZmlyc3QgcG9zc2Vzc2luZyBjb250ZXh0LlxyXG5cdCAqIE9yIGFkZHMgYSBuZXcgY29udGV4dCB0byBzZXQgdGhlIHByb3BlcnR5LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcFxyXG5cdCAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0dHJhcFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0aW5pdEtleXdvcmRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdHNldChwcm9wLCB2YWwsIHRyYXAgPSB7fSwgaW5pdEtleXdvcmQgPSBmYWxzZSkge1xyXG5cdFx0aWYgKHByb3AgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wID0gcHJvcCArICcnO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgX3NldCA9IChjbnR4dCwgcHJvcCwgdmFsLCB0cmFwKSA9PiB7XHJcblx0XHRcdGlmICh0cmFwLnNldCkge1xyXG5cdFx0XHRcdHJldHVybiB0cmFwLnNldChjbnR4dCwgcHJvcCwgdmFsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjbnR4dFtwcm9wXSA9IHZhbDtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlKGluaXRLZXl3b3JkID8gdHJ1ZSA6IHByb3AsIChjb250eHRPYmosIGxvY2FsQ29udHh0TWV0YSwgYWR2YW5jZSkgPT4ge1xyXG5cdFx0XHQvLyBXaGF0ZXZlciB0aGUgbGV2ZWwgb2YgbG9jYWxDb250ZXh0Li4uXHJcblx0XHRcdGlmIChsb2NhbENvbnR4dE1ldGEgJiYgbG9jYWxDb250eHRNZXRhW3Byb3BdID09PSAnY29uc3QnKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDT05TVCAnICsgcHJvcCArICdjYW5ub3QgYmUgbW9kaWZpZWQhJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gU2V0IHRoaXMgbG9jYWxseSwgd2Ugd29udCBiZSBnZXR0aW5nIHRvIGFkdmFuY2UoKVxyXG5cdFx0XHRpZiAoaW5pdEtleXdvcmQpIHtcclxuXHRcdFx0XHRpZiAoIVsndmFyJywgJ2xldCcsICdjb25zdCddLmluY2x1ZGVzKGluaXRLZXl3b3JkKSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgZGVjbGFyYXRvcjogJyArIGluaXRLZXl3b3JkICsgJyEnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bG9jYWxDb250eHRNZXRhW3Byb3BdID0gaW5pdEtleXdvcmQ7XHJcblx0XHRcdFx0cmV0dXJuIF9zZXQoY29udHh0T2JqLCBwcm9wLCB2YWwsIHRyYXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIEZvciBhbnkgb3RoZXIgY29udGV4LCBpdCBtdXN0IGFscmVhZHkgZXhpc3RzXHJcblx0XHRcdGlmIChfaGFzKGNvbnR4dE9iaiwgcHJvcCwgdHJhcCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gX3NldChjb250eHRPYmosIHByb3AsIHZhbCwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0sICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHByb3AgKyAnXCIgaXMgdW5kZWZpbmVkIScpO30pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBEZWxldGVzIGEgcHJvcGVydHkgZnJvbSB0aGUgZmlyc3QgcG9zc2Vzc2luZyBjb250ZXh0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0dHJhcFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0ZGVsKHByb3AsIHRyYXAgPSB7fSkge1xyXG5cdFx0aWYgKHByb3AgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wID0gcHJvcCArICcnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlKHByb3AsIChjb250eHRPYmosIGNvbnR4dE1ldGEsIGFkdmFuY2UpID0+IHtcclxuXHRcdFx0aWYgKF9oYXMoY29udHh0T2JqLCBwcm9wLCB0cmFwKSkge1xyXG5cdFx0XHRcdGlmICh0cmFwLmRlbGV0ZVByb3BlcnR5IHx8IHRyYXAuZGVsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKHRyYXAuZGVsZXRlUHJvcGVydHkgfHwgdHJhcC5kZWwpKGNvbnR4dE9iaiwgcHJvcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRlbGV0ZSBjb250eHRPYmpbcHJvcF07XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGVzdHMgaWYgYSBwcm9wZXJ0eSBleGlzdHMgaW4gYW55IGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcDJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGhhcyhwcm9wLCBwcm9wMiwgdHJhcCA9IHt9KSB7XHJcblx0XHRpZiAocHJvcCBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AgPSBwcm9wICsgJyc7XHJcblx0XHR9XHJcblx0XHRpZiAocHJvcDIgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wMiA9IHByb3AyICsgJyc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUocHJvcCwgKGNvbnR4dE9iaiwgY29udHh0TWV0YSwgYWR2YW5jZSkgPT4ge1xyXG5cdFx0XHRpZiAoX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0dmFyIGNvbnRleHRPYmoyID0gX2dldChjb250eHRPYmosIHByb3AsIHRyYXApO1xyXG5cdFx0XHRcdHJldHVybiBfaGFzKGNvbnRleHRPYmoyLCBwcm9wMiwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0sICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHByb3AgKyAnXCIgaXMgdW5kZWZpbmVkIScpO30pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUZXN0cyBpZiBhIHByb3BlcnR5IGV4aXN0cyBpbiBhbnkgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRhcmdzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHR0cmFwXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0ZXhlYyhwcm9wLCBhcmdzLCB0cmFwID0ge30pIHtcclxuXHRcdGlmIChwcm9wIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcblx0XHRcdC8vIGluY2FzZSB3ZSByZWNpZXZlZCBuZXcgU3RyaW5nKClcclxuXHRcdFx0cHJvcCA9IHByb3AgKyAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZShwcm9wLCAoY29udHh0T2JqLCBjb250eHRNZXRhLCBhZHZhbmNlKSA9PiB7XHJcblx0XHRcdHZhciBmbiA9IF9nZXQoY29udHh0T2JqLCBwcm9wLCB0cmFwKTtcclxuXHRcdFx0aWYgKCFfaXNVbmRlZmluZWQoZm4pIHx8IF9oYXMoY29udHh0T2JqLCBwcm9wLCB0cmFwKSkge1xyXG5cdFx0XHRcdGlmICghX2lzRnVuY3Rpb24oZm4pKSB7XHJcblx0XHRcdFx0XHRpZiAodHJhcC5leGVjKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cmFwLmV4ZWMoY29udHh0T2JqLCBwcm9wLCBhcmdzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCInICsgcHJvcCArICdcIiBpcyBub3QgYSBmdW5jdGlvbiEgKENhbGxlZCBvbiB0eXBlOiAnICsgdHlwZW9mIGNvbnR4dE9iaiArICcuKScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodHJhcC5hcHBseSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRyYXAuYXBwbHkoZm4sIGNvbnR4dE9iaiwgYXJncyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmbi5hcHBseShjb250eHRPYmosIGFyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhZHZhbmNlKCk7XHJcblx0XHR9LCAoKSA9PiB7XHJcblx0XHRcdGlmICh0cmFwLmV4ZWNVbmtub3duKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRyYXAuZXhlY1Vua25vd24odGhpcywgcHJvcCwgYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyBwcm9wICsgJygpXCIgaXMgdW5kZWZpbmVkIScpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgbWFraW5nIGEgQ29udGV4dHMgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0Y250eHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29udGV4dHNcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlKGNudHh0KSB7XHJcblx0XHRyZXR1cm4gY250eHQgaW5zdGFuY2VvZiBDb250ZXh0cyA/IGNudHh0IDogbmV3IENvbnRleHRzKGNudHh0KTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBfZ2V0ID0gKGNudHh0LCBwcm9wLCB0cmFwKSA9PiB0cmFwLmdldCA/IHRyYXAuZ2V0KGNudHh0LCBwcm9wKSBcclxuXHQ6ICgoX2lzVHlwZU9iamVjdChjbnR4dCkgJiYgY250eHQpIHx8IF9pc1N0cmluZyhjbnR4dCkgfHwgX2lzTnVtYmVyKGNudHh0KSA/IGNudHh0W3Byb3BdIDogdW5kZWZpbmVkKTs7XHJcblxyXG5jb25zdCBfaGFzID0gKGNudHh0LCBwcm9wLCB0cmFwKSA9PiB0cmFwLmhhcyA/IHRyYXAuaGFzKGNudHh0LCBwcm9wKSA6IChcclxuXHRfaXNUeXBlT2JqZWN0KGNudHh0KSAmJiBjbnR4dCA/IHByb3AgaW4gY250eHQgOiAhX2lzVW5kZWZpbmVkKGNudHh0W3Byb3BdKVxyXG4pO1xyXG5cclxuY2xhc3MgTG9jYWxDb250ZXh0IHt9OyIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdGhlIHN0cmluZyBpcyB3YXJhcHBlZCB3aXRoIHRoZSBnaXZlbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBvcGVuaW5nVGFnXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBjbG9zaW5nVGFnXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgb3BlbmluZ1RhZywgY2xvc2luZ1RhZykge1xyXG5cdHJldHVybiBzdWJqZWN0LnN0YXJ0c1dpdGgob3BlbmluZ1RhZykgJiYgc3ViamVjdC5lbmRzV2l0aChjbG9zaW5nVGFnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHJlbWFpbmRlciBvZiBhIHN0cmluZyBhZnRlciBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqIEBwYXJhbSAgYm9vbFx0ICAgYWZ0ZXJMYXN0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gsIGFmdGVyTGFzdCA9IGZhbHNlKSB7XHJcblx0aWYgKHNlYXJjaCA9PSAnJykge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHZhciBwb3MgPSBhZnRlckxhc3QgPyBzdWJqZWN0Lmxhc3RJbmRleE9mKHNlYXJjaCkgOiBzdWJqZWN0LmluZGV4T2Yoc2VhcmNoKTtcclxuXHRpZiAocG9zID09PSAtMSkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHRyZXR1cm4gc3ViamVjdC5zdWJzdHIocG9zICsgc2VhcmNoLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSBwYXJ0IG9mIGEgc3RyaW5nIGJlZm9yZSBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqIEBwYXJhbSAgYm9vbFx0ICAgYmVmb3JlTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBiZWZvcmVMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGJlZm9yZUxhc3QgPyBzdWJqZWN0Lmxhc3RJbmRleE9mKHNlYXJjaCkgOiBzdWJqZWN0LmluZGV4T2Yoc2VhcmNoKTtcclxuXHRpZiAocG9zID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cigwLCBwb3MpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FmdGVyIGZyb20gJy4vYWZ0ZXIuanMnO1xyXG5pbXBvcnQgX2JlZm9yZUxhc3QgZnJvbSAnLi9iZWZvcmVMYXN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgd2l0aG91dCB0aGUgZ2l2ZW4gb3BlbmluZyBhbmQgY2xvc2luZyB0YWdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgb3BlbmluZ1RhZ1xyXG4gKiBAcGFyYW0gIHN0cmluZyAgY2xvc2luZ1RhZ1xyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgb3BlbmluZ1RhZywgY2xvc2luZ1RhZykge1xyXG5cdHJldHVybiBfYmVmb3JlTGFzdChfYWZ0ZXIoc3ViamVjdCwgb3BlbmluZ1RhZyksIGNsb3NpbmdUYWcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICcuL2JlZm9yZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBwYXJ0IG9mIGEgc3RyaW5nIGJlZm9yZSBsYXN0IG9jY3VyZW5jZSBvZiBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gpIHtcclxuXHRyZXR1cm4gX2JlZm9yZShzdWJqZWN0LCBzZWFyY2gsIHRydWUpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQWJzdHJhY3Rpb25JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Fic3RyYWN0aW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgQWJzdHJhY3Rpb25JbnRlcmZhY2UgZnJvbSAnLi9BYnN0cmFjdGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFic3RyYWN0aW9uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQWJzdHJhY3Rpb24gPSBjbGFzcyBleHRlbmRzIEFic3RyYWN0aW9uSW50ZXJmYWNlIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihleHByKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5leHByID0gZXhwcjtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHByLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiAnKCcgKyB0aGlzLmV4cHIudG9TdHJpbmcoY29udGV4dCkgKyAnKSc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEFic3RyYWN0aW9uKSB7XHJcblx0XHRpZiAoX3dyYXBwZWQoZXhwciwgJygnLCAnKScpICYmICFMZXhlci5tYXRjaChleHByLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soX3Vud3JhcChleHByLCAnKCcsICcpJykpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdGlvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFyckludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQXJyYXlUeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgQXJySW50ZXJmYWNlIGZyb20gJy4vQXJySW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXJyYXkgdXRpbHNcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBBcnIgPSBjbGFzcyBleHRlbmRzIEFyckludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihleHBycykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZXhwcnMgPSBleHBycyB8fCBbXTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRpbmhlcml0KFN1cGVyKSB7XHJcblx0XHRpZiAoU3VwZXIgaW5zdGFuY2VvZiBBcnJJbnRlcmZhY2UpIHtcclxuXHRcdFx0dmFyIG5ld0V4cHJzID0gU3VwZXIuZXhwcnMuZmlsdGVyKGV4cHJBID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5leHBycy5yZWR1Y2UoKHVuaXF1ZVNvRmFyLCBleHByQikgPT4gdW5pcXVlU29GYXIgJiYgIWV4cHJBLmV2ZW4oZXhwckIpLCB0cnVlKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHRoaXMuZXhwcnMgPSBuZXdFeHBycy5jb25jYXQodGhpcy5leHBycyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHBycy5tYXAoZXhwciA9PiBleHByLmV2YWwoY29udGV4dCwgdHJhcCkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gJ1snICsgdGhpcy5leHBycy5tYXAoZXhwciA9PiBleHByLnRvU3RyaW5nKGNvbnRleHQpKS5qb2luKCcsICcpICsgJ10nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBBcnIpIHtcclxuXHRcdGlmIChfd3JhcHBlZChleHByLCAnWycsICddJykgJiYgIUxleGVyLm1hdGNoKGV4cHIudHJpbSgpLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBzcGxpdHMgPSBMZXhlci5zcGxpdChfdW53cmFwKGV4cHIsICdbJywgJ10nKSwgWycsJ10pXHJcblx0XHRcdFx0Lm1hcChuID0+IG4udHJpbSgpKS5maWx0ZXIobiA9PiBuKS5tYXAoZXhwciA9PiBwYXJzZUNhbGxiYWNrKGV4cHIpKTtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoc3BsaXRzKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQXJyO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXJndW1lbnRzSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdBcmd1bWVudHMnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBBcmd1bWVudHNJbnRlcmZhY2UgZnJvbSAnLi9Bcmd1bWVudHNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBcmd1bWVudHMgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBBcmd1bWVudHMgPSBjbGFzcyBleHRlbmRzIEFyZ3VtZW50c0ludGVyZmFjZSB7XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IobGlzdCA9IFtdKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5saXN0ID0gbGlzdDtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5saXN0Lm1hcChhcmcgPT4gYXJnLmV2YWwoY29udGV4dCwgdHJhcCkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gJygnICsgdGhpcy5saXN0Lm1hcChhcmcgPT4gYXJnLnRvU3RyaW5nKGNvbnRleHQpKS5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBBcmd1bWVudHMpIHtcclxuXHRcdHZhciBhcmdzOyBleHByID0gZXhwci50cmltKCk7XHJcblx0XHRpZiAoX3dyYXBwZWQoZXhwciwgJygnLCAnKScpICYmICFMZXhlci5tYXRjaChleHByLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdExleGVyLnNwbGl0KF91bndyYXAoZXhwciwgJygnLCAnKScpLCBbJywnXSkubWFwKGFyZyA9PiBwYXJzZUNhbGxiYWNrKGFyZy50cmltKCkpKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQXJndW1lbnRzO1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIHVuaXF1ZSBpdGVtcy5cclxuICpcclxuICogQHBhcmFtIGFycmF5XHQgXHRcdFx0XHRhcnJcclxuICpcdCAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycikge1xyXG5cdGNvbnN0IGRpc3RpbmN0ID0gKHZhbHVlLCBpbmRleCwgc2VsZikgPT4ge1xyXG5cdFx0cmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xyXG5cdH07XHJcblx0cmV0dXJuIGFyci5maWx0ZXIoZGlzdGluY3QpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXNzZXJ0aW9uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdBc3NlcnRpb25FeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9maXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IEFzc2VydGlvbkludGVyZmFjZSBmcm9tICcuL0Fzc2VydGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFzc2VydGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEFzc2VydGlvbiA9IGNsYXNzIGV4dGVuZHMgQXNzZXJ0aW9uSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihleHBycywgbG9naWMpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmV4cHJzID0gZXhwcnM7XHJcblx0XHR0aGlzLmxvZ2ljID0gbG9naWM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdCBldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdGlmICh0aGlzLmxvZ2ljID09PSAnIScpIHtcclxuXHRcdFx0cmV0dXJuICFfZmlyc3QodGhpcy5leHBycykuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHZhciBvcGVyYXRvcnMgPSBfZmxhdHRlbihBc3NlcnRpb24ub3BlcmF0b3JzKTtcclxuXHRcdHZhciBsb2dpYyA9ICh0aGlzLmxvZ2ljIHx8ICcnKS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuXHRcdHZhciBpc09yID0gbG9naWMgPT09IChBc3NlcnRpb24ub3BlcmF0b3JzLm9yIHx8ICcnKS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuXHRcdHZhciBpc05vciA9IGxvZ2ljID09PSAoQXNzZXJ0aW9uLm9wZXJhdG9ycy5ub3IgfHwgJycpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dmFyIGlzQW5kID0gbG9naWMgPT09IChBc3NlcnRpb24ub3BlcmF0b3JzLmFuZCB8fCAnJykudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgaXNOYW5kID0gbG9naWMgPT09IChBc3NlcnRpb24ub3BlcmF0b3JzLm5hbmQgfHwgJycpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dmFyIGxhc3RSZXN1bHQgPSB0cnVlLCB0cnVlcyA9IDA7XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5leHBycy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdFx0bGFzdFJlc3VsdCA9IHRoaXMuZXhwcnNbaV0uZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0aWYgKGlzQW5kICYmICFsYXN0UmVzdWx0KSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChpc05hbmQgJiYgIWxhc3RSZXN1bHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNPciAmJiBsYXN0UmVzdWx0KSB7XHJcblx0XHRcdFx0cmV0dXJuIGxhc3RSZXN1bHQ7XHJcblx0XHRcdH1cclxuXHRcdFx0dHJ1ZXMgKz0gbGFzdFJlc3VsdCA/IDEgOiAwO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGlzT3IpIHtcclxuXHRcdFx0Ly8gV2hpY2ggaXMgZmFsc2V5LFxyXG5cdFx0XHQvLyBieSB2aXJ0dWUgb2YgZ2V0dGluZyBoZXJlXHJcblx0XHRcdHJldHVybiBsYXN0UmVzdWx0O1xyXG5cdFx0fVxyXG5cdFx0aWYgKGlzQW5kIHx8IGlzTmFuZCkge1xyXG5cdFx0XHQvLyBGb3IgQU5EIGFuZCBOQU5ELCBhbGwgZW50cmllcyBtdXN0IGJlIHRydWUgYnkgbm93LFxyXG5cdFx0XHQvLyBieSB2aXJ0dWUgb2YgZ2V0dGluZyBoZXJlLlxyXG5cdFx0XHQvLyBGb3IgQU5ELCB0aGlzIG1lYW5zIHRydWU7IGZvciBOQU5ELCBmYWxzZVxyXG5cdFx0XHRyZXR1cm4gaXNBbmQ7XHJcblx0XHR9XHJcblx0XHQvLyBGb3IgTk9SLCBhbGwgZW50cmllcyBuZWVkIHRvIGJlIGZhbHNlXHJcblx0XHRyZXR1cm4gaXNOb3IgJiYgdHJ1ZXMgPT09IDA7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0IHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRpZiAodGhpcy5sb2dpYyA9PT0gJyEnKSB7XHJcblx0XHRcdHJldHVybiAnIScgKyBfZmlyc3QodGhpcy5leHBycykudG9TdHJpbmcoY29udGV4dCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5leHBycy5tYXAoZXhwciA9PiBleHByLnRvU3RyaW5nKGNvbnRleHQpKS5qb2luKCcgJyArIHRoaXMubG9naWMgKyAnICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBBc3NlcnRpb24pIHtcclxuXHRcdGlmIChleHByLnN0YXJ0c1dpdGgoJyEnKSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRbcGFyc2VDYWxsYmFjayhleHByLnN1YnN0cigxKSldLFxyXG5cdFx0XHRcdCchJ1xyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIF9mbGF0dGVuKFN0YXRpYy5vcGVyYXRvcnMpKTtcclxuXHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID4gMSkge1xyXG5cdFx0XHR2YXIgbG9naWMgPSBfdW5pcXVlKHBhcnNlLm1hdGNoZXMpO1xyXG5cdFx0XHRpZiAobG9naWMubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCJBTkRcIiBhbmQgXCJPUlwiIGxvZ2ljIGNhbm5vdCBiZSBhc3NlcnRlZCBpbiB0aGUgc2FtZSBleHByZXNzaW9uOiAnICsgZXhwciArICchJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2UudG9rZW5zLm1hcChleHByID0+IHBhcnNlQ2FsbGJhY2soZXhwci50cmltKCkpKSxcclxuXHRcdFx0XHRfZmlyc3QobG9naWMpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIG9iamVjdFxyXG4gKi9cclxuQXNzZXJ0aW9uLm9wZXJhdG9ycyA9IHtcclxuXHRhbmQ6ICcmJicsXHJcblx0b3I6ICd8fCcsXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFzc2VydGlvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFzc2lnbm1lbnRJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMnO1xyXG5pbXBvcnQgX2FmdGVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IEFzc2lnbm1lbnRJbnRlcmZhY2UgZnJvbSAnLi9Bc3NpZ25tZW50SW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFzc2lnbm1lbnQgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBBc3NpZ25tZW50ID0gY2xhc3MgZXh0ZW5kcyBBc3NpZ25tZW50SW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihpbml0S2V5d29yZCwgcmVmZXJlbmNlLCB2YWwsIG9wZXJhdG9yID0gJz0nKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5pbml0S2V5d29yZCA9IGluaXRLZXl3b3JkO1xyXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XHJcblx0XHR0aGlzLnZhbCA9IHZhbDtcclxuXHRcdHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdHZhciB2YWwgPSB0aGlzLnZhbC5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0aWYgKCFfaXNVbmRlZmluZWQocmVmZXJlbmNlLmNvbnRleHQpICYmICFfaXNVbmRlZmluZWQocmVmZXJlbmNlLm5hbWUpKSB7XHJcblx0XHRcdHJldHVybiBDb250ZXh0cy5jcmVhdGUocmVmZXJlbmNlLmNvbnRleHQpLnNldChyZWZlcmVuY2UubmFtZSwgdmFsLCB0cmFwLCB0aGlzLmluaXRLZXl3b3JkKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gKHRoaXMuaW5pdEtleXdvcmQgPyB0aGlzLmluaXRLZXl3b3JkICsgJyAnIDogJycpXHJcblx0XHRcdCsgW3RoaXMucmVmZXJlbmNlLnRvU3RyaW5nKGNvbnRleHQpLCB0aGlzLm9wZXJhdG9yLCB0aGlzLnZhbC50b1N0cmluZyhjb250ZXh0KV0uam9pbignICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBBc3NpZ25tZW50KSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgU3RhdGljLm9wZXJhdG9ycyk7XHJcblx0XHRpZiAocGFyc2UudG9rZW5zLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHR2YXIgaW5pdEtleXdvcmQsIHJlZmVyZW5jZSA9IHBhcnNlLnRva2Vucy5zaGlmdCgpLnRyaW0oKSwgdmFsID0gcGFyc2UudG9rZW5zLnNoaWZ0KCkudHJpbSgpO1xyXG5cdFx0XHRpZiAoWyd2YXInLCAnbGV0JywgJ2NvbnN0J10uaW5jbHVkZXMoX2JlZm9yZShyZWZlcmVuY2UsICcgJykpKSB7XHJcblx0XHRcdFx0aW5pdEtleXdvcmQgPSBfYmVmb3JlKHJlZmVyZW5jZSwgJyAnKTtcclxuXHRcdFx0XHRyZWZlcmVuY2UgPSBfYWZ0ZXIocmVmZXJlbmNlLCAnICcpLnRyaW0oKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoISgocmVmZXJlbmNlID0gcGFyc2VDYWxsYmFjayhyZWZlcmVuY2UpKSBpbnN0YW5jZW9mIFJlZmVyZW5jZUludGVyZmFjZSkgXHJcblx0XHRcdHx8ICEodmFsID0gcGFyc2VDYWxsYmFjayh2YWwpKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhc3NpZ25tZW50IGV4cHJlc3Npb246ICcgKyBleHByKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhpbml0S2V5d29yZCwgcmVmZXJlbmNlLCB2YWwsIHBhcnNlLm1hdGNoZXNbMF0udHJpbSgpKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHRcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBhcnJheVxyXG4gKi9cclxuQXNzaWdubWVudC5vcGVyYXRvcnMgPSBbJyA9ICddO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBc3NpZ25tZW50O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQm9vbEludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQm9vbGVhblR5cGUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgQm9vbEludGVyZmFjZSBmcm9tICcuL0Jvb2xJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBCb29sIChib29sZWFuKSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEJvb2wgPSBjbGFzcyBleHRlbmRzIEJvb2xJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3Ioc3RhdGUpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gJ3RydWUnO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuc3RhdGU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEJvb2wpIHtcclxuXHRcdHZhciBleHByID0gZXhwci50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuXHRcdGlmIChleHByID09PSAndHJ1ZScgfHwgZXhwciA9PT0gJ2ZhbHNlJykge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhleHByKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEJvb2w7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ2FsbEludGVyZmFjZSBmcm9tICcuL0NhbGxJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQXJndW1lbnRzIGZyb20gJy4vQXJndW1lbnRzLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4uL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ2FsbCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IENhbGwgPSBjbGFzcyBleHRlbmRzIENhbGxJbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHJlZmVyZW5jZSwgYXJncykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xyXG5cdFx0dGhpcy5hcmdzID0gYXJncztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdHZhciBhcmdzID0gdGhpcy5hcmdzLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuZXhlYyhyZWZlcmVuY2UubmFtZSwgYXJncywgdHJhcCk7XHJcblx0XHR9XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHRoaXMgKyAnXCIgaXMgdW5kZWZpbmVkIScpO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlLnRvU3RyaW5nKGNvbnRleHQpICsgdGhpcy5hcmdzLnRvU3RyaW5nKGNvbnRleHQpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBDYWxsKSB7XHJcblx0XHRpZiAoIWV4cHIuc3RhcnRzV2l0aCgnKCcpICYmIGV4cHIuZW5kc1dpdGgoJyknKSAmJiAhTGV4ZXIubWF0Y2goZXhwciwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgdG9rZW5zID0gTGV4ZXIuc3BsaXQoZXhwciwgW10pO1xyXG5cdFx0XHR2YXIgcmVmZXJlbmNlLCBhcmdzID0gdG9rZW5zLnBvcCgpO1xyXG5cdFx0XHRpZiAoISgocmVmZXJlbmNlID0gcGFyc2VDYWxsYmFjayh0b2tlbnMuam9pbignJykpKSBpbnN0YW5jZW9mIFJlZmVyZW5jZUludGVyZmFjZSkgXHJcblx0XHRcdHx8ICEoYXJncyA9IHBhcnNlQ2FsbGJhY2soYXJncywgW0FyZ3VtZW50c10pKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWxsIGRpcmVjdGl2ZTogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKHJlZmVyZW5jZSwgYXJncyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1x0XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IENhbGw7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb21wYXJpc29uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdDb21wYXJpc29uRXhwcmVzc2lvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF9maXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9kaWZmZXJlbmNlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2RpZmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgQ29tcGFyaXNvbkludGVyZmFjZSBmcm9tICcuL0NvbXBhcmlzb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb21wYXJpc29uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQ29tcGFyaXNvbiA9IGNsYXNzIGV4dGVuZHMgQ29tcGFyaXNvbkludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihvcGVyYW5kMSwgb3BlcmFuZDIsIG9wZXJhdG9yKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5vcGVyYW5kMSA9IG9wZXJhbmQxO1xyXG5cdFx0dGhpcy5vcGVyYW5kMiA9IG9wZXJhbmQyO1xyXG5cdFx0dGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiBDb21wYXJpc29uLmNvbXBhcmUoXHJcblx0XHRcdHRoaXMub3BlcmFuZDEuZXZhbChjb250ZXh0LCB0cmFwKSwgXHJcblx0XHRcdHRoaXMub3BlcmFuZDIuZXZhbChjb250ZXh0LCB0cmFwKSwgXHJcblx0XHRcdHRoaXMub3BlcmF0b3JcclxuXHRcdCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiBbXHJcblx0XHRcdHRoaXMub3BlcmFuZDEudG9TdHJpbmcoY29udGV4dCksIFxyXG5cdFx0XHR0aGlzLm9wZXJhdG9yLCBcclxuXHRcdFx0dGhpcy5vcGVyYW5kMi50b1N0cmluZyhjb250ZXh0KVxyXG5cdFx0XS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IENvbXBhcmlzb24pIHtcclxuXHRcdHZhciBvcGVyYXRvcnMgPSBfZmxhdHRlbihTdGF0aWMub3BlcmF0b3JzKS5tYXAob3BlciA9PiAnICcgKyBvcGVyICsgJyAnKTtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBvcGVyYXRvcnMpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID4gMikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFwiQ29tcGFyaXNvblwiIGV4cHJlc3Npb246ICcgKyBleHByICsgJyEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKF9maXJzdChwYXJzZS50b2tlbnMpLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhfbGFzdChwYXJzZS50b2tlbnMpLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2UubWF0Y2hlc1swXS50cmltKClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqL1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBVc2UgdGhlIG9wZXJhdG9yIHR5cGUgdG8gY29tcGFyZSB0aGUgdHdvIG9wZXJhbmRzXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0b3BlcmFuZDFcdFx0XHJcblx0ICogQHBhcmFtIG1peGVkXHRcdG9wZXJhbmQyXHRcdFxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRvcGVyYXRvclx0XHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjb21wYXJlKG9wZXJhbmQxLCBvcGVyYW5kMiwgb3BlcmF0b3IgPSAnPT0nKSB7XHJcblx0XHRpZiAoX2ZsYXR0ZW4oQ29tcGFyaXNvbi5vcGVyYXRvcnMpLmluZGV4T2Yob3BlcmF0b3IpID09PSAtMSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvcGVyYXRvciBcIicgKyBvcGVyYXRvciArICdcIiBpcyBub3QgcmVjb2duaXplZC4nKTtcclxuXHRcdH1cclxuXHRcdHN3aXRjaChvcGVyYXRvcikge1xyXG5cdFx0XHRjYXNlICc9PT0nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSA9PT0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJz09JzpcclxuXHRcdFx0Y2FzZSAnPSc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxID09IG9wZXJhbmQyO1xyXG5cdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPiBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnPCc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxIDwgb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJz49JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPj0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJzw9JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPD0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJyE9JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgIT0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJyE9PSc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxICE9PSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnXj0nOlxyXG5cdFx0XHRcdHJldHVybiBfaXNTdHJpbmcob3BlcmFuZDEpICYmIG9wZXJhbmQxLnN0YXJ0c1dpdGgob3BlcmFuZDIpO1xyXG5cdFx0XHRjYXNlICckPSc6XHJcblx0XHRcdFx0cmV0dXJuIF9pc1N0cmluZyhvcGVyYW5kMSkgJiYgb3BlcmFuZDEuZW5kc1dpdGgob3BlcmFuZDIpO1xyXG5cdFx0XHRjYXNlICcqPSc6XHJcblx0XHRcdFx0Ly8gQ29udGFpbnNcclxuXHRcdFx0XHRyZXR1cm4gX2lzQXJyYXkob3BlcmFuZDIpIHx8IF9pc1N0cmluZyhvcGVyYW5kMikgPyBvcGVyYW5kMS5pbmRleE9mKG9wZXJhbmQyKSA+IC0xIDogZmFsc2U7XHJcblx0XHRcdGNhc2UgJ349JzpcclxuXHRcdFx0XHQvLyBDb250YWlucyB3b3JkXHJcblx0XHRcdFx0cmV0dXJuIF9pc1N0cmluZyhvcGVyYW5kMSkgJiYgX2lzU3RyaW5nKG9wZXJhbmQyKSAmJiAoJyAnICsgb3BlcmFuZDEgKyAnICcpLmluZGV4T2YoJyAnICsgb3BlcmFuZDIgKyAnICcpID4gLTE7XHJcblx0XHRcdGNhc2UgJz49PCc6IC8vIEJldHdlZW5cclxuXHRcdFx0XHQgaWYgKCEoX2lzQXJyYXkob3BlcmFuZDIpICYmIG9wZXJhbmQyLmxlbmd0aCA9PT0gMikpIHtcclxuXHRcdFx0XHRcdCB0aHJvdyBuZXcgRXJyb3IoJ0EgXFwnQmV0d2VlblxcJyBjb21wYXJpc29uIHJlcXVpcmVzIGFyZ3VtZW50IDIgdG8gYmUgYW4gYXJyYXkgb2YgZXhhY3RseSAyIHZhbHVlcy4nKTtcclxuXHRcdFx0XHQgfVxyXG5cdFx0XHRcdCByZXR1cm4gb3BlcmFuZDEgPj0gb3BlcmFuZDJbMF0gJiYgb3BlcmFuZDEgPD0gb3BlcmFuZDJbMV07XHJcblx0XHJcblx0XHRcdGNhc2UgJy8qKi8nOiAvLyBSZWdleFxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMi5tYXRjaChuZXcgUmVnRXhwKG9wZXJhbmQxKSk7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQ29tcGFyZXMgdHdvIG9wZXJhbmRzIGZvciBkaWZmZXJlbmNlc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdG9wZXJhbmQxXHRcdFxyXG5cdCAqIEBwYXJhbSBtaXhlZFx0XHRvcGVyYW5kMlx0XHRcclxuXHQgKiBAcGFyYW0gYm9vbFx0IFx0c3RyaWN0XHRcdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c3RhdGljIGRpZmYob3BlcmFuZDEsIG9wZXJhbmQyLCBzdHJpY3QpIHtcclxuXHRcdHJldHVybiAhQ29tcGFyaXNvbi5jb21wYXJlKG9wZXJhbmQxLCBvcGVyYW5kMiwgc3RyaWN0ID8gJz09PScgOiAnPT0nKTtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5Db21wYXJpc29uLm9wZXJhdG9ycyA9IHtcclxuXHRleGFjdDoge1xyXG5cdFx0aXM6ICc9PT0nLFxyXG5cdFx0aXNOdWxsOiAnPT09JyxcclxuXHRcdGVxdWFsc1RvOiAnPT0nLFxyXG5cdFx0c3RyaWN0bHlOb3RFcXVhbHNUbzogJyE9PScsXHJcblx0XHRub3RFcXVhbHNUbzogJyE9JyxcclxuXHR9LFxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRsZXNzZXJUaGFuOiAnPCcsXHJcblx0XHRncmVhdGVyVGhhbjogJz4nLFxyXG5cdFx0bGVzc2VyVGhhbk9yRXF1YWxzVG86ICc8PScsXHJcblx0XHRncmVhdGVyVGhhbk9yRXF1YWxzVG86ICc+PScsXHJcblx0XHRiZXR3ZWVuOiAnPj08JyxcclxuXHR9LFxyXG5cdHBhcnRpYWw6IHtcclxuXHRcdHN0YXJ0c1dpdGg6ICdePScsXHJcblx0XHRlbmRzV2l0aDogJyQ9JyxcclxuXHRcdGNvbnRhaW5zOiAnKj0nLFxyXG5cdFx0YW55OiAnfj0nLFxyXG5cdFx0aW46ICd+PScsXHJcblx0XHRtYXRjaGVzOiAnLyoqLycsXHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQ29tcGFyaXNvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbmRpdGlvbkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnVGVybmFyeUNvbmRpdGlvbmFsJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuaW1wb3J0IENvbmRpdGlvbkludGVyZmFjZSBmcm9tICcuL0NvbmRpdGlvbkludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbmRpdGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IENvbmRpdGlvbiA9IGNsYXNzIGV4dGVuZHMgQ29uZGl0aW9uSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFzc2VydGlvbiwgb25UcnVlLCBvbkZhbHNlKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5hc3NlcnRpb24gPSBhc3NlcnRpb247XHJcblx0XHR0aGlzLm9uVHJ1ZSA9IG9uVHJ1ZTtcclxuXHRcdHRoaXMub25GYWxzZSA9IG9uRmFsc2U7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXNzZXJ0aW9uLmV2YWwoY29udGV4dCwgdHJhcCkgXHJcblx0XHRcdD8gdGhpcy5vblRydWUuZXZhbChjb250ZXh0LCB0cmFwKSBcclxuXHRcdFx0OiB0aGlzLm9uRmFsc2UuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIFtcclxuXHRcdFx0dGhpcy5hc3NlcnRpb24udG9TdHJpbmcoY29udGV4dCksIFxyXG5cdFx0XHRDb25kaXRpb24ub3BlcmF0b3JzWzBdLCBcclxuXHRcdFx0dGhpcy5vblRydWUudG9TdHJpbmcoY29udGV4dCksXHJcblx0XHRcdENvbmRpdGlvbi5vcGVyYXRvcnNbMV0sIFxyXG5cdFx0XHR0aGlzLm9uRmFsc2UudG9TdHJpbmcoY29udGV4dClcclxuXHRcdF0uam9pbignICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBDb25kaXRpb24pIHtcclxuXHRcdHZhciBzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBTdGF0aWMub3BlcmF0b3JzKTtcclxuXHRcdGlmIChzcGxpdHMubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRpZiAoc3BsaXRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIHRlcm5hcnkgZXhwcmVzc2lvbjogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soc3BsaXRzWzBdLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhzcGxpdHNbMV0udHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKHNwbGl0c1syXS50cmltKCkpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIG9iamVjdFxyXG4gKi9cclxuQ29uZGl0aW9uLm9wZXJhdG9ycyA9IFsnPycsICc6J107XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIERlbGV0aW9uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdEZWxldGVFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IERlbGV0aW9uSW50ZXJmYWNlIGZyb20gJy4vRGVsZXRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBEZWxldGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IERlbGV0aW9uID0gY2xhc3MgZXh0ZW5kcyBEZWxldGlvbkludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocmVmZXJlbmNlLCBvcGVyYXRvciA9ICdkZWxldGUnKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XHJcblx0XHR0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlLmdldEV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuZGVsKHJlZmVyZW5jZS5uYW1lLCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcGVyYXRvciArICcgJyArIHRoaXMucmVmZXJlbmNlLnRvU3RyaW5nKGNvbnRleHQpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBEZWxldGlvbikge1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIE9iamVjdC52YWx1ZXMoU3RhdGljLm9wZXJhdG9ycykpO1xyXG5cdFx0aWYgKHBhcnNlLm1hdGNoZXMubGVuZ3RoID09PSAxICYmIGV4cHIuc3RhcnRzV2l0aChwYXJzZS5tYXRjaGVzWzBdICsgJyAnKSkge1xyXG5cdFx0XHR2YXIgcmVmZXJlbmNlO1xyXG5cdFx0XHRpZiAoISgocmVmZXJlbmNlID0gcGFyc2VDYWxsYmFjayhwYXJzZS50b2tlbnMucG9wKCkudHJpbSgpKSkgaW5zdGFuY2VvZiBSZWZlcmVuY2VJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRlbGV0ZSBkaXJlY3RpdmU6ICcgKyBleHByKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhyZWZlcmVuY2UsIHBhcnNlLm1hdGNoZXNbMF0udHJpbSgpKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHRcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBhcnJheVxyXG4gKi9cclxuRGVsZXRpb24ub3BlcmF0b3JzID0ge1xyXG5cdHJlZDogJ3JlZHVjZScsIFxyXG5cdGRlbDogJ2RlbGV0ZScsXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IERlbGV0aW9uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogU3RhdGVtZW50c0ludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnU3RhdGVtZW50cyc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBSZXR1cm5JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ1JldHVybkRpcmVjdGl2ZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IFN0YXRlbWVudHNJbnRlcmZhY2UgZnJvbSAnLi9TdGF0ZW1lbnRzSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJldHVybkludGVyZmFjZSBmcm9tICcuL1JldHVybkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFN0YXRlbWVudHMgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBTdGF0ZW1lbnRzID0gY2xhc3MgZXh0ZW5kcyBTdGF0ZW1lbnRzSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzdG10cywgZGVsaW0pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnN0bXRzID0gc3RtdHMgfHwgW107XHJcblx0XHR0aGlzLmRlbGltID0gZGVsaW07XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0Y29udGV4dCA9IENvbnRleHRzLmNyZWF0ZShjb250ZXh0KTtcclxuXHRcdHZhciBzdG10cyA9IFtdO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0bXRzLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHRpZiAodGhpcy5zdG10c1tpXSBpbnN0YW5jZW9mIFJldHVybkludGVyZmFjZSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLnN0bXRzW2ldLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RtdHNbaV0gPSB0aGlzLnN0bXRzW2ldLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBzdG10cztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiB0aGlzLnN0bXRzLm1hcChzdG10ID0+IHN0bXQudG9TdHJpbmcoY29udGV4dCkpLmpvaW4odGhpcy5kZWxpbSk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBTdGF0ZW1lbnRzKSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgX2ZsYXR0ZW4oU3RhdGljLm9wZXJhdG9ycykuY29uY2F0KFsoYSwgYikgPT4ge1xyXG5cdFx0XHQvLyBDYXNlcyBvZiBjb2RlIGJsb2NrcyB0aGF0IHdvbid0IGVuZCBpbiBcIjtcIlxyXG5cdFx0XHRpZiAoYS5lbmRzV2l0aCgnfScpICYmICFiLnRyaW0oKS5zdGFydHNXaXRoKCdlbHNlJykpIHtcclxuXHRcdFx0XHRyZXR1cm4gJyc7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fV0pKTtcclxuXHRcdGlmIChwYXJzZS5tYXRjaGVzLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZS50b2tlbnMubWFwKHN0bXQgPT4gcGFyc2VDYWxsYmFjayhzdG10LnRyaW0oKSkpLmZpbHRlcihhID0+IGEpLFxyXG5cdFx0XHRcdHBhcnNlLm1hdGNoZXNbMF0udHJpbSgpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIGFycmF5XHJcbiAqL1xyXG5TdGF0ZW1lbnRzLm9wZXJhdG9ycyA9IFtcclxuXHQnOycsXHJcblx0XCJcXHJcXG5cIixcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgU3RhdGVtZW50cztcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9jb3B5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgRnVuY0ludGVyZmFjZSBmcm9tICcuL0Z1bmNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgU3RhdGVtZW50cyBmcm9tICcuL1N0YXRlbWVudHMuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBGdW5jIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgRnVuYyA9IGNsYXNzIGV4dGVuZHMgRnVuY0ludGVyZmFjZSB7XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocGFyYW10ZXJzLCBzdGF0ZW1lbnRzLCBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5wYXJhbXRlcnMgPSBwYXJhbXRlcnMgfHwge307XHJcblx0XHR0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xyXG5cdFx0dGhpcy5hcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGluaGVyaXQoU3VwZXIpIHtcclxuXHRcdGlmIChTdXBlciBpbnN0YW5jZW9mIEZ1bmNJbnRlcmZhY2UpIHtcclxuXHRcdFx0dmFyIHBhcmVudFBhcmFtcyA9IE9iamVjdC5rZXlzKFN1cGVyLnBhcmFtdGVycyk7XHJcblx0XHRcdHZhciBvd25QYXJhbXMgPSBPYmplY3Qua2V5cyh0aGlzLnBhcmFtdGVycyk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5tYXgob3duUGFyYW1zLmxlbmd0aCwgcGFyZW50UGFyYW1zLmxlbmd0aCk7IGkgKyspIHtcclxuXHRcdFx0XHR2YXIgbmFtZUluUGFyZW50ID0gcGFyZW50UGFyYW1zW2ldO1xyXG5cdFx0XHRcdHZhciBuYW1lSW5TZWxmID0gb3duUGFyYW1zW2ldO1xyXG5cdFx0XHRcdGlmICghbmFtZUluU2VsZiAmJiBuYW1lSW5QYXJlbnQpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyICMnICsgaSArICcgKCcgKyBuYW1lSW5QYXJlbnQgKyAnKSBpbiBwYXJlbnQgZnVuY3Rpb24gbXVzdCBiZSBpbXBsZW1lbnRlZC4nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKG5hbWVJblNlbGYgJiYgbmFtZUluUGFyZW50KSB7XHJcblx0XHRcdFx0XHR2YXIgZGVmYXVsdFZhbEluUGFyZW50ID0gU3VwZXIucGFyYW10ZXJzW25hbWVJblBhcmVudF07XHJcblx0XHRcdFx0XHR2YXIgZGVmYXVsdFZhbEluU2VsZiA9IHRoaXMucGFyYW10ZXJzW25hbWVJblNlbGZdO1xyXG5cdFx0XHRcdFx0aWYgKGRlZmF1bHRWYWxJblNlbGYgJiYgIWRlZmF1bHRWYWxJblBhcmVudCkge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciAjJyArIGkgKyAnICgnICsgbmFtZUluU2VsZiArICcpIG11c3Qgbm90IGhhdmUgYSBkZWZhdWx0IHZhbHVlIGFzIGVzdGFibGlzaGVkIGluIHBhcmVudCBmdW5jdGlvbi4nKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChkZWZhdWx0VmFsSW5TZWxmICYmIGRlZmF1bHRWYWxJblBhcmVudCAmJiBkZWZhdWx0VmFsSW5TZWxmLmpzZW5UeXBlICE9PSBkZWZhdWx0VmFsSW5QYXJlbnQuanNlblR5cGUpIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdEZWZhdWx0IHZhbHVlIGZvciBwYXJhbWV0ZXIgIycgKyBpICsgJyAoJyArIG5hbWVJblNlbGYgKyAnKSBtdXN0IGJlIG9mIHR5cGUgJyArIGRlZmF1bHRWYWxJblBhcmVudC5qc2VuVHlwZSArICcgYXMgZXN0YWJsaXNoZWQgaW4gcGFyZW50IGZ1bmN0aW9uLicpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnN1cCA9IFN1cGVyO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuICguLi5hcmdzKSA9PiB7XHJcblx0XHRcdHZhciBuZXdNYWluQ29udGV4dCA9IHt9O1xyXG5cdFx0XHRfZWFjaChPYmplY3Qua2V5cyh0aGlzLnBhcmFtdGVycyksIChpLCBuYW1lKSA9PiB7XHJcblx0XHRcdFx0dmFyIGRlZmF1bHRWYWwgPSB0aGlzLnBhcmFtdGVyc1tuYW1lXTtcclxuXHRcdFx0XHRpZiAoYXJncy5sZW5ndGggLSAxIDwgaSAmJiAhZGVmYXVsdFZhbCkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgcGFyYW1ldGVyIFwiJyArIG5hbWUgKyAnXCIgaXMgcmVxdWlyZWQuJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5ld01haW5Db250ZXh0W25hbWVdID0gYXJncy5sZW5ndGggPiBpIFxyXG5cdFx0XHRcdFx0PyBhcmdzW2ldIFxyXG5cdFx0XHRcdFx0OiAodGhpcy5wYXJhbXRlcnNbbmFtZV0gXHJcblx0XHRcdFx0XHRcdD8gdGhpcy5wYXJhbXRlcnNbbmFtZV0uZXZhbChjb250ZXh0LCB0cmFwKSBcclxuXHRcdFx0XHRcdFx0OiBudWxsKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIEJ1dCB0aGlzIG5ld2VyIGNvbnRleHQgc2hvdWxkIGNvbWUgZmlyc3RcclxuXHRcdFx0dmFyIG5lc3RlZENvbnRleHQgPSBuZXcgQ29udGV4dHMobmV3TWFpbkNvbnRleHQsIGNvbnRleHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zdGF0ZW1lbnRzLmV2YWwobmVzdGVkQ29udGV4dCwgdHJhcCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHR2YXIgcGFyYW10ZXJzID0gW107XHJcblx0XHRfZWFjaCh0aGlzLnBhcmFtdGVycywgKG5hbWUsIHZhbHVlKSA9PiB7XHJcblx0XHRcdHBhcmFtdGVycy5wdXNoKG5hbWUgKyAodmFsdWUgPyAnPScgKyB2YWx1ZS50b1N0cmluZyhjb250ZXh0KSA6ICcnKSk7XHJcblx0XHR9KTtcclxuXHRcdGlmICh0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nKSB7XHJcblx0XHRcdHZhciBoZWFkTm9XcmFwID0gdGhpcy5hcnJvd0Z1bmN0aW9uRm9ybWF0dGluZy5oZWFkID09PSBmYWxzZSB8fCAocGFyYW10ZXJzLmxlbmd0aCA9PT0gMSAmJiBwYXJhbXRlcnNbMF0uaW5kZXhPZignPScpID09PSAtMSk7XHJcblx0XHRcdHZhciBib2R5Tm9XcmFwID0gdGhpcy5hcnJvd0Z1bmN0aW9uRm9ybWF0dGluZy5ib2R5ID09PSBmYWxzZVxyXG5cdFx0XHRyZXR1cm4gKGhlYWROb1dyYXAgPyBwYXJhbXRlcnNbMF0gOiAnKCcgKyBwYXJhbXRlcnMuam9pbignLCAnKSArICcpJylcclxuXHRcdFx0KyAnID0+ICcgKyAoYm9keU5vV3JhcCA/IHRoaXMuc3RhdGVtZW50cy50b1N0cmluZyhjb250ZXh0KSA6ICd7JyArIHRoaXMuc3RhdGVtZW50cy50b1N0cmluZyhjb250ZXh0KSArICd9Jyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gJ2Z1bmN0aW9uICgnICsgcGFyYW10ZXJzLmpvaW4oJywgJykgKyAnKSB7JyArIHRoaXMuc3RhdGVtZW50cy50b1N0cmluZyhjb250ZXh0KSArICd9JztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gRnVuYykge1xyXG5cdFx0ZXhwciA9IGV4cHIudHJpbSgpO1xyXG5cdFx0dmFyIHNwbGl0cztcclxuXHRcdGlmIChleHByLnN0YXJ0c1dpdGgoJ2Z1bmN0aW9uJykgXHJcblx0XHQmJiAoc3BsaXRzID0gTGV4ZXIuc3BsaXQoZXhwciwgW10pLnNsaWNlKDEpLmZpbHRlcihiID0+IGIudHJpbSgpKSkgJiYgc3BsaXRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHR2YXIgYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcgPSBmYWxzZTtcclxuXHRcdFx0dmFyIGZ1bmNIZWFkID0gX3Vud3JhcChzcGxpdHMuc2hpZnQoKS50cmltKCksICcoJywgJyknKTtcclxuXHRcdFx0dmFyIGZ1bmNCb2R5ID0gX3Vud3JhcChzcGxpdHMuc2hpZnQoKS50cmltKCksICd7JywgJ30nKTtcclxuXHRcdH0gZWxzZSBpZiAoIWV4cHIuc3RhcnRzV2l0aCgnZnVuY3Rpb24nKSBcclxuXHRcdCYmIChzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBbJz0+J10pKSAmJiBzcGxpdHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdHZhciBmdW5jSGVhZCA9IHNwbGl0cy5zaGlmdCgpLnRyaW0oKTtcclxuXHRcdFx0dmFyIGZ1bmNCb2R5ID0gc3BsaXRzLnNoaWZ0KCkudHJpbSgpO1xyXG5cdFx0XHR2YXIgYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcgPSB7fTtcclxuXHRcdFx0aWYgKF93cmFwcGVkKGZ1bmNIZWFkLCAnKCcsICcpJykpIHtcclxuXHRcdFx0XHRmdW5jSGVhZCA9IF91bndyYXAoZnVuY0hlYWQsICcoJywgJyknKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZy5oZWFkID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF93cmFwcGVkKGZ1bmNCb2R5LCAneycsICd9JykpIHtcclxuXHRcdFx0XHRmdW5jQm9keSA9IF91bndyYXAoZnVuY0JvZHksICd7JywgJ30nKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZy5ib2R5ID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciBwYXJhbXRlcnMgPSB7fTtcclxuXHRcdExleGVyLnNwbGl0KGZ1bmNIZWFkLCBbJywnXSkuZm9yRWFjaChwYXJhbSA9PiB7XHJcblx0XHRcdHZhciBwYXJhbVNwbGl0ID0gcGFyYW0uc3BsaXQoJz0nKTtcclxuXHRcdFx0aWYgKHBhcmFtU3BsaXRbMV0pIHtcclxuXHRcdFx0XHRwYXJhbXRlcnNbcGFyYW1TcGxpdFswXS50cmltKCldID0gcGFyc2VDYWxsYmFjayhwYXJhbVNwbGl0WzFdLnRyaW0oKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cGFyYW10ZXJzW3BhcmFtLnRyaW0oKV0gPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBzdGF0ZW1lbnRzID0gcGFyc2VDYWxsYmFjayhmdW5jQm9keSwgW1N0YXRlbWVudHNdLCB7YXNzZXJ0OmZhbHNlfSkgfHwgcGFyc2VDYWxsYmFjayhmdW5jQm9keSk7XHJcblx0XHRyZXR1cm4gbmV3IFN0YXRpYyhwYXJhbXRlcnMsIHN0YXRlbWVudHMsIGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nKTtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5GdW5jLm9wZXJhdG9ycyA9IFsnPT4nLF07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEZ1bmM7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIElmSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdJZkNvbmRpdGlvbmFsJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgSWZJbnRlcmZhY2UgZnJvbSAnLi9JZkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBTdGF0ZW1lbnRzIGZyb20gJy4vU3RhdGVtZW50cy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbmRpdGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IElmID0gY2xhc3MgZXh0ZW5kcyBJZkludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihhc3NlcnRpb24sIG9uVHJ1ZSwgb25GYWxzZSwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmFzc2VydGlvbiA9IGFzc2VydGlvbjtcclxuXHRcdHRoaXMub25UcnVlID0gb25UcnVlO1xyXG5cdFx0dGhpcy5vbkZhbHNlID0gb25GYWxzZTtcclxuXHRcdHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmFzc2VydGlvbi5ldmFsKGNvbnRleHQsIHRyYXApIFxyXG5cdFx0XHQ/ICh0aGlzLm9uVHJ1ZSA/IHRoaXMub25UcnVlLmV2YWwoY29udGV4dCwgdHJhcCkgOiB1bmRlZmluZWQpXHJcblx0XHRcdDogKHRoaXMub25GYWxzZSA/IHRoaXMub25GYWxzZS5ldmFsKGNvbnRleHQsIHRyYXApIDogdW5kZWZpbmVkKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG4gICAgICAgIHZhciBvblRydWUgPSB0aGlzLnBhcmFtcy5vblRydWVJc0Jsb2NrIFxyXG4gICAgICAgICAgICA/ICd7JyArIHRoaXMub25UcnVlLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nIFxyXG4gICAgICAgICAgICA6ICh0aGlzLm9uVHJ1ZSA/IHRoaXMub25UcnVlLnRvU3RyaW5nKGNvbnRleHQpIDogJycpO1xyXG4gICAgICAgIHZhciBvbkZhbHNlID0gdGhpcy5wYXJhbXMub25GYWxzZUlzQmxvY2sgXHJcbiAgICAgICAgICAgID8gJ3snICsgdGhpcy5vbkZhbHNlLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nIFxyXG4gICAgICAgICAgICA6ICh0aGlzLm9uRmFsc2UgPyB0aGlzLm9uRmFsc2UudG9TdHJpbmcoY29udGV4dCkgOiAnJyk7XHJcblx0XHRyZXR1cm4gJ2lmICgnICsgdGhpcy5hc3NlcnRpb24udG9TdHJpbmcoY29udGV4dCkgKyAnKScgKyBvblRydWUgKyAob25GYWxzZSA/ICcgZWxzZSAnICsgb25GYWxzZSA6ICcnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gSWYpIHtcclxuICAgICAgICBleHByID0gZXhwci50cmltKCk7XHJcbiAgICAgICAgdmFyIHNwbGl0cztcclxuICAgICAgICBpZiAoZXhwci5zdGFydHNXaXRoKCdpZicpIFxyXG5cdFx0JiYgKHNwbGl0cyA9IExleGVyLnNwbGl0KGV4cHIsIFtdLCB7bGltaXQ6Mn0vKklNUE9SVEFOVCovKS5zbGljZSgxKS5maWx0ZXIoYiA9PiBiLnRyaW0oKSkpICYmIHNwbGl0cy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgdmFyIGFzc2VydGlvbiA9IHBhcnNlQ2FsbGJhY2soX3Vud3JhcChzcGxpdHMuc2hpZnQoKS50cmltKCksICcoJywgJyknKS50cmltKCkpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdCA9IExleGVyLnNwbGl0KHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgWydlbHNlJ10sIHtsaW1pdDoxfS8qSU1QT1JUQU5UKi8pO1xyXG4gICAgICAgICAgICB2YXIgb25UcnVlID0gcmVzdC5zaGlmdCgpLnRyaW0oKSwgb25UcnVlSXNCbG9jaywgb25GYWxzZSA9IChyZXN0LnNoaWZ0KCkgfHwgJycpLnRyaW0oKSwgb25GYWxzZUlzQmxvY2s7XHJcbiAgICAgICAgICAgIGlmIChfd3JhcHBlZChvblRydWUsICd7JywgJ30nKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGJyYWNlcyBnaXZlcyB1cyB0aGUgb25UcnVlIGJsb2NrXHJcbiAgICAgICAgICAgICAgICBvblRydWVJc0Jsb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG9uVHJ1ZSA9IF91bndyYXAob25UcnVlLCAneycsICd9JykudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgb25UcnVlID0gcGFyc2VDYWxsYmFjayhvblRydWUsIFtTdGF0ZW1lbnRzXSwge2Fzc2VydDpmYWxzZX0pIHx8IHBhcnNlQ2FsbGJhY2sob25UcnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9uVHJ1ZSA9IHBhcnNlQ2FsbGJhY2sob25UcnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob25GYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF93cmFwcGVkKG9uRmFsc2UsICd7JywgJ30nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBicmFjZXMgZ2l2ZXMgdXMgdGhlIG9uVHJ1ZSBibG9ja1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmFsc2VJc0Jsb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbkZhbHNlID0gX3Vud3JhcChvbkZhbHNlLCAneycsICd9JykudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmFsc2UgPSBwYXJzZUNhbGxiYWNrKG9uRmFsc2UsIFtTdGF0ZW1lbnRzXSwge2Fzc2VydDpmYWxzZX0pIHx8IHBhcnNlQ2FsbGJhY2sob25GYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25GYWxzZSA9IHBhcnNlQ2FsbGJhY2sob25GYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoYXNzZXJ0aW9uLCBvblRydWUsIG9uRmFsc2UsIHtvblRydWVJc0Jsb2NrLCBvbkZhbHNlSXNCbG9ja30pO1xyXG4gICAgICAgICB9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBJZjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludGVyc2VjdGlvbiBvZiB0d28gYXJyYXlzO1xyXG4gKiBvcHRpb25hbGx5IHVzaW5nIGEgY3VzdG9tIG1hdGNoaW5nIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHRhcnIyXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgYXJyMiwgY2FsbGJhY2sgPSBudWxsKSB7XHJcblx0cmV0dXJuICFfaXNBcnJheShhcnIyKSA/IFtdIDogYXJyLmZpbHRlcih2YWwxID0+IGNhbGxiYWNrIFxyXG5cdFx0PyBhcnIyLmZpbHRlcih2YWwyID0+IGNhbGxiYWNrKHZhbDEsIHZhbDIpKS5sZW5ndGggXHJcblx0XHQ6IGFycjIuaW5kZXhPZih2YWwxKSAhPT0gLTFcclxuXHQpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogTWF0aEludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnTWF0aEV4cHJlc3Npb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IE1hdGhJbnRlcmZhY2UgZnJvbSAnLi9NYXRoSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogTWF0aCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IE1hdGggPSBjbGFzcyBleHRlbmRzIE1hdGhJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IodmFsLCBleHBycykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMudmFsID0gdmFsO1xyXG5cdFx0dGhpcy5leHBycyA9IGV4cHJzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwcnMucmVkdWNlKChjdXJyZW50VG90YWwsIGV4cHIpID0+IHtcclxuXHRcdFx0dmFyIHZhbCA9IGV4cHIudmFsLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdHZhciBvcGVyYXRvciA9IGV4cHIub3BlcmF0b3IudHJpbSgpO1xyXG5cdFx0XHRpZiAoKCFfaXNOdW1lcmljKGN1cnJlbnRUb3RhbCkgfHwgIV9pc051bWVyaWModmFsKSkgJiYgb3BlcmF0b3IgIT09ICcrJykge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBNYXRoIGV4cHJlc3Npb246ICcgKyB0aGlzLnRvU3RyaW5nKCkgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN3aXRjaChvcGVyYXRvcikge1xyXG5cdFx0XHRcdGNhc2UgJysnOlxyXG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRUb3RhbCArIHZhbDtcclxuXHRcdFx0XHRjYXNlICctJzpcclxuXHRcdFx0XHRcdHJldHVybiBjdXJyZW50VG90YWwgLSB2YWw7XHJcblx0XHRcdFx0Y2FzZSAnKic6XHJcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudFRvdGFsICogdmFsO1xyXG5cdFx0XHRcdGNhc2UgJy8nOlxyXG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRUb3RhbCAvIHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgdGhpcy52YWwuZXZhbChjb250ZXh0LCB0cmFwKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiBbdGhpcy52YWwudG9TdHJpbmcoY29udGV4dCldLmNvbmNhdChcclxuXHRcdFx0dGhpcy5leHBycy5tYXAoZXhwciA9PiBleHByLm9wZXJhdG9yICsgJyAnICsgZXhwci52YWwudG9TdHJpbmcoY29udGV4dCkpXHJcblx0XHQpLmpvaW4oJyAnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gTWF0aCkge1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIF9mbGF0dGVuKFN0YXRpYy5vcGVyYXRvcnMpKTtcclxuXHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID4gMSAmJiBwYXJzZS5tYXRjaGVzLmxlbmd0aCA9PT0gcGFyc2UudG9rZW5zLmxlbmd0aCAtIDEpIHtcclxuXHRcdFx0dmFyIG9wZXJhdG9ycyA9IF91bmlxdWUocGFyc2UubWF0Y2hlcyk7XHJcblx0XHRcdGlmIChfaW50ZXJzZWN0KG9wZXJhdG9ycywgTWF0aC5vcGVyYXRvcnMuc3VwKS5sZW5ndGggJiYgX2ludGVyc2VjdChvcGVyYXRvcnMsIE1hdGgub3BlcmF0b3JzLnN1YikubGVuZ3RoKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcIkFkZGl0aW9uL3N1YnRyYWN0aW9uXCIgYW5kIFwibXVsdGlwbGljYXRpb24vZGl2aXNpb25cIiBvcGVyYXRvcnMgY2Fubm90IGJlIHVzZWQgaW4gdGhlIHNhbWUgZXhwcmVzc2lvbjogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2socGFyc2UudG9rZW5zLnNoaWZ0KCkudHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZS50b2tlbnMubWFwKChleHByLCBpKSA9PiB7cmV0dXJuIHtcclxuXHRcdFx0XHRcdG9wZXJhdG9yOiBwYXJzZS5tYXRjaGVzW2ldLFxyXG5cdFx0XHRcdFx0dmFsOiBwYXJzZUNhbGxiYWNrKGV4cHIudHJpbSgpKVxyXG5cdFx0XHRcdH07fSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5NYXRoLm9wZXJhdG9ycyA9IHtcclxuXHRzdXA6IFsnKicsICcvJ10sXHJcblx0c3ViOiBbJyArICcsICcgLSAnXSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgTWF0aDtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE51bUludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnTnVtYmVyVHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IE51bUludGVyZmFjZSBmcm9tICcuL051bUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE51bSAobnVtYmVyKSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IE51bSA9IGNsYXNzIGV4dGVuZHMgTnVtSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGludCwgZGVjID0gMCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuaW50ID0gaW50O1xyXG5cdFx0dGhpcy5kZWMgPSBkZWM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoKSB7XHJcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmludCArICh0aGlzLmRlYyA/ICcuJyArIHRoaXMuZGVjIDogbnVsbCkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5pbnQgKyAodGhpcy5kZWMgPyAnLicgKyB0aGlzLmRlYyA6IG51bGwpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBOdW0pIHtcclxuXHRcdGlmIChfaXNOdW1lcmljKGV4cHIpKSB7XHJcblx0XHRcdHZhciBleHByID0gZXhwci5zcGxpdCgnLicpO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUludChleHByLnNoaWZ0KCkpLFxyXG5cdFx0XHRcdHBhcnNlSW50KGV4cHIuc2hpZnQoKSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IE51bTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE9iakludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnT2JqZWN0VHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IF9maXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgT2JqSW50ZXJmYWNlIGZyb20gJy4vT2JqSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogT2JqZWN0IHV0aWxzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgT2JqID0gY2xhc3MgZXh0ZW5kcyBPYmpJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZW50cmllcykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZW50cmllcyA9IGVudHJpZXMgfHwge307XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0aW5oZXJpdChTdXBlcikge1xyXG5cdFx0aWYgKFN1cGVyIGluc3RhbmNlb2YgT2JqSW50ZXJmYWNlKSB7XHJcblx0XHRcdF9lYWNoKFN1cGVyLmVudHJpZXMsIChuYW1lLCB2YWwpID0+IHtcclxuXHRcdFx0XHRpZiAoIShuYW1lIGluIHRoaXMuZW50cmllcykpIHtcclxuXHRcdFx0XHRcdHRoaXMuZW50cmllc1tuYW1lXSA9IHZhbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIGl0ZW1zID0ge307XHJcblx0XHRfZWFjaCh0aGlzLmVudHJpZXMsIChrZXksIGV4cHIpID0+IHtcclxuXHRcdFx0aXRlbXNba2V5XSA9IGV4cHIuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGl0ZW1zO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0dmFyIHN0ciA9IFtdO1xyXG5cdFx0X2VhY2godGhpcy5lbnRyaWVzLCAoa2V5LCBleHByKSA9PiB7XHJcblx0XHRcdHN0ci5wdXNoKGtleSArIE9iai5vcGVyYXRvcnMuc3ViICsgZXhwci50b1N0cmluZyhjb250ZXh0KSk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiAneycgKyBzdHIuam9pbihPYmoub3BlcmF0b3JzLnN1cCkgKyAnfSc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IE9iaikge1xyXG5cdFx0aWYgKF93cmFwcGVkKGV4cHIsICd7JywgJ30nKSAmJiAhTGV4ZXIubWF0Y2goZXhwci50cmltKCksIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIGVudHJpZXMgPSB7fTtcclxuXHRcdFx0dmFyIF9lbnRyaWVzU3BsaXQgPSBMZXhlci5zcGxpdChfdW53cmFwKGV4cHIsICd7JywgJ30nKSwgW09iai5vcGVyYXRvcnMuc3VwXSlcclxuXHRcdFx0XHQubWFwKG4gPT4gbi50cmltKCkpLmZpbHRlcihuID0+IG4pO1xyXG5cdFx0XHRfZWFjaChfZW50cmllc1NwbGl0LCAoa2V5LCBleHByKSA9PiB7XHJcblx0XHRcdFx0dmFyIGVudHJ5ID0gTGV4ZXIuc3BsaXQoZXhwciwgW09iai5vcGVyYXRvcnMuc3ViXSwge2xpbWl0OjF9LypJTVBPUlRBTlQqLyk7XHJcblx0XHRcdFx0ZW50cmllc1tfZmlyc3QoZW50cnkpLnRyaW0oKV0gPSBwYXJzZUNhbGxiYWNrKF9sYXN0KGVudHJ5KS50cmltKCkpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoZW50cmllcyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIG9iamVjdFxyXG4gKi9cclxuT2JqLm9wZXJhdG9ycyA9IHtcclxuXHRzdXA6ICcsJyxcclxuXHRzdWI6ICc6JyxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgT2JqO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUHJlc2VuY2VJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ1ByZXNlbmNlT3BlcmF0b3InOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2xhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBQcmVzZW5jZUludGVyZmFjZSBmcm9tICcuL1ByZXNlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFByZXNlbmNlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgUHJlc2VuY2UgPSBjbGFzcyBleHRlbmRzIFByZXNlbmNlSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihwcm9wLCByZWZlcmVuY2UsIG9wZXJhdG9yID0gJ2luJykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMucHJvcCA9IHByb3A7XHJcblx0XHR0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcclxuXHRcdHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdHZhciBwcm9wID0gdGhpcy5wcm9wLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuaGFzKHJlZmVyZW5jZS5uYW1lLCBwcm9wLCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gW3RoaXMucHJvcC50b1N0cmluZyhjb250ZXh0KSwgdGhpcy5vcGVyYXRvciwgdGhpcy5yZWZlcmVuY2UudG9TdHJpbmcoY29udGV4dCldLmpvaW4oJyAnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gUHJlc2VuY2UpIHtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBTdGF0aWMub3BlcmF0b3JzKTtcclxuXHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdHZhciBwcm9wLCByZWZlcmVuY2U7XHJcblx0XHRcdGlmICghKHByb3AgPSBwYXJzZUNhbGxiYWNrKHBhcnNlLnRva2Vucy5zaGlmdCgpLnRyaW0oKSkpXHJcblx0XHRcdHx8ICEoKHJlZmVyZW5jZSA9IHBhcnNlQ2FsbGJhY2socGFyc2UudG9rZW5zLnNoaWZ0KCkudHJpbSgpKSkgaW5zdGFuY2VvZiBSZWZlcmVuY2VJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHByZXNlbmNlIGNoZWNrIGV4cHJlc3Npb246ICcgKyBleHByKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhwcm9wLCByZWZlcmVuY2UsIHBhcnNlLm1hdGNoZXNbMF0udHJpbSgpKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHRcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBhcnJheVxyXG4gKi9cclxuUHJlc2VuY2Uub3BlcmF0b3JzID0gWycgaW4gJ107XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFByZXNlbmNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4uL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUmVmZXJlbmNlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgUmVmZXJlbmNlID0gY2xhc3MgZXh0ZW5kcyBSZWZlcmVuY2VJbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQsIG5hbWUsIGJhY2t0aWNrcyA9IGZhbHNlKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmJhY2t0aWNrcyA9IGJhY2t0aWNrcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Z2V0RXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgc291cmNlQ29udGV4dCA9IGNvbnRleHQsIG5hbWUgPSB0aGlzLm5hbWU7XHJcblx0XHRpZiAodGhpcy5jb250ZXh0KSB7XHJcblx0XHRcdGlmIChuYW1lIGluc3RhbmNlb2YgRXhwckludGVyZmFjZSkge1xyXG5cdFx0XHRcdG5hbWUgPSBuYW1lLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c291cmNlQ29udGV4dCA9IHRoaXMuY29udGV4dC5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtjb250ZXh0OnNvdXJjZUNvbnRleHQsIG5hbWU6bmFtZSx9O1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciBwYXJ0cyA9IHRoaXMuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdGlmICghX2lzVW5kZWZpbmVkKHBhcnRzLmNvbnRleHQpICYmICFfaXNVbmRlZmluZWQocGFydHMubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShwYXJ0cy5jb250ZXh0KS5nZXQocGFydHMubmFtZSwgdHJhcCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHR2YXIgbmFtZSA9IHRoaXMubmFtZTtcclxuXHRcdGlmICh0aGlzLmNvbnRleHQpIHtcclxuXHRcdFx0dmFyIHN1YmplY3RDb250ZXh0ID0gdGhpcy5jb250ZXh0LnRvU3RyaW5nKGNvbnRleHQpO1xyXG5cdFx0XHRpZiAobmFtZSBpbnN0YW5jZW9mIEV4cHJJbnRlcmZhY2UpIHtcclxuXHRcdFx0XHRuYW1lID0gJ1snICsgbmFtZS50b1N0cmluZyhjb250ZXh0KSArICddJztcclxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmJhY2t0aWNrcykge1xyXG5cdFx0XHRcdG5hbWUgPSAnYCcgKyBuYW1lICsgJ2AnO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgc3ViamVjdENvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0XHRpZiAodGhpcy5iYWNrdGlja3MpIHtcclxuXHRcdFx0XHRuYW1lID0gJ2AnICsgbmFtZSArICdgJztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChzdWJqZWN0Q29udGV4dCB8fCAnJykgKyAoc3ViamVjdENvbnRleHQgJiYgIW5hbWUuc3RhcnRzV2l0aCgnWycpID8gUmVmZXJlbmNlLnNlcGFyYXRvciA6ICcnKSArIG5hbWU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IFJlZmVyZW5jZSkge1xyXG5cdFx0aWYgKCFMZXhlci5tYXRjaChleHByLnRyaW0oKSwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgc3BsaXRzID0gTGV4ZXIuc3BsaXQoZXhwciwgW10pO1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0Ly8gbmFtZSwgZmlyc3RcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHZhciBjb250ZXh0LCBuYW1lID0gc3BsaXRzLnBvcCgpLCBiYWNrdGlja3M7XHJcblx0XHRcdHZhciBuYW1lU3BsaXQgPSBMZXhlci5zcGxpdChuYW1lLnRyaW0oKSwgW1N0YXRpYy5zZXBhcmF0b3JdLCB7cHJlc2VydmVEZWxpbXM6dHJ1ZX0pO1xyXG5cdFx0XHRpZiAobmFtZVNwbGl0Lmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0XHRuYW1lID0gbmFtZVNwbGl0LnBvcCgpLnN1YnN0cigxKTtcclxuXHRcdFx0XHRzcGxpdHMgPSBzcGxpdHMuY29uY2F0KG5hbWVTcGxpdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF93cmFwcGVkKG5hbWUsICdgJywgJ2AnKSkge1xyXG5cdFx0XHRcdG5hbWUgPSBfdW53cmFwKG5hbWUsICdgJywgJ2AnKTtcclxuXHRcdFx0XHRiYWNrdGlja3MgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBjb250ZXh0LCBzZWNvbmRcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChzcGxpdHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0Y29udGV4dCA9IHBhcnNlQ2FsbGJhY2soc3BsaXRzLmpvaW4oJycpKTtcclxuXHRcdFx0XHRjb250ZXh0LmlzQ29udGV4dCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF93cmFwcGVkKG5hbWUsICdbJywgJ10nKSkge1xyXG5cdFx0XHRcdGlmICghY29udGV4dCkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZmVyZW5jZTogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuYW1lID0gcGFyc2VDYWxsYmFjayhfdW53cmFwKG5hbWUsICdbJywgJ10nKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoY29udGV4dCwgbmFtZSwgYmFja3RpY2tzKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agc3RyaW5nXHJcbiAqL1xyXG5SZWZlcmVuY2Uuc2VwYXJhdG9yID0gJy4nO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBSZWZlcmVuY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBSZXR1cm5JbnRlcmZhY2UgZnJvbSAnLi9SZXR1cm5JbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBSZXQgKHJldHVybikgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBSZXR1cm4gPSBjbGFzcyBleHRlbmRzIFJldHVybkludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihleHByKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5leHByID0gZXhwcjtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHByID8gdGhpcy5leHByLmV2YWwoY29udGV4dCwgdHJhcCkgOiB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHIgPyAncmV0dXJuICcgKyB0aGlzLmV4cHIudG9TdHJpbmcoY29udGV4dCkgOiAncmV0dXJuJztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqL1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBSZXR1cm4pIHtcclxuXHRcdHZhciBleHByTGMgPSBleHByLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRpZiAoZXhwckxjLnN0YXJ0c1dpdGgoJ3JldHVybiAnKSB8fCBleHByTGMgPT09ICdyZXR1cm4nKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soZXhwci5zdWJzdHIoNikudHJpbSgpKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgUmV0dXJuO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogU3RySW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdTdHJpbmdUeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgU3RySW50ZXJmYWNlIGZyb20gJy4vU3RySW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuaW1wb3J0IEJvb2wgZnJvbSAnLi9Cb29sLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogU3RyaW5nIHV0aWxzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmNvbnN0IFN0ciA9IGNsYXNzIGV4dGVuZHMgU3RySW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGV4cHIsIHF1b3RlKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5leHByID0gZXhwcjtcclxuXHRcdHRoaXMucXVvdGUgPSBxdW90ZTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbCgpIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHI7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5xdW90ZSArIHRoaXMuZXhwciArIHRoaXMucXVvdGU7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBTdHIpIHtcclxuXHRcdGV4cHIgPSBleHByLnRyaW0oKTtcclxuXHRcdGlmICgoX3dyYXBwZWQoZXhwciwgJ1wiJywgJ1wiJykgfHwgX3dyYXBwZWQoZXhwciwgXCInXCIsIFwiJ1wiKSkgXHJcblx0XHQmJiAhTGV4ZXIubWF0Y2goZXhwciwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgcXVvdGUgPSBfd3JhcHBlZChleHByLCAnXCInLCAnXCInKSA/ICdcIicgOiBcIidcIjtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0X3Vud3JhcChleHByLCBxdW90ZSwgcXVvdGUpLFxyXG5cdFx0XHRcdHF1b3RlXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBTdHI7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBKc2VuIGZyb20gJy4vSnNlbi5qcyc7XHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4vRXhwckludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuL0xleGVyLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgQWJzdHJhY3Rpb24gZnJvbSAnLi9FeHByL0Fic3RyYWN0aW9uLmpzJztcclxuaW1wb3J0IEFic3RyYWN0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9BYnN0cmFjdGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBBcnIgZnJvbSAnLi9FeHByL0Fyci5qcyc7XHJcbmltcG9ydCBBcnJJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0FyckludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBBcmd1bWVudHMgZnJvbSAnLi9FeHByL0FyZ3VtZW50cy5qcyc7XHJcbmltcG9ydCBBcmd1bWVudHNJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0FyZ3VtZW50c0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRpb24gZnJvbSAnLi9FeHByL0Fzc2VydGlvbi5qcyc7XHJcbmltcG9ydCBBc3NlcnRpb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Fzc2VydGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBBc3NpZ25tZW50IGZyb20gJy4vRXhwci9Bc3NpZ25tZW50LmpzJztcclxuaW1wb3J0IEFzc2lnbm1lbnRJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Fzc2lnbm1lbnRJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQm9vbCBmcm9tICcuL0V4cHIvQm9vbC5qcyc7XHJcbmltcG9ydCBCb29sSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Cb29sSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENhbGwgZnJvbSAnLi9FeHByL0NhbGwuanMnO1xyXG5pbXBvcnQgQ2FsbEludGVyZmFjZSBmcm9tICcuL0V4cHIvQ2FsbEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb21wYXJpc29uIGZyb20gJy4vRXhwci9Db21wYXJpc29uLmpzJztcclxuaW1wb3J0IENvbXBhcmlzb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0NvbXBhcmlzb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vRXhwci9Db25kaXRpb24uanMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Db25kaXRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgRGVsZXRpb24gZnJvbSAnLi9FeHByL0RlbGV0aW9uLmpzJztcclxuaW1wb3J0IERlbGV0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9EZWxldGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBGdW5jIGZyb20gJy4vRXhwci9GdW5jLmpzJztcclxuaW1wb3J0IEZ1bmNJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Z1bmNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgSWYgZnJvbSAnLi9FeHByL0lmLmpzJztcclxuaW1wb3J0IElmSW50ZXJmYWNlIGZyb20gJy4vRXhwci9JZkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBNYXRoIGZyb20gJy4vRXhwci9NYXRoLmpzJztcclxuaW1wb3J0IE1hdGhJbnRlcmZhY2UgZnJvbSAnLi9FeHByL01hdGhJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTnVtIGZyb20gJy4vRXhwci9OdW0uanMnO1xyXG5pbXBvcnQgTnVtSW50ZXJmYWNlIGZyb20gJy4vRXhwci9OdW1JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgT2JqIGZyb20gJy4vRXhwci9PYmouanMnO1xyXG5pbXBvcnQgT2JqSW50ZXJmYWNlIGZyb20gJy4vRXhwci9PYmpJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgUHJlc2VuY2UgZnJvbSAnLi9FeHByL1ByZXNlbmNlLmpzJztcclxuaW1wb3J0IFByZXNlbmNlSW50ZXJmYWNlIGZyb20gJy4vRXhwci9QcmVzZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2UgZnJvbSAnLi9FeHByL1JlZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZXR1cm4gZnJvbSAnLi9FeHByL1JldHVybi5qcyc7XHJcbmltcG9ydCBSZXR1cm5JbnRlcmZhY2UgZnJvbSAnLi9FeHByL1JldHVybkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBTdGF0ZW1lbnRzIGZyb20gJy4vRXhwci9TdGF0ZW1lbnRzLmpzJztcclxuaW1wb3J0IFN0YXRlbWVudHNJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1N0YXRlbWVudHNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgU3RyIGZyb20gJy4vRXhwci9TdHIuanMnO1xyXG5pbXBvcnQgU3RySW50ZXJmYWNlIGZyb20gJy4vRXhwci9TdHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIEB2YXIgb2JqZWN0XHJcbiAqL1xyXG5Kc2VuLmdyYW1tYXJzID0ge1xyXG5cdElmOiBJZixcdFx0XHRcdFx0XHQvLyBpZiAoY29uZGl0aW9uKSBleHByMSBlbHNlIGV4cHJlMlxyXG5cdC8vU3RhdGVtZW50czogU3RhdGVtZW50cyxcdFx0Ly8gZmllbGQxID0gMzsgZmllbGQyID0gdmFsMlxyXG5cdFJldHVybjogUmV0dXJuLFx0XHRcdFx0Ly8gcmV0dXJuIGZpZWxkMVxyXG5cdERlbGV0aW9uOiBEZWxldGlvbixcdFx0XHQvLyBkZWxldGUgZmllbGQxXHJcblx0QXNzaWdubWVudDogQXNzaWdubWVudCxcdFx0Ly8gZmllbGQxW2tleTFdLmtleTIgPSBrXHJcblx0UHJlc2VuY2U6IFByZXNlbmNlLFx0XHRcdC8vIGtleTEgaW4gZmllbGQxXHJcblx0RnVuYzogRnVuYyxcdFx0XHRcdFx0Ly8gKGZpZWxkMSwgZmllbGQyKSA9PiB7fVxyXG5cdEFic3RyYWN0aW9uOiBBYnN0cmFjdGlvbixcdC8vIChmaWVsZDEpXHJcblx0Q29uZGl0aW9uOiBDb25kaXRpb24sXHRcdC8vIGZpZWxkMSA+IGZpZWxkMiA/IHZhbDEgOiB2YWwyXHJcblx0QXNzZXJ0aW9uOiBBc3NlcnRpb24sXHRcdC8vICFmaWVsZDEgJiYgZmllbGQyXHJcblx0Q29tcGFyaXNvbjogQ29tcGFyaXNvbixcdFx0Ly8gZmllbGQxID4gZmllbGQyXHJcblx0TWF0aDogTWF0aCxcdFx0XHRcdFx0Ly8gZmllbGQxICsgZmllbGQyXHJcblx0QXJyOiBBcnIsXHRcdFx0XHRcdC8vIFtmaWVsZDEsIGZpZWxkMl1cclxuXHRPYmo6IE9iaixcdFx0XHRcdFx0Ly8ge2ZpZWxkMTp2YWwxLCBmaWVsZDI6dmFsMn1cclxuXHROdW06IE51bSxcdFx0XHRcdFx0Ly8gWzAtOV1cclxuXHRTdHI6IFN0cixcdFx0XHRcdFx0Ly8gXCJcIlxyXG5cdEJvb2w6IEJvb2wsXHRcdFx0XHRcdC8vIHRydWVcclxuXHRDYWxsOiBDYWxsLFx0XHRcdFx0XHQvLyBmaWVsZDEoKVxyXG5cdFJlZmVyZW5jZTogUmVmZXJlbmNlLFx0XHQvLyBmaWVsZDFcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IHtcclxuXHRFeHBySW50ZXJmYWNlLFxyXG5cdExleGVyLFxyXG5cdENvbnRleHRzXHJcbn07XHJcbmV4cG9ydCB7XHJcblx0QWJzdHJhY3Rpb24sXHJcblx0QXJyLFxyXG5cdEFyZ3VtZW50cyxcclxuXHRBc3NlcnRpb24sXHJcblx0QXNzaWdubWVudCxcclxuXHRCb29sLFxyXG5cdENhbGwsXHJcblx0Q29tcGFyaXNvbixcclxuXHRDb25kaXRpb24sXHJcblx0RGVsZXRpb24sXHJcblx0RnVuYyxcclxuXHRJZixcclxuXHRNYXRoLFxyXG5cdE51bSxcclxuXHRPYmosXHJcblx0UHJlc2VuY2UsXHJcblx0UmVmZXJlbmNlLFxyXG5cdFJldHVybixcclxuXHRTdHIsXHJcblx0U3RhdGVtZW50c1xyXG59O1xyXG5leHBvcnQge1xyXG5cdEFic3RyYWN0aW9uSW50ZXJmYWNlLFxyXG5cdEFyckludGVyZmFjZSxcclxuXHRBcmd1bWVudHNJbnRlcmZhY2UsXHJcblx0QXNzZXJ0aW9uSW50ZXJmYWNlLFxyXG5cdEFzc2lnbm1lbnRJbnRlcmZhY2UsXHJcblx0Qm9vbEludGVyZmFjZSxcclxuXHRDYWxsSW50ZXJmYWNlLFxyXG5cdENvbXBhcmlzb25JbnRlcmZhY2UsXHJcblx0Q29uZGl0aW9uSW50ZXJmYWNlLFxyXG5cdERlbGV0aW9uSW50ZXJmYWNlLFxyXG5cdEZ1bmNJbnRlcmZhY2UsXHJcblx0SWZJbnRlcmZhY2UsXHJcblx0TWF0aEludGVyZmFjZSxcclxuXHROdW1JbnRlcmZhY2UsXHJcblx0T2JqSW50ZXJmYWNlLFxyXG5cdFByZXNlbmNlSW50ZXJmYWNlLFxyXG5cdFJlZmVyZW5jZUludGVyZmFjZSxcclxuXHRSZXR1cm5JbnRlcmZhY2UsXHJcblx0U3RySW50ZXJmYWNlLFxyXG5cdFN0YXRlbWVudHNJbnRlcmZhY2VcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgSnNlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm9iamVjdFwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIG9iamVjdCwgaW5jbHVkaW5nIGJ1aWx0LWlucy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImFycmF5XCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJ1bmRlZmluZWRcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBudWxsLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09ICcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBwdXJlIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuICFBcnJheS5pc0FycmF5KHZhbCkgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNUeXBlQXJyYXkgZnJvbSAnLi4vanMvaXNUeXBlQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnLi4vanMvaXNFbXB0eS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIENhc3RzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IHRvIGFuIGFycmF5LlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHR2YWxcclxuICogQHBhcmFtIGJvb2xcdCBcdGNhc3RPYmplY3RcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsLCBjYXN0T2JqZWN0ID0gdHJ1ZSkge1xyXG5cdGlmIChfaXNBcnJheSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gdmFsO1xyXG5cdH07XHJcblx0aWYgKCFjYXN0T2JqZWN0ICYmIF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW3ZhbF07XHJcblx0fTtcclxuXHRpZiAodmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IDAgJiYgX2lzRW1wdHkodmFsKSkge1xyXG5cdFx0cmV0dXJuIFtdO1xyXG5cdH07XHJcblx0aWYgKF9pc1R5cGVBcnJheSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmFsKTtcclxuXHR9O1xyXG5cdGlmIChfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIE9iamVjdC52YWx1ZXModmFsKTtcclxuXHR9O1xyXG5cdHJldHVybiBbdmFsXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bGwgZnJvbSAnLi9pc051bGwuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuL2lzVHlwZU9iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIGVtcHR5IGluIGl0cyBvd24gdHlwZS5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBOVUxMcywgVU5ERUZJTkVELCBGQUxTRSwgMCxcclxuICogb2JqZWN0cyB3aXRob3V0IGtleXMsIGVtcHR5IGFycmF5cy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBfaXNOdWxsKHZhbCkgfHwgX2lzVW5kZWZpbmVkKHZhbCkgfHwgdmFsID09PSBmYWxzZSB8fCB2YWwgPT09IDAgXHJcblx0XHR8fCAoX2lzVHlwZU9iamVjdCh2YWwpICYmICFPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIFwiYXJyYXktbGlrZVwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIHRoYXQgaGFzIGEgbGVuZ3RoIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIV9pc1N0cmluZyh2YWwpICYmICFfaXNVbmRlZmluZWQodmFsLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuLi9qcy9pc1N0cmluZy5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFuIG9iamVjdCBmb3IgdGhlIGdpdmVuIHBhaXIocykgb2YgaW5wdXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXkgXHRcdFx0a2V5XHJcbiAqIEBwYXJhbSBtaXhlZHxhcnJheVx0XHRcdHZhbCBcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGtleSwgdmFsID0gbnVsbCkge1xyXG5cdHZhciBvYmogPSB7fTtcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0aWYgKF9pc1N0cmluZyhrZXkpKSB7XHJcblx0XHRcdG9ialtrZXldID0gdmFsO1xyXG5cdFx0fSBlbHNlIGlmIChfaXNBcnJheShrZXkpICYmIF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdFx0a2V5LmZvckVhY2goKGssIGkpID0+IG9ialtrXSA9IHZhbFtpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBvYmo7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIiBvciBhIG51bWVyaWMgc3RyaW5nLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggbnVtYmVycyBhbmQgbnVtZXJpYyBzdHJpbmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCAhPT0gdHJ1ZSAmJiB2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09ICcnICYmICFpc05hTih2YWwgKiAxKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVGdW5jdGlvbiBmcm9tICcuL2lzVHlwZUZ1bmN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBfaXNUeXBlRnVuY3Rpb24odmFsKSB8fCAodmFsICYmIHt9LnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgZnVuY3Rpb25dJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggcmVndWxhciBmdW5jdGlvbnMgYW5kIGNsYXNzZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgb2JqIGZsYXRseSB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIFN0b3BzIHdoZW4gY2FsbGJhY2sgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqIFx0XHRcdFRoZSBhcnJheSBvciBvYmplY3QgdG8gaXRlcmF0ZS5cclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRcdFx0Y2FsbGJhY2sgXHRcdFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybiBtaXhlZHxudWxsXHRcdFx0QW55IG5vbi1udWxsIHJldHVybiBmcm9tIGNhbGxiYWNrXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XHJcblx0dmFyIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdGlmIChfaXNUeXBlT2JqZWN0KG9iaikpIHtcclxuXHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoaywgaSkgPT4ge1xyXG5cdFx0XHRpZiAocmV0dXJuVmFsdWUgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuVmFsdWUgPSBjYWxsYmFjayhfaXNOdW1lcmljKGspID8gcGFyc2VGbG9hdChrKSA6IGssIG9ialtrXSwgaSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEV2ZW50IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0dGhpcy4kID0ge307XHJcblx0XHR0aGlzLiQudGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdFx0dGhpcy4kLmRldGFpbHMgPSBkZXRhaWxzO1xyXG5cdFx0dGhpcy4kLnByb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy4kLmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuJC5wcm9taXNlc0luc3RhbmNlID0gbnVsbDtcclxuXHRcdHRoaXMuJC5wcm9taXNlcyA9IFtdO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdF9lYWNoKGRldGFpbHMsIChwcm9wLCB2YWx1ZSkgPT4ge1xyXG5cdFx0XHRpZiAocHJvcCAhPT0gJyQnKSB7XHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3AsIHt2YWx1ZX0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIFwidGFyZ2V0XCIgb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheXxvYmplY3RcclxuXHQgKi9cclxuXHRnZXQgdGFyZ2V0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC50YXJnZXQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBcImRldGFpbHNcIiBvYmplY3QuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGdldCBkZXRhaWxzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5kZXRhaWxzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQgKiBSRVNQT05TRSBIQU5ETEVSU1xyXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIHRoZSBldm50IGZyb20gcmVhY2hpbmcgb3RoZXIgbGlzdGVuZXJzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c3RvcFByb3BhZ2F0aW9uKCkge1xyXG5cdFx0dGhpcy4kLnByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSB0ZWxscyBpZiBzdG9wUHJvcGFnYXRpb24oKSBoYXMgYmVlbiBjYWxsZWQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRnZXQgcHJvcGFnYXRpb25TdG9wcGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5wcm9wYWdhdGlvblN0b3BwZWQ7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogU2V0cyBhIGRpc3Bvc2l0aW9uIHRoYXQgYXNrcyBldmVudCBpbml0aWF0b3Igbm90IHRvXHJcblx0ICogcHJvY2VlZCB3aXRoIGRlZmF1bHQgYWN0aW9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cHJldmVudERlZmF1bHQoKSB7XHJcblx0XHR0aGlzLiQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSB0ZWxscyBpZiBwcmV2ZW50RGVmYXVsdCgpIGhhcyBiZWVuIGNhbGxlZC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5kZWZhdWx0UHJldmVudGVkO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYSBQcm9taXNlIGRpc3Bvc2l0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIFByb21pc2VcdHByb21pc2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHByb21pc2UocHJvbWlzZSkge1xyXG5cdFx0aWYgKCEocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignRXZlbnQucHJvbWlzZSgpIG11c3QgYmUgY2FsbGVkIHdpdGggYSBQcm9taXNlLicpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLnByb21pc2VzLnB1c2gocHJvbWlzZSk7XHJcblx0XHR0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSA9IG51bGw7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSByZXR1cm5zIGFsbCBwcm9taXNlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZXxudWxsXHJcblx0ICovXHJcblx0Z2V0IHByb21pc2VzKCkge1xyXG5cdFx0aWYgKCF0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSAmJiB0aGlzLiQucHJvbWlzZXMubGVuZ3RoKSB7XHJcblx0XHRcdHRoaXMuJC5wcm9taXNlc0luc3RhbmNlID0gUHJvbWlzZS5hbGwodGhpcy4kLnByb21pc2VzKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLiQucHJvbWlzZXNJbnN0YW5jZTtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGRpc3Bvc2l0aW9uIHZhbHVlIGFuZFxyXG5cdCAqIGNhbGxzIGFuIGFwcHJvcHJpYXRlIGRpc3Bvc2l0aW9uIG1ldGhvZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbXMgbWl4ZWQgXHRyc3Buc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVzcG9uc2UocnNwbnMpIHtcclxuXHRcdHZhciBwcm9tcztcclxuXHRcdHZhciBpc0V2ZW50ID0gX2lzT2JqZWN0KHJzcG5zKSAmJiAhX2lzVW5kZWZpbmVkKHJzcG5zLnByb3BhZ2F0aW9uU3RvcHBlZCkgJiYgIV9pc1VuZGVmaW5lZChyc3Bucy5kZWZhdWx0UHJldmVudGVkKVxyXG5cdFx0aWYgKChyc3BucyA9PT0gZmFsc2UpIHx8IChpc0V2ZW50ICYmIHJzcG5zLnByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcclxuXHRcdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH0gZWxzZSBpZiAoKHJzcG5zID09PSBmYWxzZSkgfHwgKGlzRXZlbnQgJiYgcnNwbnMuZGVmYXVsdFByZXZlbnRlZCkpIHtcclxuXHRcdFx0dGhpcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fSBlbHNlIGlmICgocnNwbnMgaW5zdGFuY2VvZiBQcm9taXNlICYmIChwcm9tcyA9IHJzcG5zKSlcclxuXHRcdHx8IChpc0V2ZW50ICYmIChwcm9tcyA9IHJzcG5zLnByb21pc2VzKSkpIHtcclxuXHRcdFx0dGhpcy5wcm9taXNlKHByb21zKTtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUXVlcnlFdmVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEV2ZW50IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0c3VwZXIodGFyZ2V0LCBkZXRhaWxzKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm51bWJlclwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIGFuIG9iamVjdCBpcyBkaXJlY3QgaW5zdGFuY2Ugb2YgT2JqZWN0LnByb3RvdHlwZS5cclxuICogUXVpdGUgdXNlZnVsIGluIGRpZmZlcmVudGlhdGluZyBuYXRpdmUgb2JqZWN0cyBhbmQgY2xhc3MgaW5zdGFuY2VzIGZyb20gcGxhaW4gb2JqZWN0cyAoe30pLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0b2JqXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqKSB7XHJcblx0cmV0dXJuIF9pc09iamVjdChvYmopICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgb2YgdHlwZSBcImJvb2xlYW5cIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bWJlciBmcm9tICcuLi9qcy9pc051bWJlci5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1BsYWluT2JqZWN0IGZyb20gJy4uL2pzL2lzUGxhaW5PYmplY3QuanMnO1xyXG5pbXBvcnQgX2NvbXBhcmVDYWxsYmFjayBmcm9tICcuL2NvbXBhcmVDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQXNzZXJ0cyAobWVtYmVycyBvZikgdGhlIGZpcnN0IHZhbHVlIGFnYWluc3QgKG1lbWJlcnMgb2YpIHN1YnNlcXVlbnQgdmFsdWVzLlxyXG4gKiBBc3NlcnRpb24gY291bGQgYmUgVFJVRSwgRkFMU0UsIG9yIGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajFcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajJcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdFx0YXNzZXJ0aW9uXHJcbiAqIEBwYXJhbSBpbnRcdFx0XHRcdGRlcHRoXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuY29uc3QgX2V2ZW4gPSBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBkZXB0aCA9IDEpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikgJiYgb2JqMS5sZW5ndGggIT09IG9iajIubGVuZ3RoKSB7XHJcblx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHR9XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciBvYmoxS2V5cyA9IE9iamVjdC5rZXlzKG9iajEpO1xyXG5cdFx0dmFyIG9iajJLZXlzID0gT2JqZWN0LmtleXMob2JqMik7XHJcblx0XHRpZiAoIW9iajFLZXlzLmxlbmd0aCAmJiAhb2JqMktleXMubGVuZ3RoKSB7XHJcblx0XHRcdC8vIE9iamVjdHMgdGhhdCB3b24ndCBzaG93IGtleXMgbXVzdCBiZSBjb21wYXJlZCBieSBpbnN0YW5jZVxyXG5cdFx0XHQvLyBNYW55IG5hdGl2ZSBvYmplY3RzIHdvbid0LiBTbyB3ZSBjYW4ndCBqdWRnZSBieSBrZXlzIGFsb25lLlxyXG5cdFx0XHRyZXR1cm4gX2lzUGxhaW5PYmplY3Qob2JqMSkgJiYgX2lzUGxhaW5PYmplY3Qob2JqMikgXHJcblx0XHRcdFx0PyBhc3NlcnRpb25cclxuXHRcdFx0XHQ6IChvYmoxID09PSBvYmoyKSA9PT0gYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFfZXZlbihvYmoxS2V5cywgb2JqMktleXMpKSB7XHJcblx0XHRcdHJldHVybiAhYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoZGVwdGggPiAwICYmICgoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHx8IChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSkpIHtcclxuXHRcdHZhciByZXN1bHQgPSBfY29tcGFyZUNhbGxiYWNrKG9iajEsIG9iajIsICh2MSwgdjIpID0+IHtcclxuXHRcdFx0cmV0dXJuIF9ldmVuKHYxLCB2MiwgYXNzZXJ0aW9uLCBkZXB0aCAtIDEpO1xyXG5cdFx0fSwgZmFsc2UvKm5ldENvbXBhcmlzb24qLywgZmFsc2UvKmNvbnRyYXN0Ki8sIHRydWUvKnJldHVybk9uRmlyc3RGYWxzZSovKTtcclxuXHRcdHJldHVybiBfaXNBcnJheShyZXN1bHQpIFxyXG5cdFx0XHQ/IHJlc3VsdC5sZW5ndGggPT09IG9iajEubGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPT09IG9iajIubGVuZ3RoIFxyXG5cdFx0XHQ6IChfaXNPYmplY3QocmVzdWx0KSAmJiBfaXNPYmplY3Qob2JqMSkgXHJcblx0XHRcdFx0PyBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICYmIE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAgT2JqZWN0LmtleXMob2JqMikubGVuZ3RoIFxyXG5cdFx0XHRcdDogcmVzdWx0KTtcclxuXHR9XHJcblx0cmV0dXJuIF9pc0Z1bmN0aW9uKGFzc2VydGlvbikgPyBhc3NlcnRpb24ob2JqMSwgb2JqMikgOiAoXHJcblx0XHRfaXNOdW1iZXIob2JqMSkgJiYgX2lzTnVtYmVyKG9iajIpICYmIGlzTmFOKG9iajEpICYmIGlzTmFOKG9iajIpIFxyXG5cdFx0XHQ/IGFzc2VydGlvbiBcclxuXHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvblxyXG5cdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IF9ldmVuO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzQm9vbGVhbiBmcm9tICcuLi9qcy9pc0Jvb2xlYW4uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnLi9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBtYXRjaChlcykgYmV0d2VlbiAobWVtYmVycyBvZikgdHdvIHZhbHVlcztcclxuICogYXNzZXJ0aW9uIG9wdGlvbmFsbHkgY3VzdG9tLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2IxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBzdHJpbmd8ZnVuY3Rpb25cdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0bmV0Q29tcGFyaXNvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0Y29udHJhc3RcclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdHJldHVybk9uRmlyc3RGYWxzZVxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8YXJyYXl8b2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBuZXRDb21wYXJpc29uID0gdHJ1ZSwgY29udHJhc3QgPSBmYWxzZSwgcmV0dXJuT25GaXJzdEZhbHNlID0gZmFsc2UpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRvYmoxLmZvckVhY2godjEgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRfZWFjaChvYmoyLCAoaywgdjIpID0+IHtcclxuXHRcdFx0XHRpZiAoIXRlc3RQYXNzIHx8IChuZXRDb21wYXJpc29uICYmIF9pc1R5cGVPYmplY3QodjEpKSkge1xyXG5cdFx0XHRcdFx0dGVzdFBhc3MgPSBhc3NlcnRpb24odjEsIHYyKTtcclxuXHRcdFx0XHRcdGlmICgoX2lzQXJyYXkodGVzdFBhc3MpICYmICF0ZXN0UGFzcy5sZW5ndGgpIHx8IChfaXNPYmplY3QodGVzdFBhc3MpICYmICFPYmplY3Qua2V5cyh0ZXN0UGFzcykubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKF9pc1R5cGVPYmplY3QodGVzdFBhc3MpICYmIG5ldENvbXBhcmlzb24pIHtcclxuXHRcdFx0XHRcdFx0Ly8gRnVydGhlciByZWN1cnNpb25zIHNob3VsZCB1c2UgdGhpcyB0ZXN0UGFzcyBhcyB2MVxyXG5cdFx0XHRcdFx0XHR2MSA9IHRlc3RQYXNzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IHYxKTtcclxuXHRcdFx0fSBlbHNlIGlmICghX2lzQm9vbGVhbih0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh0ZXN0UGFzcyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAocmV0dXJuT25GaXJzdEZhbHNlKSB7XHJcblx0XHRcdFx0Y29udG4gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHRcclxuXHRpZiAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0dmFyIGNvbnRuID0gdHJ1ZTtcclxuXHRcdE9iamVjdC5rZXlzKG9iajEpLmZvckVhY2goayA9PiB7XHJcblx0XHRcdGlmICghY29udG4pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHRlc3RQYXNzID0gYXNzZXJ0aW9uKG9iajFba10sIG9iajJba10pO1xyXG5cdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IG9iajFba107XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gdGVzdFBhc3M7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBGaXJlYWJsZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogU2V0cyBhIFwiZGlzY29ubmVjdGVkXCIgZmxhZyBvbiB0aGUgRmlyZWFibGUuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRkaXNjb25uZWN0KCkge1xyXG5cdFx0dGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBGaXJlYWJsZSBmcm9tICcuL0ZpcmVhYmxlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEZpcmViYXNlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzID0gW107XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cyA9IFtdO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGRzIGFuIEZpcmVhYmxlIGluc3RhbmNlXHJcblx0ICogd2l0aCBvcHRpb25hbCB0YWdzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEZpcmVhYmxlXHRcdFx0ZmlyZWFibGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRmlyZWFibGVcclxuXHQgKi9cclxuXHRhZGRGaXJlYWJsZShmaXJlYWJsZSkge1xyXG5cdFx0dGhpcy5maXJlYWJsZXMucHVzaChmaXJlYWJsZSk7XHJcblx0XHRyZXR1cm4gZmlyZWFibGU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgYW4gRmlyZWFibGUgaW5zdGFuY2VcclxuXHQgKiB3aXRoIG9wdGlvbmFsIHRhZ3MuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRmlyZWFibGVcdFx0XHRmaXJlYWJsZVxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHRcdFx0dGFnc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVtb3ZlRmlyZWFibGUoZmlyZWFibGUsIHRhZ3MgPSBbXSkge1xyXG5cdFx0dGhpcy5maXJlYWJsZXMgPSB0aGlzLmZpcmVhYmxlcy5maWx0ZXIoX2ZpcmVhYmxlID0+IF9maXJlYWJsZSAhPT0gZmlyZWFibGUpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBGaW5kcyB0aGUgT2JzZXJ2ZXIgaW5zdGFuY2VzXHJcblx0ICogd2l0aCB0aGUgZ2l2ZW4gcXVlcnkgcGFyYW1ldGVycy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRxdWVyeVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGZpbmRGaXJlYWJsZXMocXVlcnkpIHtcclxuXHRcdHJldHVybiB0aGlzLmZpcmVhYmxlcy5maWx0ZXIob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRyZXR1cm4gKCFxdWVyeS5oYW5kbGVyIHx8IG9ic2VydmVyLmhhbmRsZXIgPT09IHF1ZXJ5LmhhbmRsZXIpICYmICghcXVlcnkucGFyYW1zIHx8IChcclxuXHRcdFx0XHQoIXF1ZXJ5LnBhcmFtcy50eXBlIHx8IG9ic2VydmVyLnBhcmFtcy50eXBlID09PSBxdWVyeS5wYXJhbXMudHlwZSlcclxuXHRcdFx0XHQmJiAoIXF1ZXJ5LnBhcmFtcy50YWdzIHx8IF9pbnRlcnNlY3Qob2JzZXJ2ZXIucGFyYW1zLnRhZ3MgfHwgW10sIHF1ZXJ5LnBhcmFtcy50YWdzKS5sZW5ndGggPT09IHF1ZXJ5LnBhcmFtcy50YWdzLmxlbmd0aClcclxuXHRcdFx0KSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0b2JqZWN0XHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHR0eXBlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEZpcmViYXNlXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldCAob2JqZWN0LCB0eXBlLCBCYXNlKSB7XHJcblx0XHRpZiAob2JqZWN0ICYmIF9pc1R5cGVPYmplY3Qob2JqZWN0KSkge1xyXG5cdFx0XHR2YXIgZmlyZWJhc2VzO1xyXG5cdFx0XHRpZiAoIShmaXJlYmFzZXMgPSBvYmplY3RbZmlyZWJhc2VLZXldKSkge1xyXG5cdFx0XHRcdGZpcmViYXNlcyA9IHt9O1xyXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGZpcmViYXNlS2V5LCB7XHJcblx0XHRcdFx0XHRnZXQ6KCkgPT4gZmlyZWJhc2VzLFxyXG5cdFx0XHRcdFx0c2V0OnZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0aWYgKHZhbHVlICE9PSBmaXJlYmFzZXMpIHtcclxuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHQgdG8gb3ZlcndyaXRlIHRoZSBcIicgKyBmaXJlYmFzZUtleSArICdcIiBzcGVjaWFsIHByb3BlcnR5IScpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0ZW51bWVyYWJsZTpmYWxzZSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmaXJlYmFzZXNbdHlwZV0gPSB0eXBlID09PSAnbGlzdGVuZXJzJyA/IG5ldyBCYXNlKG9iamVjdCkgOiBuZXcgQmFzZTtcclxuXHRcdFx0cmV0dXJuIGZpcmViYXNlc1t0eXBlXTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0dHlwZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBGaXJlYmFzZVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0LCB0eXBlKSB7XHJcblx0XHR2YXIgZmlyZWJhc2VzO1xyXG5cdFx0aWYgKG9iamVjdCAmJiBfaXNUeXBlT2JqZWN0KG9iamVjdCkgJiYgKGZpcmViYXNlcyA9IG9iamVjdFtmaXJlYmFzZUtleV0pKSB7XHJcblx0XHRcdHJldHVybiBmaXJlYmFzZXNbdHlwZV07XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEB2YXIgc3RyaW5nXHJcbiAqL1xyXG5jb25zdCBmaXJlYmFzZUtleSA9ICc8IHIgZSBmIGwgZSB4ID4nO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaW50ZXJzZWN0aW9uIG9mIHR3byBhcnJheXM7XHJcbiAqIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gbWF0Y2hpbmcgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdGFycjJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhcnIyLCBjYWxsYmFjayA9IG51bGwpIHtcclxuXHRyZXR1cm4gIV9pc0FycmF5KGFycjIpID8gW10gOiBhcnIuZmlsdGVyKHZhbDEgPT4gY2FsbGJhY2sgXHJcblx0XHQ/IGFycjIuZmlsdGVyKHZhbDIgPT4gY2FsbGJhY2sodmFsMSwgdmFsMikpLmxlbmd0aCBcclxuXHRcdDogYXJyMi5pbmRleE9mKHZhbDEpICE9PSAtMVxyXG5cdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IEZpcmVhYmxlIGZyb20gJy4vRmlyZWFibGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgVHJhcCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEZpcmVhYmxlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0aGFuZGxlclxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihoYW5kbGVyLCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENhbGxzIHRoZSBvYnNlcnZlcidzIGhhbmRsZXIgZnVuY3Rpb25cclxuXHQgKiBvbiBtYXRjaGluZyB3aXRoIHRoZSBldmVudCdzIGZpZWxkcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBNdXRhdGlvbkV2ZW50XHRcdFx0IFx0ZXZ0XHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdG5leHRcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0XHRcdFx0IFx0cmVjaWV2ZWRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0LCBuZXh0LCByZWNpZXZlZCkge1xyXG5cdFx0aWYgKHRoaXMuZGlzY29ubmVjdGVkIHx8ICh0aGlzLnBhcmFtcy50eXBlICYmIHRoaXMucGFyYW1zLnR5cGUgIT09IGV2dC50eXBlKSkge1xyXG5cdFx0XHRyZXR1cm4gbmV4dCguLi5fYXJyRnJvbShhcmd1bWVudHMpLnNsaWNlKDIpKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZXIoZXZ0LCByZWNpZXZlZCwgbmV4dCk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IEZpcmViYXNlIGZyb20gJy4vRmlyZWJhc2UuanMnO1xyXG5pbXBvcnQgVHJhcCBmcm9tICcuL1RyYXAuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUmVhY3RpdmUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhcEJhc2UgZXh0ZW5kcyBGaXJlYmFzZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmlyZXMgYWxsIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBldnQgKGNoYW5nZSkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRXZlbnRcdFx0XHRcdGV2dFxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdGRlZmF1bHRIYW5kbGVyXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0ZmlyZShldnQsIGRlZmF1bHRIYW5kbGVyID0gbnVsbCkge1xyXG5cdFx0aWYgKHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gZXZ0LnR5cGUgJiYgZS5xdWVyeSA9PT0gZXZ0LnF1ZXJ5KS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRIYW5kbGVyID8gZGVmYXVsdEhhbmRsZXIoKSA6IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnB1c2goZXZ0KTtcclxuXHRcdGNvbnN0IG5leHQgPSAoaW5kZXgsIC4uLl9hcmdzKSA9PiB7XHJcblx0XHRcdHZhciB0cmFwID0gdGhpcy5maXJlYWJsZXNbaW5kZXhdO1xyXG5cdFx0XHRpZiAodHJhcCkge1xyXG5cdFx0XHRcdHJldHVybiB0cmFwLmZpcmUoZXZ0LCAoLi4uYXJncykgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5leHQoaW5kZXggKyAxLCAuLi5hcmdzKTtcclxuXHRcdFx0XHR9LypuZXh0Ki8sIC4uLl9hcmdzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZGVmYXVsdEhhbmRsZXIgPyBkZWZhdWx0SGFuZGxlciguLi5fYXJncykgOiBfYXJnc1swXTtcclxuXHRcdH07XHJcblx0XHR2YXIgdmFsdWUgPSBuZXh0KDApO1xyXG5cdFx0dGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMucG9wKCk7XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldChvYmplY3QpIHtcclxuXHRcdHJldHVybiBzdXBlci5jcmVhdGVGb3JUYXJnZXQob2JqZWN0LCAndHJhcHMnLCBUcmFwQmFzZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGdldEZvclRhcmdldChvYmplY3QpIHtcclxuXHRcdHJldHVybiBzdXBlci5nZXRGb3JUYXJnZXQob2JqZWN0LCAndHJhcHMnKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGl0ZW0gaWYgbm90IGFscmVhZHkgZXhpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdC4uLml0bXNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCAuLi5pdGVtcykge1xyXG5cdGl0ZW1zLmZvckVhY2goaXRtID0+IHtcclxuXHRcdGlmIChhcnIuaW5kZXhPZihpdG0pIDwgMCkge1xyXG5cdFx0XHRhcnIucHVzaChpdG0pO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICcuLi9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZ2V0UHJvdG90eXBlQ2hhaW4gZnJvbSAnLi9nZXRQcm90b3R5cGVDaGFpbi5qcyc7XHJcblxyXG4vKipcclxuICogRWFnZXJseSByZXRyaWV2ZXMgb2JqZWN0IG1lbWJlcnMgYWxsIGRvd24gdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR2YXIga2V5c0FsbCA9IFtdO1xyXG5cdF9nZXRQcm90b3R5cGVDaGFpbihvYmosIHVudGlsKS5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRfcHVzaFVuaXF1ZShrZXlzQWxsLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcclxuXHR9KTtcclxuXHRyZXR1cm4ga2V5c0FsbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHVudGlsID0gdW50aWwgfHwgT2JqZWN0LnByb3RvdHlwZTtcclxuXHR1bnRpbCA9IHVudGlsICYmICFfaXNBcnJheSh1bnRpbCkgPyBbdW50aWxdIDogdW50aWw7XHJcblx0Ly8gV2UgZ2V0IHRoZSBjaGFpbiBvZiBpbmhlcml0YW5jZVxyXG5cdHZhciBwcm90b3R5cGFsQ2hhaW4gPSBbXTtcclxuXHR2YXIgb2JqID0gb2JqO1xyXG5cdHdoaWxlKChvYmogJiYgKCF1bnRpbCB8fCB1bnRpbC5pbmRleE9mKG9iaikgPCAwKSAmJiBvYmoubmFtZSAhPT0gJ2RlZmF1bHQnKSkge1xyXG5cdFx0cHJvdG90eXBhbENoYWluLnB1c2gob2JqKTtcclxuXHRcdG9iaiA9IG9iaiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogbnVsbDtcclxuXHR9XHJcblx0cmV0dXJuIHByb3RvdHlwYWxDaGFpbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2dldEFsbFByb3BlcnR5TmFtZXMgZnJvbSAnLi9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2FsbGJhY2sob2JqcywgY2FsbGJhY2ssIGRlZXBQcm9wcyA9IGZhbHNlLCBpc1JlcGxhY2UgPSBmYWxzZSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHR2YXIgb2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHRpZiAoX2lzTnVtZXJpYyhvYmoxKSB8fCBvYmoxID09PSB0cnVlIHx8IG9iajEgPT09IGZhbHNlKSB7XHJcblx0XHRkZXB0aCA9IG9iajE7XHJcblx0XHRvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdH1cclxuXHRpZiAoIW9ianMubGVuZ3RoKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ19tZXJnZSgpIHJlcXVpcmVzIHR3byBvciBtb3JlIGFycmF5L29iamVjdHMuJyk7XHJcblx0fVxyXG5cdG9ianMuZm9yRWFjaCgob2JqMiwgaSkgPT4ge1xyXG5cdFx0aWYgKCFfaXNUeXBlT2JqZWN0KG9iajIpICYmICFfaXNGdW5jdGlvbihvYmoyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQoZGVlcFByb3BzID8gX2dldEFsbFByb3BlcnR5TmFtZXMob2JqMikgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmoyKSkuZm9yRWFjaChrZXkgPT4ge1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoxID0gb2JqMVtrZXldO1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoyID0gb2JqMltrZXldO1xyXG5cdFx0XHRpZiAoKChfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikpIHx8IChfaXNPYmplY3QodmFsQXRPYmoxKSAmJiBfaXNPYmplY3QodmFsQXRPYmoyKSkpIFxyXG5cdFx0XHQmJiAoZGVwdGggPT09IHRydWUgfHwgZGVwdGggPiAwKSkge1xyXG5cdFx0XHRcdC8vIFJFQ1VSU0UuLi5cclxuXHRcdFx0XHRvYmoxW2tleV0gPSBfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikgPyBbXSA6IHt9O1xyXG5cdFx0XHRcdG1lcmdlQ2FsbGJhY2soW19pc051bWVyaWMoZGVwdGgpID8gZGVwdGggLSAxIDogZGVwdGgsIG9iajFba2V5XSwgdmFsQXRPYmoxLCB2YWxBdE9iajJdLCBjYWxsYmFjaywgZGVlcFByb3BzLCBpc1JlcGxhY2UsIHdpdGhTeW1ib2xzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChjYWxsYmFjayhrZXksIG9iajEsIG9iajIsIGkpKSB7XHJcblx0XHRcdFx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNSZXBsYWNlKSB7XHJcblx0XHRcdFx0XHRcdG9iajFba2V5XSA9IHZhbEF0T2JqMjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG9iajEucHVzaCh2YWxBdE9iajIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHdlJ3JlIHNldHRpbmcgYSByZWFkLW9ubHkgcHJvcGVydHlcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGlmICh3aXRoU3ltYm9scykge1xyXG5cdFx0XHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmoxLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqMiwga2V5KSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0b2JqMVtrZXldID0gb2JqMltrZXldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGNhdGNoKGUpIHt9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHRyZXR1cm4gb2JqMTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIENvcGllcyBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0ZmlsdGVyXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGZpbHRlciA9IFtdLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdGlmIChfaXNOdW1lcmljKGFyZ3VtZW50c1swXSkgJiYgX2lzVHlwZU9iamVjdChhcmd1bWVudHNbMV0pKSB7XHJcblx0XHRkZXB0aCA9IGFyZ3VtZW50c1swXTtcclxuXHRcdG9iaiA9IGFyZ3VtZW50c1sxXTtcclxuXHRcdGZpbHRlciA9IGFyZ3VtZW50c1syXSB8fCBbXTtcclxuXHR9XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKFtkZXB0aCwge30sIG9ial0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiBfaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKGtleSkgXHJcblx0XHRcdDogKF9pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA/IGZpbHRlci5pbmRleE9mKGtleSkgPiAtMSA6IHRydWUpO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCB3aXRoU3ltYm9scyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAgKiBNZXJnZXMgdmFsdWVzIGZyb20gc3Vic2VxdWVudCBhcnJheXMvb2JqZWN0cyBmaXJzdCBhcnJheS9vYmplY3Q7XHJcbiAgKiBvcHRpb25hbGx5IHJlY3Vyc2l2ZVxyXG4gICpcclxuICAqIEBwYXJhbSBhcnJheSAuLi5vYmpzXHJcbiAgKlxyXG4gICogQHJldHVybiB2b2lkXHJcbiAgKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oLi4ub2Jqcykge1xyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhvYmpzLCAoaywgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIGZhbHNlLyp3aXRoU3ltYm9scyovKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9ldmVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9FdmVudC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBNdXRhdGlvbkV2ZW50IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRXZlbnQge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0dGFyZ2V0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdGRldGFpbHNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHRhcmdldCwgZGV0YWlscyA9IHt9KSB7XHJcblx0XHRpZiAoZGV0YWlscy5kYXRhKSB7XHJcblx0XHRcdGRldGFpbHMuZmllbGRzID0gT2JqZWN0LmtleXMoZGV0YWlscy5kYXRhKTtcclxuXHRcdH1cclxuXHRcdHN1cGVyKHRhcmdldCwgZGV0YWlscyk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKHRoaXMuc3JjRXZ0KSB7XHJcblx0XHRcdHRoaXMuZGF0YUV2ZW4gPSB0aGlzLnNyY0V2dC5kYXRhRXZlbjtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1RhcmdldCA9IHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nVGFyZ2V0O1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nVHlwZSA9IHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nVHlwZTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0ZpZWxkcyA9IFtdO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGF0YSA9IHt9O1xyXG5cdFx0XHR0aGlzLl9vcmlnaW5hdGluZ0RhdGEgPSB7fTtcclxuXHRcdFx0dmFyIGZpZWxkID0gdGhpcy5maWVsZHNbMF07XHJcblx0XHRcdE9iamVjdC5rZXlzKHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nRGF0YSkuZm9yRWFjaChwYXRoID0+IHtcclxuXHRcdFx0XHR2YXIgX3BhdGggPSBmaWVsZCArICcuJyArIHBhdGg7XHJcblx0XHRcdFx0dGhpcy5vcmlnaW5hdGluZ0ZpZWxkcy5wdXNoKF9wYXRoKTtcclxuXHRcdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGF0YVtfcGF0aF0gPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0RhdGFbcGF0aF07XHJcblx0XHRcdFx0dGhpcy5fb3JpZ2luYXRpbmdEYXRhW19wYXRoXSA9IHRoaXMuc3JjRXZ0Ll9vcmlnaW5hdGluZ0RhdGFbcGF0aF07XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nQ3JlYXRlZCA9IHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nQ3JlYXRlZDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RlbGV0ZWQgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0RlbGV0ZWQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmRhdGFFdmVuID0gX2V2ZW4odGhpcy5kYXRhLCB0aGlzLl9kYXRhKTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1RhcmdldCA9IHRoaXMudGFyZ2V0O1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nVHlwZSA9IHRoaXMudHlwZTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0ZpZWxkcyA9IHRoaXMuZmllbGRzO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGF0YSA9IHRoaXMuZGF0YTtcclxuXHRcdFx0dGhpcy5fb3JpZ2luYXRpbmdEYXRhID0gdGhpcy5fZGF0YTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0NyZWF0ZWQgPSB0aGlzLmNyZWF0ZWQ7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdEZWxldGVkID0gdGhpcy5kZWxldGVkO1xyXG5cdFx0fVxyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuaW1wb3J0IF9jb25jYXRVbmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvY29uY2F0VW5pcXVlLmpzJztcclxuaW1wb3J0IF9leGNsdWRlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2V4Y2x1ZGUuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBGaXJlYmFzZSBmcm9tICcuL0ZpcmViYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJlYWN0aXZlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2VydmVyQmFzZSBleHRlbmRzIEZpcmViYXNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaW5kcyB0aGUgT2JzZXJ2ZXIgaW5zdGFuY2VzXHJcblx0ICogd2l0aCB0aGUgZ2l2ZW4gcXVlcnkgcGFyYW1ldGVycy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRxdWVyeVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGZpbmRGaXJlYWJsZXMocXVlcnkpIHtcclxuXHRcdHJldHVybiBzdXBlci5maW5kRmlyZWFibGVzKHF1ZXJ5KS5maWx0ZXIob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRyZXR1cm4gX2lzTnVsbChxdWVyeS5maWVsZHMpIHx8IF9pc1VuZGVmaW5lZChxdWVyeS5maWVsZHMpIHx8IF9ldmVuKF9hcnJGcm9tKG9ic2VydmVyLmZpZWxkcyksIF9hcnJGcm9tKHF1ZXJ5LmZpZWxkcykpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpcmVzIGFsbCBvYnNlcnZlcnMgd2l0aCB0aGUgZ2l2ZW4gZXZ0IChjaGFuZ2UpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV2ZW50XHRcdFx0XHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRXZlbnRcclxuXHQgKi9cclxuXHRmaXJlKGV2dCkge1xyXG5cdFx0aWYgKHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gZXZ0LnR5cGUgJiYgZS5maWVsZHMgPT09IGV2dC5maWVsZHMpLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gZXZ0O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMucHVzaChldnQpO1xyXG5cdFx0dGhpcy5maXJlYWJsZXMuZm9yRWFjaChvYnNlcnZlciA9PiB7XHJcblx0XHRcdGlmIChldnQucHJvcGFnYXRpb25TdG9wcGVkIHx8IChvYnNlcnZlci5wYXJhbXMudHlwZSAmJiBvYnNlcnZlci5wYXJhbXMudHlwZSAhPT0gZXZ0LnR5cGUpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdG9ic2VydmVyLmZpcmUoZXZ0KTtcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMucG9wKCk7XHJcblx0XHRyZXR1cm4gZXZ0O1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCwgJ29ic2VydmVycycsIE9ic2VydmVyQmFzZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGdldEZvclRhcmdldChvYmplY3QpIHtcclxuXHRcdHJldHVybiBzdXBlci5nZXRGb3JUYXJnZXQob2JqZWN0LCAnb2JzZXJ2ZXJzJyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBvYnNlcnZlciBmcm9tIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdFx0XHRvYmplY3RcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheXxmdW5jdGlvblx0XHRmaWVsZHNcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdG9yaWdpbmFsQ2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIGZpZWxkcywgb3JpZ2luYWxDYWxsYmFjayA9IG51bGwsIHBhcmFtcyA9IHt9KSB7XHJcblx0aWYgKCFvYmplY3QgfHwgIV9pc1R5cGVPYmplY3Qob2JqZWN0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdPYmplY3QgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0aWYgKF9pc0Z1bmN0aW9uKGZpZWxkcykgfHwgX2lzTnVsbChmaWVsZHMpIHx8IF9pc1VuZGVmaW5lZChmaWVsZHMpKSB7XHJcblx0XHRwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IG9yaWdpbmFsQ2FsbGJhY2sgOiB7fTtcclxuXHRcdG9yaWdpbmFsQ2FsbGJhY2sgPSBmaWVsZHM7XHJcblx0XHRmaWVsZHMgPSBudWxsO1xyXG5cdH1cclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKGZpcmViYXNlID0gT2JzZXJ2ZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSB7XHJcblx0XHRmaXJlYmFzZS5maW5kRmlyZWFibGVzKHtoYW5kbGVyOm9yaWdpbmFsQ2FsbGJhY2ssIGZpZWxkcywgcGFyYW1zfSkuZm9yRWFjaChvYnNlcnZlciA9PiB7XHJcblx0XHRcdGZpcmViYXNlLnJlbW92ZUZpcmVhYmxlKG9ic2VydmVyKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgdW5vYnNlcnZlIGZyb20gJy4vdW5vYnNlcnZlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBVbmJ1YmJsZSBoZWxwZXJcclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0ZmllbGRcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0b2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBmaWVsZCwgb2JqZWN0KSB7XHJcblx0dW5vYnNlcnZlKG9iamVjdCwgbnVsbCwge3RhZ3M6WycjZS1idWJibGluZycsIGZpZWxkLCB0YXJnZXRdfSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSB2YWwncyB0eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuLi9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJy4uL2pzL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICcuLi9hcnIvZnJvbS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aC5cclxuICpcclxuICogQSByZXR1cm4gdmFsdWUgb2YgdW5kZWZpbmVkIGlzIGFtYmlndW91cywgYW5kIGNhbiBtZWFuIGVpdGhlciB0aGF0IHRoZVxyXG4gKiBwYXRoIGRvZXMgbm90IGV4aXN0LCBvciB0aGF0IHRoZSBwYXRoIGFjdHVhbGx5IGV4aXN0cyBidXQgd2l0aCBhIHZhbHVlIG9mIHVuZGVmaW5lZC4gSWYgaXQgaXMgcmVxdWlyZWQgdG9cclxuICoga25vdyB3aGV0aGVyIHRoZSBwYXRoIGFjdHVhbGx5IGV4aXN0cywgcGFzcyBhbiBvYmplY3QgYXMgYSB0aGlyZCBhcmd1bWVudC5cclxuICogVGhpcyBvYmplY3Qgd2lsbCBoYXZlIGFuIFwiZXhpc3RzXCIga2V5IHNldCB0byB0cnVlL2ZhbHNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRcdFx0Y3R4dFxyXG4gKiBAcGFyYW0gYXJyYXkgXHRcdFx0XHRwYXRoXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdFx0XHR0cmFwXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdFx0XHRyZWNpZXZlclxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjdHh0LCBwYXRoLCB0cmFwID0ge30sIHJlY2lldmVyID0ge30pIHtcclxuXHRwYXRoID0gX2FyckZyb20ocGF0aCkuc2xpY2UoKTtcclxuXHR2YXIgX2N0eHQgPSBjdHh0O1xyXG5cdHdoaWxlKCFfaXNVbmRlZmluZWQoX2N0eHQpICYmICFfaXNOdWxsKF9jdHh0KSAmJiBwYXRoLmxlbmd0aCkge1xyXG5cdFx0dmFyIF9rZXkgPSBwYXRoLnNoaWZ0KCk7XHJcblx0XHRpZiAoISh0cmFwLmdldCA/IHRyYXAuZ2V0KF9jdHh0LCBfa2V5KSA6IChfaXNUeXBlT2JqZWN0KF9jdHh0KSA/IF9rZXkgaW4gX2N0eHQgOiBfY3R4dFtfa2V5XSkpKSB7XHJcblx0XHRcdHJlY2lldmVyLmV4aXN0cyA9IGZhbHNlO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRfY3R4dCA9IHRyYXAuZ2V0ID8gdHJhcC5nZXQoX2N0eHQsIF9rZXkpIDogX2N0eHRbX2tleV07XHJcblx0fVxyXG5cdHJlY2lldmVyLmV4aXN0cyA9IHRydWU7XHJcblx0cmV0dXJuIF9jdHh0O1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2Nyb3NzSm9pbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9jcm9zc0pvaW4uanMnO1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9zdHJBZnRlciBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9hZnRlci5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2NvbW1vbnNHZXQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0LmpzJztcclxuaW1wb3J0IEZpcmVhYmxlIGZyb20gJy4vRmlyZWFibGUuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgcmVmbGV4R2V0IGZyb20gJy4uL2dldC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBPYnNlcnZlciBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEZpcmVhYmxlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0aGFuZGxlclxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGZpZWxkc1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihoYW5kbGVyLCBmaWVsZHMgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcblx0XHR0aGlzLmZpZWxkcyA9IGZpZWxkcztcclxuXHRcdHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHRoaXMuZmllbGRzQXJyYXkgPSBfYXJyRnJvbSh0aGlzLmZpZWxkcyk7XHJcblx0XHR0aGlzLmlzRHluYW1pY0ZpZWxkID0gdGhpcy5maWVsZHNBcnJheS5maWx0ZXIoXHJcblx0XHRcdGZpZWxkID0+IGZpZWxkLmluZGV4T2YoJy4uJykgPiAtMSB8fCBmaWVsZC5zdGFydHNXaXRoKCcuJykgfHwgZmllbGQuZW5kc1dpdGgoJy4nKVxyXG5cdFx0KS5sZW5ndGg7XHJcblx0XHRpZiAodGhpcy5pc0R5bmFtaWNGaWVsZCAmJiB0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPbmx5IG9uZSBcIkR5bmFtaWMgRmllbGRcIiBtdXN0IGJlIG9ic2VydmVkIGF0IGEgdGltZSEgXCInICsgdGhpcy5maWVsZHNBcnJheS5qb2luKCcsICcpICsgJ1wiIGhhdmUgYmVlbiBib3VuZCB0b2dldGhlci4nKTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENhbGxzIHRoZSBvYnNlcnZlcidzIGhhbmRsZXIgZnVuY3Rpb25cclxuXHQgKiBvbiBtYXRjaGluZyB3aXRoIHRoZSBldmVudCdzIGZpZWxkcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBNdXRhdGlvbkV2ZW50XHRcdFx0IFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRmaXJlKGV2dCkge1xyXG5cdFx0aWYgKHRoaXMuZGlzY29ubmVjdGVkIHx8ICh0aGlzLnBhcmFtcy50eXBlICYmIHRoaXMucGFyYW1zLnR5cGUgIT09IGV2dC50eXBlKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAoZXZ0LmRhdGFFdmVuICYmIHRoaXMucGFyYW1zLmRpZmYgIT09IGZhbHNlKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuZmlyZUNhbGxiYWNrKGV2dCwgZmllbGRzID0+IHtcclxuXHRcdFx0aWYgKGZpZWxkcykge1xyXG5cdFx0XHRcdC8vIENhbGwgbGlzdGVuZXIuLi5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IFtdO1xyXG5cdFx0XHRcdHZhciBfZGF0YSA9IFtdO1xyXG5cdFx0XHRcdGlmICh0aGlzLnBhcmFtcy5kYXRhICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0ZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0XHQvLyBUaGUgTkVXL09MRCB2YWx1ZXMgb2YgdGhlIGNoYW5nZSBvZiBmaWVsZCB3aGljaCBjb3VsZCBiZSBhIHBhdGhcclxuXHRcdFx0XHRcdFx0dmFyIGZpZWxkRGF0YSA9IGV2dC5vcmlnaW5hdGluZ0ZpZWxkcy5yZWR1Y2UoKGZpZWxkRGF0YSwgb3JpZ2luYXRpbmdGaWVsZCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFNvIGZpZWxkIGlzIHRoZSBleGFjdCBvcmlnaW5hdGluZ0ZpZWxkIHBhdGg/XHJcblx0XHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gZXZ0Lm9yaWdpbmF0aW5nRGF0YVtvcmlnaW5hdGluZ0ZpZWxkXTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgX3ZhbHVlID0gZXZ0Ll9vcmlnaW5hdGluZ0RhdGFbb3JpZ2luYXRpbmdGaWVsZF07XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFmaWVsZERhdGEgJiYgZmllbGQgPT09IG9yaWdpbmF0aW5nRmllbGQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbdmFsdWUsIF92YWx1ZV07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdC8vIEZpZWxkIG1hdGNoZXMsIGJ1dCBpcyBkZWVwZXIgdGhhbiwgb3JpZ2luYXRpbmdGaWVsZCBwYXRoP1xyXG5cdFx0XHRcdFx0XHRcdGlmICghZmllbGREYXRhICYmIChmaWVsZCArICcuJykuc3RhcnRzV2l0aCgob3JpZ2luYXRpbmdGaWVsZCArICcuJykpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgZmllbGRRdWVyeSA9IF9zdHJBZnRlcihmaWVsZCwgb3JpZ2luYXRpbmdGaWVsZCArICcuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3RpY2Ugd2UncmUgdXNpbmcgX2NvbW1vbnNHZXQgdG8gZGlnIHRoZSBwYXRoXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGJ1dCB3aXRoIHJlZmxleEdldCBhcyB0cmFwIGZvciBcInJlYWN0aXZlIGdldHRpbmdcIlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRfY29tbW9uc0dldCh2YWx1ZSwgZmllbGRRdWVyeS5zcGxpdCgnLicpLCB7Z2V0OnJlZmxleEdldH0pLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRfY29tbW9uc0dldChfdmFsdWUsIGZpZWxkUXVlcnkuc3BsaXQoJy4nKSwge2dldDpyZWZsZXhHZXR9KVxyXG5cdFx0XHRcdFx0XHRcdFx0XTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZpZWxkRGF0YTtcclxuXHRcdFx0XHRcdFx0fSwgbnVsbCk7XHJcblx0XHRcdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdGlmIChmaWVsZERhdGEpIHtcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnB1c2goZmllbGREYXRhLnNoaWZ0KCkpO1xyXG5cdFx0XHRcdFx0XHRcdF9kYXRhLnB1c2goZmllbGREYXRhLnNoaWZ0KCkpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBfY29tbW9uc0dldChldnQudGFyZ2V0LCBfaXNTdHJpbmcoZmllbGQpID8gZmllbGQuc3BsaXQoJy4nKSA6IGZpZWxkLCB7Z2V0OnJlZmxleEdldH0pO1xyXG5cdFx0XHRcdFx0XHRcdGRhdGEucHVzaChjdXJyZW50VmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRcdF9kYXRhLnB1c2goY3VycmVudFZhbHVlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBfaXNBcnJheSh0aGlzLmZpZWxkcykgLy8gTk9URTp3ZSdyZSBhc2tpbmcgdGhlIG9yaWdpbmFsIGZvcm1hdCFcclxuXHRcdFx0XHRcdD8gZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlcihkYXRhLCBfZGF0YSwgZXZ0KSlcclxuXHRcdFx0XHRcdDogZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlcihkYXRhWzBdLCBfZGF0YVswXSwgZXZ0KSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGRhdGEgPSB7fTtcclxuXHRcdFx0dmFyIF9kYXRhID0ge307XHJcblx0XHRcdGV2dC5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XHJcblx0XHRcdFx0Ly8gUmVtZWJlciB0aGF0IGV2dC5vcmlnaW5hdGluZ0RhdGEgbWlnaHQgYWN0dWFsbHkgYmUgYnViYmxpbmdcclxuXHRcdFx0XHQvLyBpbiB3aGljaCBjYXNlIHdlIGRvbid0IGV4cGVjdCB0byBzZWUgZXZlbnROYW1lIGtleS5cclxuXHRcdFx0XHR2YXIgY3VycmVudFZhbHVlID0gZmllbGQgaW4gZXZ0LmRhdGEgXHJcblx0XHRcdFx0XHQ/IGV2dC5kYXRhW2ZpZWxkXSBcclxuXHRcdFx0XHRcdDogcmVmbGV4R2V0KGV2dC50YXJnZXQsIGZpZWxkKTtcclxuXHRcdFx0XHR2YXIgcHJldlZhbHVlID0gZmllbGQgaW4gZXZ0Ll9kYXRhXHJcblx0XHRcdFx0XHQ/IGV2dC5fZGF0YVtmaWVsZF0gXHJcblx0XHRcdFx0XHQ6IGN1cnJlbnRWYWx1ZTtcclxuXHRcdFx0XHRkYXRhW2ZpZWxkXSA9IGN1cnJlbnRWYWx1ZTtcclxuXHRcdFx0XHRfZGF0YVtmaWVsZF0gPSBwcmV2VmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyBDYWxsIGxpc3RlbmVyLi4uXHJcblx0XHRcdHJldHVybiBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGEsIF9kYXRhLCBldnQpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBWYWxpZGF0ZXMgYSBwcm9wb3NlZCBmaXJlIG9wZXJhdGlvbi5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBNdXRhdGlvbkV2ZW50XHRcdCBcdGV2dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0ZmlyZUNhbGxiYWNrKGV2dCwgY2FsbGJhY2spIHtcclxuXHRcdGlmICh0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgZHluYW1pY0ZpZWxkT3V0Y29tZXMgPSBbXTtcclxuXHRcdFx0dmFyIG1hdGNoZXMgPSB0aGlzLmZpZWxkc0FycmF5LmZpbHRlcigob2JzZXJ2ZWRGaWVsZCwgaSkgPT4ge1xyXG5cdFx0XHRcdG9ic2VydmVkRmllbGQgPSBfaXNTdHJpbmcob2JzZXJ2ZWRGaWVsZCkgXHJcblx0XHRcdFx0XHQ/IG9ic2VydmVkRmllbGQucmVwbGFjZSgvYC9nLCAnJylcclxuXHRcdFx0XHRcdDogb2JzZXJ2ZWRGaWVsZDtcclxuXHRcdFx0XHRkeW5hbWljRmllbGRPdXRjb21lc1tpXSA9IFtdO1xyXG5cdFx0XHRcdC8vIG9uZSBvYnNlcnZlZEZpZWxkIGNhbiB0dXJuIG91dCB0byBiZSB0d28gaWYgZHluYW1pY1xyXG5cdFx0XHRcdC8vIGFuZCBldnQub3JpZ2luYXRpbmdGaWVsZHMgaXMgbXVsdGlwbGVcclxuXHRcdFx0XHRyZXR1cm4gZXZ0Lm9yaWdpbmF0aW5nRmllbGRzLmZpbHRlcihpbnB1dE9yaWdpbmF0aW5nRmllbGQgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIGlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0ID0gaW5wdXRPcmlnaW5hdGluZ0ZpZWxkLnNwbGl0KCcuJyk7XHJcblx0XHRcdFx0XHR2YXIgb2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lID0gdGhpcy5pc0R5bmFtaWNGaWVsZCBcclxuXHRcdFx0XHRcdFx0PyBvYnNlcnZlZEZpZWxkLnNwbGl0KCcuJykubWFwKChzZWcsIGspID0+IHNlZyB8fCBpbnB1dE9yaWdpbmF0aW5nRmllbGRTcGxpdFtrXSB8fCAnJykuam9pbignLicpXHJcblx0XHRcdFx0XHRcdDogb2JzZXJ2ZWRGaWVsZDtcclxuXHRcdFx0XHRcdF9wdXNoVW5pcXVlKGR5bmFtaWNGaWVsZE91dGNvbWVzW2ldLCBvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIChvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgPT09IGlucHV0T3JpZ2luYXRpbmdGaWVsZCAmJiAhZXZ0LnNyY0V2dFxyXG5cdFx0XHRcdFx0XHR8fCAodGhpcy5wYXJhbXMub2JzZXJ2ZVVwICE9PSBmYWxzZSAmJiAob2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lICsgJy4nKS5zdGFydHNXaXRoKGlucHV0T3JpZ2luYXRpbmdGaWVsZCArICcuJykpXHJcblx0XHRcdFx0XHRcdHx8ICh0aGlzLnBhcmFtcy5vYnNlcnZlRG93biAmJiAoaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICsgJy4nKS5zdGFydHNXaXRoKG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSArICcuJykpXHJcblx0XHRcdFx0XHQpICYmICghdGhpcy5pc0R5bmFtaWNGaWVsZCB8fCAhb2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lLnNwbGl0KCcuJykuZmlsdGVyKHNlZyA9PiAhc2VnKS5sZW5ndGgpO1xyXG5cdFx0XHRcdH0pLmxlbmd0aDtcclxuXHRcdFx0fSkubGVuZ3RoO1xyXG5cdFx0XHRpZiAobWF0Y2hlcykge1xyXG5cdFx0XHRcdF9jcm9zc0pvaW4oZHluYW1pY0ZpZWxkT3V0Y29tZXMpLmZvckVhY2goY2FsbGJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKCFldnQuc3JjRXZ0IHx8IHRoaXMucGFyYW1zLm9ic2VydmVEb3duKSB7XHJcblx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgYWZ0ZXIgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGFmdGVyTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBhZnRlckxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYWZ0ZXJMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKHBvcyArIHNlYXJjaC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnLi9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBY2NlcHRzIGEgbGlzdCBvZiBjb2x1bW4gYW5kIGpvaW5zIHRoZW0gdG8gYSB0YWJsZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqXHJcbiAqIEByZXR1cm4gbnVtYmVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRyZXR1cm4gYXJyLnJlZHVjZSgoY3VyclRhYmxlLCBjb2x1bW4pID0+IHtcclxuXHRcdHZhciBuZXdUYWJsZSA9IFtdO1xyXG5cdFx0Y3VyclRhYmxlLmZvckVhY2gocm93ID0+IHtcclxuXHRcdFx0X2FyckZyb20oY29sdW1uKS5mb3JFYWNoKGNvbHVtbiA9PiB7XHJcblx0XHRcdFx0dmFyIF9yb3cgPSByb3cuc2xpY2UoKTtcclxuXHRcdFx0XHRfcm93LnB1c2goY29sdW1uKTtcclxuXHRcdFx0XHRuZXdUYWJsZS5wdXNoKF9yb3cpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIG5ld1RhYmxlO1xyXG5cdH0sIFtbXV0pO1xyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfZ2V0VHlwZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2dldFR5cGUuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gb2JzZXJ2ZXIgdG8gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5fGZ1bmN0aW9uXHRcdGZpZWxkc1xyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBPYnNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBmaWVsZHMsIGNhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHRpZiAoIW9iamVjdCB8fCAhX2lzVHlwZU9iamVjdChvYmplY3QpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdH1cclxuXHRpZiAoX2lzRnVuY3Rpb24oZmllbGRzKSkge1xyXG5cdFx0cGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBjYWxsYmFjayA6IHt9O1xyXG5cdFx0Y2FsbGJhY2sgPSBmaWVsZHM7XHJcblx0XHRmaWVsZHMgPSBudWxsO1xyXG5cdH1cclxuXHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb247IFwiJyArIF9nZXRUeXBlKGNhbGxiYWNrKSArICdcIiBnaXZlbiEnKTtcclxuXHR9XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmICghKGZpcmViYXNlID0gT2JzZXJ2ZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgT2JzZXJ2ZXIoY2FsbGJhY2ssIGZpZWxkcywgcGFyYW1zKSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuaW1wb3J0IG9ic2VydmUgZnJvbSAnLi9vYnNlcnZlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBCdWJibGUgaGVscGVyXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGZpZWxkXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgZmllbGQsIG9iamVjdCkge1xyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRvYnNlcnZlKG9iamVjdCwgKGVudHJpZXMsIF9lbnRyaWVzLCBlKSA9PiB7XHJcblx0XHRpZiAoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdFx0dmFyIGJhc2UgPSBfb2JqRnJvbShmaWVsZCwgb2JqZWN0KTtcclxuXHRcdFx0cmV0dXJuIGZpcmViYXNlLmZpcmUobmV3IE11dGF0aW9uRXZlbnQodGFyZ2V0LCB7dHlwZTplLnR5cGUsIGJ1YmJsaW5nOnRydWUsIGRhdGE6YmFzZSwgX2RhdGE6YmFzZSwgc3JjRXZ0OmV9KSk7XHJcblx0XHR9XHJcblx0fSwge29ic2VydmVEb3duOnRydWUsIHRhZ3M6WycjZS1idWJibGluZycsIGZpZWxkLCB0YXJnZXRdfSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9jb3B5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2xpbmsuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gb24gYSB0YXJnZXQgaW4gXCJ0cmFuc2FjdGlvblwiIG1vZGUuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0IG9uIHJlY29yZGVkIGNoYW5nZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdHRhcmdldHNcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdGtleXNcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5fEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXRzLCBjYWxsYmFjaywga2V5cyA9IFtdLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0dmFyIGNvbnRleHQgPSB0YXJnZXRzLm1hcCgodGFyZ2V0LCBpKSA9PiB7XHJcblx0XHRpZiAoIXRhcmdldCB8fCAhX2lzVHlwZU9iamVjdCh0YXJnZXQpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0YXJnZXQsXHJcblx0XHRcdHRhcmdldENvcHk6IF9jb3B5KHRhcmdldCwga2V5cyksXHJcblx0XHRcdHNldERhdGE6IHt9LFxyXG5cdFx0XHRfc2V0RGF0YToge30sXHJcblx0XHRcdGRlbERhdGE6IHt9LCBcclxuXHRcdFx0X2RlbERhdGE6IHt9LFxyXG5cdFx0XHRjcmVhdGVkOiBbXSxcclxuXHRcdFx0ZGVsZXRlZDogW10sXHJcblx0XHR9O1xyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciByZXN1bHQgPSBjYWxsYmFjayguLi50YXJnZXRzKTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRjb250ZXh0Lm1hcChjbnR4dCA9PiB7XHJcblx0XHR2YXIgaW5pdGlhbEtleXMgPSBPYmplY3Qua2V5cyhjbnR4dC50YXJnZXRDb3B5KTtcclxuXHRcdHZhciBjdXJyZW50S2V5cyA9IE9iamVjdC5rZXlzKGNudHh0LnRhcmdldCk7XHJcblx0XHR2YXIgY2hhbmdlZEtleXMgPSBfdW5pcXVlKGluaXRpYWxLZXlzLmNvbmNhdChjdXJyZW50S2V5cykpLmZpbHRlcihrZXkgPT4ge1xyXG5cdFx0XHRpZiAoKGtleXMubGVuZ3RoICYmICFrZXlzLmluY2x1ZGVzKGtleSkpIFxyXG5cdFx0XHR8fCAoX2lzQXJyYXkoY250eHQudGFyZ2V0KSAmJiAoa2V5ID09PSAnbGVuZ3RoJyB8fCBrZXkgPT09ICc8IHIgZSBmIGwgZSB4ID4nKSkpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFjdXJyZW50S2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcblx0XHRcdFx0Y250eHQuX2RlbERhdGFba2V5XSA9IGNudHh0LnRhcmdldENvcHlba2V5XTtcclxuXHRcdFx0XHRjbnR4dC5kZWxEYXRhW2tleV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0Y250eHQuZGVsZXRlZC5wdXNoKGtleSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y250eHQuX3NldERhdGFba2V5XSA9IGNudHh0LnRhcmdldENvcHlba2V5XTtcclxuXHRcdFx0XHRjbnR4dC5zZXREYXRhW2tleV0gPSBjbnR4dC50YXJnZXRba2V5XTtcclxuXHRcdFx0XHRpZiAoIWluaXRpYWxLZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuXHRcdFx0XHRcdGNudHh0LmNyZWF0ZWQucHVzaChrZXkpO1xyXG5cdFx0XHRcdH0gXHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGNudHh0LnRhcmdldENvcHlba2V5XSAhPT0gY250eHQudGFyZ2V0W2tleV0pIHtcclxuXHRcdFx0XHQvLyBVbm9ic2VydmUgb3V0Z29pbmcgdmFsdWUgZm9yIGJ1YmJsaW5nXHJcblx0XHRcdFx0aWYgKGNudHh0LnRhcmdldENvcHlba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGNudHh0LnRhcmdldENvcHlba2V5XSkpIHtcclxuXHRcdFx0XHRcdHVubGluayhjbnR4dC50YXJnZXQsIGtleSwgY250eHQudGFyZ2V0Q29weVtrZXldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gT2JzZXJ2ZSBpbmNvbWluZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoY250eHQudGFyZ2V0W2tleV0gJiYgX2lzVHlwZU9iamVjdChjbnR4dC50YXJnZXRba2V5XSkpIHtcclxuXHRcdFx0XHRcdGxpbmsoY250eHQudGFyZ2V0LCBrZXksIGNudHh0LnRhcmdldFtrZXldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZGVsZXRlIGNudHh0LnNldERhdGFba2V5XTtcclxuXHRcdFx0ZGVsZXRlIGNudHh0Ll9zZXREYXRhW2tleV07XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGV2dCwgbXV0YXRpb25CYXNlO1xyXG5cdFx0aWYgKChtdXRhdGlvbkJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KGNudHh0LnRhcmdldCkpIHx8IHJldHVybkV2ZW50KSB7XHJcblx0XHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KGNudHh0LnRhcmdldCwge1xyXG5cdFx0XHRcdHR5cGU6J3RyYW5zYWN0aW9uJywgXHJcblx0XHRcdFx0ZGF0YTpfbWVyZ2UoY250eHQuc2V0RGF0YSwgY250eHQuZGVsRGF0YSksXHJcblx0XHRcdFx0X2RhdGE6X21lcmdlKGNudHh0Ll9zZXREYXRhLCBjbnR4dC5fZGVsRGF0YSksXHJcblx0XHRcdFx0Y3JlYXRlZDpjbnR4dC5jcmVhdGVkLFxyXG5cdFx0XHRcdGRlbGV0ZWQ6Y250eHQuZGVsZXRlZFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKG11dGF0aW9uQmFzZSkge1xyXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cyhjbnR4dC5kZWxEYXRhKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdGV2dC5yZXNwb25zZShtdXRhdGlvbkJhc2UuZmlyZShcclxuXHRcdFx0XHRcdFx0bmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7dHlwZTonZGVsJywgZGF0YTpjbnR4dC5kZWxEYXRhLCBfZGF0YTpjbnR4dC5fZGVsRGF0YSwgZGVsZXRlZDpjbnR4dC5kZWxldGVkfSlcclxuXHRcdFx0XHRcdCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoT2JqZWN0LmtleXMoY250eHQuc2V0RGF0YSkubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRldnQucmVzcG9uc2UobXV0YXRpb25CYXNlLmZpcmUoXHJcblx0XHRcdFx0XHRcdG5ldyBNdXRhdGlvbkV2ZW50KGNudHh0LnRhcmdldCwge3R5cGU6J3NldCcsIGRhdGE6Y250eHQuc2V0RGF0YSwgX2RhdGE6Y250eHQuX3NldERhdGEsIGNyZWF0ZWQ6Y250eHQuY3JlYXRlZH0pXHJcblx0XHRcdFx0XHQpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXR1cm5FdmVudCA/IGV2dCA6IGNoYW5nZWRLZXlzO1xyXG5cdH0pO1xyXG5cdHJldHVybiByZXN1bHQ7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiB1bmlxdWUgaXRlbXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0XHRcdFx0YXJyXHJcbiAqXHQgKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRjb25zdCBkaXN0aW5jdCA9ICh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHtcclxuXHRcdHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuXHR9O1xyXG5cdHJldHVybiBhcnIuZmlsdGVyKGRpc3RpbmN0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB0cmFuc2FjdGlvbiBmcm9tICcuL3RyYW5zYWN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJnZXRcIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cykge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYW55IFwiZ2V0XCIgdHJhcHMsIG90aGVyd2lzZSBcImdldFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB2YWx1ZSwgdHJhcEJhc2UsIGRlZmF1bHRHZXQgPSBmdW5jdGlvbihfdmFsdWUpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3ZhbHVlIDogKF9pc0FycmF5KGtleXMpID8gX29iakZyb20oa2V5cywgdGFyZ2V0KSA6IHRhcmdldFtrZXlzXSk7XHJcblx0fTtcclxuXHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0dmFsdWUgPSB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6J2dldCcsIHF1ZXJ5OmtleXN9KSwgZGVmYXVsdEdldCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhbHVlID0gZGVmYXVsdEdldCgpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBFeGVjdXRlIGFycmF5IG1ldGhvZHMgaW4gXCJtdXRhdGlvblwiIG1vZGVcclxuXHRpZiAoX2lzQXJyYXkodGFyZ2V0KSAmJiAhX2lzTnVtZXJpYyhrZXlzKSAmJiBfaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbiByZWZsZXhBcnJheU1ldGhvZFdyYXBwZXIoLi4uYXJncykge1xyXG5cdFx0XHRyZXR1cm4gdHJhbnNhY3Rpb24oW3RhcmdldF0sICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUuYXBwbHkodGFyZ2V0LCBhcmdzKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBBTEwgaXRlbXMgcGFzcyB0aGUgdGVzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBjYWxsYmFjaykge1xyXG5cdHJldHVybiBhcnIucmVkdWNlKChwcmV2VGVzdCwgaXRtKSA9PiBwcmV2VGVzdCAmJiBjYWxsYmFjayhpdG0pLCB0cnVlKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogUnVucyBhbiBcImluXCIgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgc3VjaCBxdWVyeSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ1x0XHRrZXlcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYW55IFwiaGFzXCIgdHJhcHMsIG90aGVyd2lzZSBcInRlc3RcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHR2YXIgdHJhcEJhc2UsIGRlZmF1bHRIYXMgPSBmdW5jdGlvbihfc3RhdGUpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3N0YXRlIDogKGtleSBpbiB0YXJnZXQpO1xyXG5cdH07XHJcblx0aWYgKHRyYXBCYXNlID0gVHJhcEJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdHJldHVybiB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6J2hhcycsIHF1ZXJ5OmtleX0pLCBkZWZhdWx0SGFzKTtcclxuXHR9XHJcblx0cmV0dXJuIGRlZmF1bHRIYXMoKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfYWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FsbC5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2xpbmsuanMnO1xyXG5pbXBvcnQgcmVmbGV4SGFzIGZyb20gJy4vaGFzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwiX3NldFByb3BcIiB0eXBlIG9mIG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyBmb3IgdGhlIHNwZWNpZmljIHR5cGUgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdGRlZmluZVxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c09yUGF5bG9hZFxyXG4gKiBAcGFyYW0gbWl4ZWRcdFx0XHR2YWx1ZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVmaW5lLCB0YXJnZXQsIGtleXNPclBheWxvYWQsIHZhbHVlID0gbnVsbCwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qoa2V5c09yUGF5bG9hZCkpIHtcclxuXHRcdHJldHVybkV2ZW50ID0gdmFsdWU7XHJcblx0fVxyXG5cdHZhciBrZXlzID0ga2V5c09yUGF5bG9hZCwgX2RhdGEgPSB7fSwgZGF0YSA9IHt9LCBjcmVhdGVkID0gW107XHJcblx0dmFyIGhhbmRsZVNldCA9IChrZXksIHZhbHVlLCByZWxhdGVkKSA9PiB7XHJcblx0XHRfZGF0YVtrZXldID0gdGFyZ2V0W2tleV07XHJcblx0XHRpZiAoIXJlZmxleEhhcyh0YXJnZXQsIGtleSkpIHtcclxuXHRcdFx0Y3JlYXRlZC5wdXNoKGtleSk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBkZXNjcmlwdG9yO1xyXG5cdFx0aWYgKGRlZmluZSkge1xyXG5cdFx0XHRkZXNjcmlwdG9yID0gdmFsdWUgfHwge307XHJcblx0XHRcdHZhbHVlID0gZGVzY3JpcHRvci52YWx1ZTtcclxuXHRcdH1cclxuXHRcdC8vIEV4ZWN1dGUgYW55IFwic2V0XCIgdHJhcHMsIG90aGVyd2lzZSBcInNldFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdFx0dmFyIHN1Y2Nlc3MsIHRyYXBCYXNlLCBkZWZhdWx0U2V0ID0gZnVuY3Rpb24oX3N1Y2Nlc3MpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0aWYgKGRlc2NyaXB0b3IpIHtcclxuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRhcmdldFtrZXldID0gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBfc3VjY2VzcztcclxuXHRcdH07XHJcblx0XHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0XHR2YXIgZGV0YWlscyA9IGRlc2NyaXB0b3IgXHJcblx0XHRcdFx0PyB7dHlwZTonZGVmJywgcXVlcnk6a2V5LCBkZXNjcmlwdG9yLCByZWxhdGVkfSBcclxuXHRcdFx0XHQ6IHt0eXBlOidzZXQnLCBxdWVyeTprZXksIHZhbHVlLCByZWxhdGVkfTtcclxuXHRcdFx0c3VjY2VzcyA9IHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCBkZXRhaWxzKSwgZGVmYXVsdFNldCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWNjZXNzID0gZGVmYXVsdFNldCgpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHRkYXRhW2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0aWYgKGRhdGFba2V5XSAhPT0gX2RhdGFba2V5XSkge1xyXG5cdFx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoX2RhdGFba2V5XSAmJiBfaXNUeXBlT2JqZWN0KF9kYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0XHR1bmxpbmsodGFyZ2V0LCBrZXksIF9kYXRhW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBPYnNlcnZlIGluY29taW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChkYXRhW2tleV0gJiYgX2lzVHlwZU9iamVjdChkYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0XHRsaW5rKHRhcmdldCwga2V5LCBkYXRhW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWxldGUgZGF0YVtrZXldO1xyXG5cdFx0XHRcdGRlbGV0ZSBfZGF0YVtrZXldO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkZWxldGUgX2RhdGFba2V5XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdWNjZXNzO1xyXG5cdH07XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIHN1Y2Nlc3NTdGF0ZXMgPSBbXTtcclxuXHRpZiAoX2lzQXJyYXkoa2V5cykgfHwgKChfaXNTdHJpbmcoa2V5cykgfHwgX2lzTnVtYmVyKGtleXMpKSAmJiAoa2V5cyA9IF9hcnJGcm9tKGtleXMpKSkpIHtcclxuXHRcdHN1Y2Nlc3NTdGF0ZXMgPSBrZXlzLm1hcChrZXkgPT4gaGFuZGxlU2V0KGtleSwgdmFsdWUsIGtleXMpKVxyXG5cdH0gZWxzZSBpZiAoX2lzT2JqZWN0KGtleXNPclBheWxvYWQpKSB7XHJcblx0XHR2YXIgcGF5bG9hZEtleXMgPSBPYmplY3Qua2V5cyhrZXlzT3JQYXlsb2FkKTtcclxuXHRcdHN1Y2Nlc3NTdGF0ZXMgPSBwYXlsb2FkS2V5cy5tYXAoa2V5ID0+IGhhbmRsZVNldChrZXksIGtleXNPclBheWxvYWRba2V5XSwgcGF5bG9hZEtleXMpKVxyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgZXZ0LCBtdXRhdGlvbkJhc2U7XHJcblx0aWYgKChtdXRhdGlvbkJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHx8IHJldHVybkV2ZW50KSB7XHJcblx0XHRldnQgPSBuZXcgTXV0YXRpb25FdmVudCh0YXJnZXQsIHt0eXBlOidzZXQnLCBkYXRhLCBfZGF0YSwgY3JlYXRlZH0pO1xyXG5cdFx0aWYgKG11dGF0aW9uQmFzZSkge1xyXG5cdFx0XHRtdXRhdGlvbkJhc2UuZmlyZShldnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuRXZlbnQgPyBldnQgOiBfYWxsKHN1Y2Nlc3NTdGF0ZXMsIHN0YXRlID0+IHN0YXRlKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3NldFByb3AgZnJvbSAnLi9fc2V0UHJvcC5qcyc7XHJcblxyXG4vKipcclxuICogRXhlY3V0ZXMgYSBcInNldFwiIG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzT3JQYXlsb2FkXHJcbiAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbHVlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBib29sfEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleXNPclBheWxvYWQsIHZhbHVlID0gbnVsbCwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdHJldHVybiBfc2V0UHJvcChmYWxzZS8qZGVmaW5lKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgcmVmbGV4R2V0IGZyb20gJy4vZ2V0LmpzJztcclxuaW1wb3J0IHJlZmxleFNldCBmcm9tICcuL3NldC5qcyc7XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgXCJSZWZseGl2ZSBnZXR0ZXIvc2V0dGVyXCIgdHJhcHMgb24gdGhlIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleXMpIHtcclxuXHRfYXJyRnJvbShrZXlzKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHR2YXIgdmFsdWUgPSB0YXJnZXRba2V5XSwgb25HZXRGaXJlLCBvblNldEZpcmU7XHJcblx0XHR2YXIgY3VycmVudERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KVxyXG5cdFx0fHwge2VudW1lcmFibGU6IGtleSBpbiB0YXJnZXQgPyBmYWxzZS8qZXhpc3RpbmcgYnV0IGhpZGRlbiovIDogdHJ1ZX07XHJcblx0XHRpZiAoJ3ZhbHVlJyBpbiBjdXJyZW50RGVzY3JpcHRvcikge1xyXG5cdFx0XHRkZWxldGUgY3VycmVudERlc2NyaXB0b3IudmFsdWU7XHJcblx0XHR9XHJcblx0XHRpZiAoJ3dyaXRhYmxlJyBpbiBjdXJyZW50RGVzY3JpcHRvcikge1xyXG5cdFx0XHRkZWxldGUgY3VycmVudERlc2NyaXB0b3Iud3JpdGFibGU7XHJcblx0XHR9XHJcblx0XHRjdXJyZW50RGVzY3JpcHRvci5nZXQgPSAoKSA9PiB7XHJcblx0XHRcdGlmIChvbkdldEZpcmUpIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdFx0b25HZXRGaXJlID0gdHJ1ZTtcclxuXHRcdFx0dmFyIF92YWx1ZSA9IHJlZmxleEdldCh0YXJnZXQsIGtleSk7XHJcblx0XHRcdG9uR2V0RmlyZSA9IGZhbHNlO1xyXG5cdFx0XHRyZXR1cm4gX3ZhbHVlO1xyXG5cdFx0fTtcclxuXHRcdGN1cnJlbnREZXNjcmlwdG9yLnNldCA9IG5ld1ZhbHVlID0+IHtcclxuXHRcdFx0aWYgKG9uU2V0RmlyZSkge1xyXG5cdFx0XHRcdHZhbHVlID0gbmV3VmFsdWU7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0b25TZXRGaXJlID0gdHJ1ZTtcclxuXHRcdFx0dmFyIHJzcG5zID0gcmVmbGV4U2V0KHRhcmdldCwga2V5LCBuZXdWYWx1ZSk7XHJcblx0XHRcdG9uU2V0RmlyZSA9IGZhbHNlO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGN1cnJlbnREZXNjcmlwdG9yKTtcclxuXHR9KTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJnZXRQcm9wc1wiIHR5cGUgb2YgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIGZvciB0aGUgc3BlY2lmaWMgdHlwZSB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0b3duS2V5c1xyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob3duS2V5cywgdGFyZ2V0KSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXhlY3V0ZSBhbnkgXCJrZXlzXCIgdHJhcHMsIG90aGVyd2lzZSBcInRlc3RcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHR2YXIgdHJhcEJhc2UsIGRlZmF1bHRLZXlzID0gZnVuY3Rpb24oX2tleXMpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX2tleXMgOiAoXHJcblx0XHRcdG93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpIDogT2JqZWN0LmtleXModGFyZ2V0KVxyXG5cdFx0KTtcclxuXHR9O1xyXG5cdGlmICh0cmFwQmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHRyZXR1cm4gdHJhcEJhc2UuZmlyZShuZXcgUXVlcnlFdmVudCh0YXJnZXQsIHt0eXBlOm93bktleXMgPyAnb3duS2V5cycgOiAna2V5cyd9KSwgZGVmYXVsdEtleXMpO1xyXG5cdH1cclxuXHRyZXR1cm4gZGVmYXVsdEtleXMoKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2dldFByb3BzIGZyb20gJy4vX2dldFByb3BzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJrZXlzXCIgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgc3VjaCBxdWVyeSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0KSB7XHJcblx0cmV0dXJuIF9nZXRQcm9wcyhmYWxzZS8qb3duS2V5cyovLCAuLi5hcmd1bWVudHMpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfZ2V0VHlwZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2dldFR5cGUuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwIGZyb20gJy4vaW50ZXJuYWwvVHJhcC5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyBhIHRyYXAgdG8gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBUcmFwXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbjsgXCInICsgX2dldFR5cGUoY2FsbGJhY2spICsgJ1wiIGdpdmVuIScpO1xyXG5cdH1cclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKCEoZmlyZWJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkpIHtcclxuXHRcdGZpcmViYXNlID0gVHJhcEJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgVHJhcChjYWxsYmFjaywgcGFyYW1zKSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9zZXRQcm9wIGZyb20gJy4vX3NldFByb3AuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgXCJzZXRcIiBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c09yUGF5bG9hZFxyXG4gKiBAcGFyYW0gbWl4ZWRcdFx0XHR2YWx1ZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBrZXlzT3JQYXlsb2FkLCB2YWx1ZSA9IG51bGwsIHJldHVybkV2ZW50ID0gZmFsc2UpIHtcclxuXHRyZXR1cm4gX3NldFByb3AodHJ1ZS8qZGVmaW5lKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2FsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9hbGwuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgcmVmbGV4SGFzIGZyb20gJy4vaGFzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwiZGVsZXRlXCIgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8RXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cywgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdHZhciBrZXlzID0gX2FyckZyb20oa2V5cyksIF9kYXRhID0ge30sIGRhdGEgPSB7fSwgZGVsZXRlZCA9IFtdO1xyXG5cdHZhciBzdWNjZXNzU3RhdGVzID0ga2V5cy5tYXAoa2V5ID0+IHtcclxuXHRcdF9kYXRhW2tleV0gPSB0YXJnZXRba2V5XTtcclxuXHRcdGlmIChyZWZsZXhIYXModGFyZ2V0LCBrZXkpKSB7XHJcblx0XHRcdGRlbGV0ZWQucHVzaChrZXkpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBFeGVjdXRlIGFueSBcImRlbFwiIHRyYXBzLCBvdGhlcndpc2UgXCJkZWxcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHRcdHZhciBzdWNjZXNzLCB0cmFwQmFzZSwgZGVmYXVsdERlbCA9IGZ1bmN0aW9uKF9zdWNjZXNzKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG5cdFx0XHRcdGRlbGV0ZSB0YXJnZXRba2V5XTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gX3N1Y2Nlc3M7XHJcblx0XHR9O1xyXG5cdFx0aWYgKHRyYXBCYXNlID0gVHJhcEJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdFx0c3VjY2VzcyA9IHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCB7dHlwZTonZGVsJywgcXVlcnk6a2V5LCByZWxhdGVkOmtleXN9KSwgZGVmYXVsdERlbCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWNjZXNzID0gZGVmYXVsdERlbCgpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHRkYXRhW2tleV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0aWYgKF9kYXRhW2tleV0gJiYgX2lzVHlwZU9iamVjdChfZGF0YVtrZXldKSkge1xyXG5cdFx0XHRcdHVubGluayh0YXJnZXQsIGtleSwgX2RhdGFba2V5XSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBzdWNjZXNzO1xyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBldnQsIG11dGF0aW9uQmFzZTtcclxuXHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KHRhcmdldCwge3R5cGU6J2RlbCcsIGRhdGEsIF9kYXRhLCBkZWxldGVkfSk7XHJcblx0XHRpZiAobXV0YXRpb25CYXNlICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkge1xyXG5cdFx0XHRtdXRhdGlvbkJhc2UuZmlyZShldnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuRXZlbnQgPyBldnQgOiBfYWxsKHN1Y2Nlc3NTdGF0ZXMsIHN0YXRlID0+IHN0YXRlKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lckJhc2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RlbmVyQmFzZSBleHRlbmRzIEZpcmViYXNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRpZiAoZXZ0LnByb3BhZ2F0aW9uU3RvcHBlZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRsaXN0ZW5lci5maXJlKGV2dCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBldnQ7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldChvYmplY3QsIFN0YXRpYyA9IExpc3RlbmVyQmFzZSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICdsaXN0ZW5lcnMnLCBTdGF0aWMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ2xpc3RlbmVycycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lciBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBGaXJlYWJsZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGhhbmRsZXJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaGFuZGxlciwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5wYXJhbXMudHlwZSA9PT0gZXZ0LnR5cGUpIHtcclxuXHRcdFx0ZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlci5jYWxsKHRoaXMudGFyZ2V0LCBldnQuZSkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgYnVpbGQgZnJvbSAnLi9idWlsZC5qcyc7XHJcbmltcG9ydCBvYnNlcnZlIGZyb20gJy4vb2JzZXJ2ZS5qcyc7XHJcbmltcG9ydCB1bm9ic2VydmUgZnJvbSAnLi91bm9ic2VydmUuanMnO1xyXG5pbXBvcnQgdHJhcCBmcm9tICcuL3RyYXAuanMnO1xyXG5pbXBvcnQgdW50cmFwIGZyb20gJy4vdW50cmFwLmpzJztcclxuaW1wb3J0IGRlZiBmcm9tICcuL2RlZi5qcyc7XHJcbmltcG9ydCBzZXQgZnJvbSAnLi9zZXQuanMnO1xyXG5pbXBvcnQgZGVsIGZyb20gJy4vZGVsLmpzJztcclxuaW1wb3J0IGxpbmsgZnJvbSAnLi9saW5rLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCB0cmFuc2FjdGlvbiBmcm9tICcuL3RyYW5zYWN0aW9uLmpzJztcclxuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XHJcbmltcG9ydCBoYXMgZnJvbSAnLi9oYXMuanMnO1xyXG5pbXBvcnQgaW5pdCBmcm9tICcuL2luaXQuanMnO1xyXG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xyXG5pbXBvcnQgb3duS2V5cyBmcm9tICcuL293bktleXMuanMnO1xyXG5pbXBvcnQgb24gZnJvbSAnLi9vbi5qcyc7XHJcbmltcG9ydCBvZmYgZnJvbSAnLi9vZmYuanMnO1xyXG5pbXBvcnQgdHJpZ2dlciBmcm9tICcuL3RyaWdnZXIuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9FdmVudC5qcyc7XHJcblxyXG4vLyBOb3cgd2UnbGwgbWltaWNrIHN0YW5kYXJkIFRyYXAgcHJvcGVydGllc1xyXG4vLyBzbyB0aGF0IGNhbiBiZSB1c2VkIGFzIHN0YW5kYXJkIFRyYXAgb3V0IG9mIHRoZSBib3guXHJcbmNvbnN0IGRlbGV0ZVByb3BlcnR5ID0gZGVsO1xyXG5jb25zdCBkZWZpbmVQcm9wZXJ0eSA9IGRlZjtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGJ1aWxkLFxyXG5cdG9ic2VydmUsXHJcblx0dW5vYnNlcnZlLFxyXG5cdHRyYXAsXHJcblx0dW50cmFwLFxyXG5cdGRlZixcclxuXHRkZWZpbmVQcm9wZXJ0eSxcclxuXHRzZXQsXHJcblx0ZGVsLFxyXG5cdGRlbGV0ZVByb3BlcnR5LFxyXG5cdGxpbmssXHJcblx0dW5saW5rLFxyXG5cdHRyYW5zYWN0aW9uLFxyXG5cdGdldCxcclxuXHRoYXMsXHJcblx0aW5pdCxcclxuXHRrZXlzLFxyXG5cdG93bktleXMsXHJcblx0b24sXHJcblx0b2ZmLFxyXG5cdHRyaWdnZXIsXHJcblx0Ly8gRXZlbnRzXHJcblx0TXV0YXRpb25FdmVudCxcclxuXHRRdWVyeUV2ZW50LFxyXG5cdEV2ZW50LFxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IGluaXQgZnJvbSAnLi9pbml0LmpzJztcclxuaW1wb3J0IHJlZmxleEtleXMgZnJvbSAnLi9rZXlzLmpzJztcclxuaW1wb3J0IHJlZmxleEdldCBmcm9tICcuL2dldC5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcblxyXG4vKipcclxuICogUmVjdXJzaXZlbHkgXCJjb25uZWN0c1wiIGFuIG9iamVjdCdzIG1lbWJlcnMgdG8gdGhlIG9iamVjdFxyXG4gKiBmb3IgcmVmbGV4IGFjdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdF9pbml0XHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGQodGFyZ2V0LCBfaW5pdCA9IGZhbHNlKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIGtleXMgPSByZWZsZXhLZXlzKHRhcmdldCk7XHJcblx0a2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHR2YXIgdmFsdWUgPSByZWZsZXhHZXQodGFyZ2V0LCBrZXkpO1xyXG5cdFx0aWYgKF9pc1R5cGVPYmplY3QodmFsdWUpICYmIHZhbHVlKSB7XHJcblx0XHRcdGxpbmsodGFyZ2V0LCBrZXksIHZhbHVlKTtcclxuXHRcdFx0YnVpbGQodmFsdWUsIF9pbml0KTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRpZiAoX2luaXQpIHtcclxuXHRcdGluaXQodGFyZ2V0LCBrZXlzKTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGEgdHJhcCBmcm9tIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdFx0XHRvYmplY3RcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdG9yaWdpbmFsQ2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIG9yaWdpbmFsQ2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpIHtcclxuXHRcdGZpcmViYXNlLmZpbmRGaXJlYWJsZXMoe2hhbmRsZXI6b3JpZ2luYWxDYWxsYmFjaywgcGFyYW1zfSkuZm9yRWFjaCh0cmFwID0+IHtcclxuXHRcdFx0ZmlyZWJhc2UucmVtb3ZlRmlyZWFibGUodHJhcCk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9nZXRQcm9wcyBmcm9tICcuL19nZXRQcm9wcy5qcyc7XHJcblxyXG4vKipcclxuICogUnVucyBhIFwib3duS2V5c1wiIHF1ZXJ5IG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IHN1Y2ggcXVlcnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCkge1xyXG5cdHJldHVybiBfZ2V0UHJvcHModHJ1ZS8qb3duS2V5cyovLCAuLi5hcmd1bWVudHMpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgTGlzdGVuZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzJztcclxuaW1wb3J0IExpc3RlbmVyIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEJpbmRzIGxpc3RlbmVycyB0byBhbiBlbGVtZW50J3MgZXZlbnQgY29udHJvbGxlci5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdCBcdFx0XHR0eXBlXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgdHlwZSwgY2FsbGJhY2ssIHBhcmFtcyA9IHt9KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmICghKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBMaXN0ZW5lckJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgTGlzdGVuZXIoY2FsbGJhY2ssIF9tZXJnZShwYXJhbXMsIHt0eXBlfSkpKTtcclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGlzdGVuZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIGFuIGVsZW1lbnQncyBldmVudCBjb250cm9sbGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0IFx0XHRcdHR5cGVcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdFx0XHRvcmlnaW5hbENhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCB0eXBlLCBvcmlnaW5hbENhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSB7XHJcblx0XHRmaXJlYmFzZS5maW5kRmlyZWFibGVzKHtoYW5kbGVyOm9yaWdpbmFsQ2FsbGJhY2ssIHR5cGUsIHBhcmFtc30pLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZShsaXN0ZW5lcik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lckJhc2UuanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9FdmVudC5qcyc7XHJcblxyXG4vKipcclxuICogRmlyZXMgYW4gZXZlbnQgb24gYW4gb2JqZWN0J3MgbGlzdGVuZXJCYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nICAgICAgICAgICAgICAgIHR5cGVcclxuICogQHBhcmFtIG9iamVjdCAgICAgICAgICAgICAgICBkYXRhXHJcbiAqXHJcbiAqIEByZXR1cm4gRXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgdHlwZSwgZGF0YSA9IHt9KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IExpc3RlbmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0cmV0dXJuIGZpcmViYXNlLmZpcmUobmV3IEV2ZW50KG9iamVjdCwgX21lcmdlKGRhdGEsIHt0eXBlfSkpKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVGdW5jdGlvbiBmcm9tICcuL2lzVHlwZUZ1bmN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBfaXNUeXBlRnVuY3Rpb24odmFsKSB8fCAodmFsICYmIHt9LnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgZnVuY3Rpb25dJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggcmVndWxhciBmdW5jdGlvbnMgYW5kIGNsYXNzZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIgb3IgYSBudW1lcmljIHN0cmluZy5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIG51bWJlcnMgYW5kIG51bWVyaWMgc3RyaW5ncy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgIT09IHRydWUgJiYgdmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSAnJyAmJiAhaXNOYU4odmFsICogMSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyBhIGxpc3Qgb2YgdW5pcXVlIGl0ZW1zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdGFyclxyXG4gKlx0ICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyKSB7XHJcblx0Y29uc3QgZGlzdGluY3QgPSAodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcblx0XHRyZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyLmZpbHRlcihkaXN0aW5jdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSBwYXJ0IG9mIGEgc3RyaW5nIGJlZm9yZSBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqIEBwYXJhbSAgYm9vbFx0ICAgYmVmb3JlTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBiZWZvcmVMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGJlZm9yZUxhc3QgPyBzdWJqZWN0Lmxhc3RJbmRleE9mKHNlYXJjaCkgOiBzdWJqZWN0LmluZGV4T2Yoc2VhcmNoKTtcclxuXHRpZiAocG9zID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cigwLCBwb3MpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICcuL2JlZm9yZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBwYXJ0IG9mIGEgc3RyaW5nIGJlZm9yZSBsYXN0IG9jY3VyZW5jZSBvZiBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gpIHtcclxuXHRyZXR1cm4gX2JlZm9yZShzdWJqZWN0LCBzZWFyY2gsIHRydWUpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IHJlY29tcG9zZURpcmVjdGl2ZXMgZnJvbSAnLi9yZWNvbXBvc2VEaXJlY3RpdmVzLmpzJztcclxuaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICcuLi9wYXJhbXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIENvbXBvc2VzIGRlZmluaXRpb25zIGZyb20gZWxGcm9tIGludG8gZWxUby5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbEZyb21cclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbFRvXHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdFx0YXBwZW5kT3JQcmVwZW5kXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdFx0XHRcdG5vcmVjb21wb3NlXHJcbiAqXHJcbiAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsRnJvbSwgZWxUbywgYXBwZW5kT3JQcmVwZW5kLCBub3JlY29tcG9zZSA9IFtdKSB7XHJcblx0bm9yZWNvbXBvc2UgPSBub3JlY29tcG9zZS5jb25jYXQoW2dsb2JhbFBhcmFtcy5hdHRyTWFwLm5hbWVzcGFjZSwgLi4uZ2xvYmFsUGFyYW1zLmF0dHJNYXAubm9jb21wb3NlXSk7XHJcblx0aWYgKGVsVG8uaGFzQXR0cmlidXRlKCdub3JlY29tcG9zZScpKSB7XHJcblx0XHRub3JlY29tcG9zZSA9IG5vcmVjb21wb3NlLmNvbmNhdCgoZWxUby5nZXRBdHRyaWJ1dGUoJ25vcmVjb21wb3NlJykgfHwgJyonKS5zcGxpdCgnICcpLm1hcCh2YWwgPT4gdmFsLnRyaW0oKSkpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gQ3VzdG9tIENvbXBvc2l0aW9uLi4uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGlmIChfaXNGdW5jdGlvbihnbG9iYWxQYXJhbXMucmVjb21wb3NlQ2FsbGJhY2spKSB7XHJcblx0XHR2YXIgZGlzcG9zaXRpb24gPSBnbG9iYWxQYXJhbXMucmVjb21wb3NlQ2FsbGJhY2soZWxGcm9tLCBlbFRvLCBhcHBlbmRPclByZXBlbmQsIG5vcmVjb21wb3NlKTtcclxuXHRcdGlmIChkaXNwb3NpdGlvbiA9PT0gZmFsc2UpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fSBlbHNlIGlmIChfaXNTdHJpbmcoZGlzcG9zaXRpb24pIHx8IF9pc0FycmF5KGRpc3Bvc2l0aW9uKSkge1xyXG5cdFx0XHRub3JlY29tcG9zZSA9IG5vcmVjb21wb3NlLmNvbmNhdChkaXNwb3NpdGlvbik7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBNZXJnZSBsaXN0IGF0dHJpYnV0ZXMuLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0X3VuaXF1ZShnbG9iYWxQYXJhbXMubGlzdEF0dHJpYnV0ZXMuY29uY2F0KFtnbG9iYWxQYXJhbXMuYXR0ck1hcC5oaW50LCBnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdXBlcnJvbGUsIGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1YnJvbGUsICdyb2xlJywgJ2NsYXNzJ10pKS5mb3JFYWNoKHR5cGUgPT4ge1xyXG5cdFx0dmFyIGJfYXR0ciwgYV9hdHRyO1xyXG5cdFx0aWYgKCFub3JlY29tcG9zZS5pbmNsdWRlcyh0eXBlKSAmJiAhbm9yZWNvbXBvc2UuaW5jbHVkZXMoJyonKSAmJiAoYl9hdHRyID0gZWxGcm9tLmdldEF0dHJpYnV0ZSh0eXBlKSkpIHtcclxuXHRcdFx0aWYgKGFfYXR0ciA9IGVsVG8uZ2V0QXR0cmlidXRlKHR5cGUpKSB7XHJcblx0XHRcdFx0dmFyIGpvaW50TGlzdCA9IGFwcGVuZE9yUHJlcGVuZCA9PT0gJ3ByZXBlbmQnID8gW2JfYXR0ciwgYV9hdHRyXSA6IFthX2F0dHIsIGJfYXR0cl07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGpvaW50TGlzdCA9IFtiX2F0dHJdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsVG8uc2V0QXR0cmlidXRlKHR5cGUsIF91bmlxdWUoam9pbnRMaXN0LmpvaW4oJyAnKS5zcGxpdCgnICcpLm1hcChyID0+IHIudHJpbSgpKSkuam9pbignICcpKTtcclxuXHRcdFx0bm9yZWNvbXBvc2UucHVzaCh0eXBlKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gTWVyZ2Uga2V5L3ZhbCBhdHRyaWJ1dGVzLi4uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdF91bmlxdWUoZ2xvYmFsUGFyYW1zLmtleVZhbEF0dHJpYnV0ZXMuY29uY2F0KCdzdHlsZScpKS5mb3JFYWNoKHR5cGUgPT4ge1xyXG5cdFx0dmFyIGJfYXR0ciwgYV9hdHRyO1xyXG5cdFx0aWYgKCFub3JlY29tcG9zZS5pbmNsdWRlcyh0eXBlKSAmJiAhbm9yZWNvbXBvc2UuaW5jbHVkZXMoJyonKSAmJiAoYl9hdHRyID0gZWxGcm9tLmdldEF0dHJpYnV0ZSh0eXBlKSkpIHtcclxuXHRcdFx0aWYgKGFfYXR0ciA9IGVsVG8uZ2V0QXR0cmlidXRlKHR5cGUpKSB7XHJcblx0XHRcdFx0dmFyIGpvaW50RGVmcyA9IGFwcGVuZE9yUHJlcGVuZCA9PT0gJ3ByZXBlbmQnID8gW2JfYXR0ciwgYV9hdHRyXSA6IFthX2F0dHIsIGJfYXR0cl07XHJcblx0XHRcdFx0aWYgKCFqb2ludERlZnNbMF0udHJpbSgpLmVuZHNXaXRoKCc7JykpIHtcclxuXHRcdFx0XHRcdGpvaW50RGVmc1swXSA9IGpvaW50RGVmc1swXSArICc7JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFyIGpvaW50RGVmcyA9IFtiX2F0dHJdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsVG8uc2V0QXR0cmlidXRlKHR5cGUsIGpvaW50RGVmcy5qb2luKCcgJykpO1xyXG5cdFx0XHRub3JlY29tcG9zZS5wdXNoKHR5cGUpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBQb3J0IGFsbCBvdGhlciBhdHRyaWJ1dGVzLi4uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZWxGcm9tLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHR2YXIgYXR0ciA9IGVsRnJvbS5hdHRyaWJ1dGVzW2ldO1xyXG5cdFx0aWYgKCFub3JlY29tcG9zZS5pbmNsdWRlcyhhdHRyLm5hbWUpICYmICFub3JlY29tcG9zZS5pbmNsdWRlcygnKicpICYmICFlbFRvLmhhc0F0dHJpYnV0ZShhdHRyLm5hbWUpKSB7XHJcblx0XHRcdGVsVG8uc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7XHJcblx0XHRcdG5vcmVjb21wb3NlLnB1c2goYXR0ci5uYW1lKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEZvciBkYXRhIGJsb2Nrcy4uLlxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKCdAZGlyZWN0aXZlcycpICYmICFub3JlY29tcG9zZS5pbmNsdWRlcygnKicpKSB7XHJcblx0XHR2YXIgZWxUb0RlZnMgPSBfYXJyRnJvbSgoZWxUby5zaGFkb3dSb290IHx8IGVsVG8pLmNoaWxkcmVuKVxyXG5cdFx0XHQuZmlsdGVyKG5vZGUgPT4gbm9kZS5tYXRjaGVzKGdsb2JhbFBhcmFtcy50YWdNYXAuanNlbikpO1xyXG5cdFx0dmFyIGVsRnJvbURlZnMgPSBfYXJyRnJvbSgoZWxGcm9tLnNoYWRvd1Jvb3QgfHwgZWxGcm9tKS5jaGlsZHJlbilcclxuXHRcdFx0LmZpbHRlcihub2RlID0+IG5vZGUubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmpzZW4pKTtcclxuXHRcdGlmIChlbEZyb21EZWZzLmxlbmd0aCkge1xyXG5cdFx0XHRpZiAoZWxUb0RlZnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0ZWxUb0RlZnNbMF1bYXBwZW5kT3JQcmVwZW5kXShlbEZyb21EZWZzWzBdLnRleHRDb250ZW50KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbFRvLnByZXBlbmQoZWxGcm9tRGVmc1swXS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlbFRvO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgcmVjb21wb3NlTm9kZXMgZnJvbSAnLi9yZWNvbXBvc2VOb2Rlcy5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2VEaXJlY3RpdmVzIGZyb20gJy4vcmVjb21wb3NlRGlyZWN0aXZlcy5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb3NlcyBhIGNvbXBvbmVudCBmcm9tIGEgc3VwZXIgY29tcG9uZW50LlxyXG4gKlxyXG4gKiBBbGwgZGVmaW5pdGlvbnMgd2lsbCBiZSBpbmhlcml0ZWQuXHJcbiAqIElmIHRoZSBpZGVhIGlzIHRvIGltcG9ydCwgdGhlIHN1cGVyIGNvbXBvbmVudCdzIGVsZW1lbnQgd2lsbCBiZSByZXR1cm5lZCxcclxuICogKE9uIGltcG9ydCwgbm9kZXMgaW4gY29tcG9uZW50IChhcyBkZWZpbmVkLCBpZikgd2lsbCBiZSB1cGxvYWRlZCBpbnRvIHNsb3RzIGluIHRoZSBzdXBlciBjb21wb25lbnQuKVxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsVG9cclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbEZyb21cclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWxGcm9tLCBlbFRvKSB7XHJcblx0aWYgKGVsVG8ubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmltcG9ydCkpIHtcclxuXHRcdHJldHVybiByZWNvbXBvc2VOb2RlcyhlbFRvLypmcm9tIGltcG9ydCBhY3R1YWxseSovLCBlbEZyb20vKnRvIGVsZW1lbnQgYWN0dWFsbHkqLyk7XHJcblx0fVxyXG5cdC8vIFdlIHdpbGwgYXBwZW5kIGRlZnMgZnJvbSB0aGUgZWxGcm9tIGludG8gZWxUb1xyXG5cdHJldHVybiByZWNvbXBvc2VEaXJlY3RpdmVzKGVsRnJvbSwgZWxUbywgJ3ByZXBlbmQnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgcmVjb21wb3NlRGlyZWN0aXZlcyBmcm9tICcuL3JlY29tcG9zZURpcmVjdGl2ZXMuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uL3BhcmFtcy5qcyc7XHJcblx0XHJcbi8qKlxyXG4gKiBDb21wb3NlcyBhIGNvbXBvbmVudCBmcm9tIGEgc3VwZXIgY29tcG9uZW50LlxyXG4gKlxyXG4gKiBBbGwgZGVmaW5pdGlvbnMgd2lsbCBiZSBpbmhlcml0ZWQuXHJcbiAqIElmIHRoZSBpZGVhIGlzIHRvIGltcG9ydCwgdGhlIHN1cGVyIGNvbXBvbmVudCdzIGVsZW1lbnQgd2lsbCBiZSByZXR1cm5lZCxcclxuICogKE9uIGltcG9ydCwgbm9kZXMgaW4gY29tcG9uZW50IChhcyBkZWZpbmVkLCBpZikgd2lsbCBiZSB1cGxvYWRlZCBpbnRvIHNsb3RzIGluIHRoZSBzdXBlciBjb21wb25lbnQuKVxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsRnJvbVxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsVG9cclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWxGcm9tLCBlbFRvKSB7XHJcblx0ZWxUbyA9IGVsVG8uY2xvbmVOb2RlKHRydWUpO1xyXG5cdHZhciBlbEZyb21OcyA9IGVsRnJvbS5nZXRBdHRyaWJ1dGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAubmFtZXNwYWNlKTtcclxuXHR2YXIgZWxUb05zID0gZWxUby5nZXRBdHRyaWJ1dGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAubmFtZXNwYWNlKTtcclxuXHR2YXIgZWxUb1JvbGVzID0gKGVsVG8uZ2V0QXR0cmlidXRlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1cGVycm9sZSkgfHwgJycpLnNwbGl0KCcgJykubWFwKHIgPT4gci50cmltKCkpO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBTbyB3ZSBjb25jYXQoKSB0aGUgcm9sZSBhdHRyaWJ1dGVcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ZWxUby5zZXRBdHRyaWJ1dGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAubmFtZXNwYWNlLCBlbEZyb21Ocyk7XHJcblx0Ly8gV2Ugd2lsbCBwcmVwZW5kIGRlZnMgZnJvbSB0aGUgZWxGcm9tIGludG8gZWxUb1xyXG5cdHJlY29tcG9zZURpcmVjdGl2ZXMoZWxGcm9tLCBlbFRvLCAnYXBwZW5kJyk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIFVwbG9hZCBub2RlcyBpbnRvIGVsVG8ganVzdCB0aGUgd2F5IHNsb3RzIHdvcmsgaW4gV2ViIENvbXBvb25lbnRzXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdF9hcnJGcm9tKChlbEZyb20uc2hhZG93Um9vdCB8fCBlbEZyb20pLmNoaWxkcmVuKS5mb3JFYWNoKChyZXBsYWNlbWVudE5vZGUsIGkpID0+IHtcclxuXHRcdGlmIChyZXBsYWNlbWVudE5vZGUubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmpzZW4pKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHJlcGxhY2VtZW50Tm9kZSA9IHJlcGxhY2VtZW50Tm9kZS5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHR2YXIgYXBwbGljYWJsZUNvbnRleHRSb2xlcyA9IFtdLCBhcHBsaWNhYmxlUmVwbGFjZW1lbnROb2RlUm9sZXMgPSBbXTtcclxuXHRcdHZhciByZXBsYWNlbWVudE5vZGVSb2xlcyA9IChyZXBsYWNlbWVudE5vZGUuZ2V0QXR0cmlidXRlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1YnJvbGUpIHx8ICcnKS5zcGxpdCgnICcpLm1hcChyID0+IHIudHJpbSgpKTtcclxuXHRcdHJlcGxhY2VtZW50Tm9kZVJvbGVzLmZvckVhY2gocmVwbGFjZW1lbnROb2RlUm9sZSA9PiB7XHJcblx0XHRcdHZhciBfYXBwbGljYWJsZUNvbnRleHRSb2xlcyA9IGVsVG9Sb2xlcy5maWx0ZXIoY29udGV4dFJvbGUgPT4gcmVwbGFjZW1lbnROb2RlUm9sZS5zdGFydHNXaXRoKGNvbnRleHRSb2xlICsgJy0nKSk7XHJcblx0XHRcdGlmIChfYXBwbGljYWJsZUNvbnRleHRSb2xlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRhcHBsaWNhYmxlQ29udGV4dFJvbGVzLnB1c2goX2FwcGxpY2FibGVDb250ZXh0Um9sZXNbMF0pO1xyXG5cdFx0XHRcdGFwcGxpY2FibGVSZXBsYWNlbWVudE5vZGVSb2xlcy5wdXNoKHJlcGxhY2VtZW50Tm9kZVJvbGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBDU1NFc2NhcGUgPSBnbG9iYWxQYXJhbXMuY29udGV4dC5DU1MgPyBnbG9iYWxQYXJhbXMuY29udGV4dC5DU1MuZXNjYXBlIDogc3RyID0+IHN0cjtcclxuXHRcdGlmIChhcHBsaWNhYmxlQ29udGV4dFJvbGVzLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgc2xvdE5vZGVzO1xyXG5cdFx0XHR2YXIgY29udGV4dFNlbGVjdG9yID0gYXBwbGljYWJsZUNvbnRleHRSb2xlcy5tYXAoY29udGV4dFJvbGUgPT4gJ1snICsgQ1NTRXNjYXBlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1cGVycm9sZSkgKyAnfj1cIicgKyBjb250ZXh0Um9sZSArICdcIl0nKTtcclxuXHRcdFx0dmFyIHNsb3ROb2RlU2VsZWN0b3IgPSBhcHBsaWNhYmxlUmVwbGFjZW1lbnROb2RlUm9sZXMubWFwKHJlcGxhY2VtZW50Tm9kZVJvbGUgPT4gJ1snICsgQ1NTRXNjYXBlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1YnJvbGUpICsgJ349XCInICsgcmVwbGFjZW1lbnROb2RlUm9sZSArICdcIl0nKTtcclxuXHRcdFx0aWYgKChlbFRvLnNoYWRvd1Jvb3QgJiYgKHNsb3ROb2RlcyA9IGVsVG8uc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKHNsb3ROb2RlU2VsZWN0b3IpKSlcclxuXHRcdFx0fHwgKChzbG90Tm9kZXMgPSBlbFRvLnF1ZXJ5U2VsZWN0b3JBbGwoc2xvdE5vZGVTZWxlY3RvcikpLmxlbmd0aCA9PT0gMSAmJiBzbG90Tm9kZXNbMF0uY2xvc2VzdChjb250ZXh0U2VsZWN0b3IpID09PSBlbFRvKSkge1xyXG5cdFx0XHRcdC8vIFdlIHdpbGwgcHJlcGVuZCBkZWZzIGZyb20gdGhlIHNsb3Qgbm9kZSBpbnRvIHJlcGxhY2VtZW50IG5vZGVcclxuXHRcdFx0XHRyZWNvbXBvc2VEaXJlY3RpdmVzKHNsb3ROb2Rlc1swXSwgcmVwbGFjZW1lbnROb2RlLCAncHJlcGVuZCcpO1xyXG5cdFx0XHRcdC8vIFBvcnQgdG8gdGFyZ2V0Li4uXHJcblx0XHRcdFx0c2xvdE5vZGVzWzBdLnJlcGxhY2VXaXRoKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ0NvbXBvc2l0aW9uIEVycm9yOiBOb2RlICMnICsgaSArICcgKGF0ICcgKyBlbEZyb21OcyArICcpIG11c3QgbWF0Y2ggZXhhY3RseSBvbmUgdGFyZ2V0Tm9kZSBpbiAnICsgZWxUb05zICsgJyEgKCcgKyBzbG90Tm9kZXMubGVuZ3RoICsgJyBtYXRjaGVkKScpO1xyXG5cdFx0XHRcdGVsVG8uYXBwZW5kKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsVG8uYXBwZW5kKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIGVsVG87XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIE1hdHJpeCBsb2FkZXJcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXgge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgTWF0cml4IGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5IFx0XHRcdHNvdXJjZXNcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGFycmF5IFx0XHRuYW1lc3BhY2VcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0Z2V0dGVyXHJcblx0ICogQHBhcmFtIE1hdHJpeEludGVyZmFjZVx0Y2FycnlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHNvdXJjZXMsIG5hbWVzcGFjZSwgZ2V0dGVyLCBjYXJyeSA9IG51bGwpIHtcclxuXHRcdHRoaXMuc291cmNlcyA9IF9hcnJGcm9tKHNvdXJjZXMpO1xyXG5cdFx0dGhpcy5uYW1lc3BhY2UgPSBfYXJyRnJvbShuYW1lc3BhY2UpO1xyXG5cdFx0dGhpcy5nZXR0ZXIgPSBnZXR0ZXI7XHJcblx0XHR0aGlzLmNhcnJ5ID0gY2Fycnk7XHJcblx0XHR0aGlzLmNvbGxlY3Rpb25zID0ge307XHJcblx0XHR0aGlzLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRW50ZXJzIGludG8gYSBzdWIgY29sbGVjdGlvbiBpZiBleGlzdHMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0XHRcdG5hbWVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gTWF0cml4SW50ZXJmYWNlXHJcblx0ICovXHJcblx0ZW50ZXIobmFtZSkge1xyXG5cdFx0aWYgKCEobmFtZSBpbiB0aGlzLmNvbGxlY3Rpb25zKSkge1xyXG5cdFx0XHR0aGlzLmNvbGxlY3Rpb25zW25hbWVdID0gbmV3IE1hdHJpeChcclxuXHRcdFx0XHR0aGlzLnNvdXJjZXMsIFxyXG5cdFx0XHRcdHRoaXMubmFtZXNwYWNlLmNvbmNhdChuYW1lKSxcclxuXHRcdFx0XHR0aGlzLmdldHRlcixcclxuXHRcdFx0XHR0aGlzIFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbnNbbmFtZV07XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMZWF2ZXMgdGhlIGN1cnJlbnQgY3VycmVudCBjb2xsZWN0aW9uIGludG8gdGhlIHN1cGVyIGNvbGxlY3Rpb24gaWYgZXhpc3RzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBNYXRyaXhJbnRlcmZhY2VcclxuXHQgKi9cclxuXHRsZWF2ZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLmNhcnJ5O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTGF6eS1sb2FkcyBhIHByb3BlcnR5IGZyb20gc291cmNlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRnZXQoKSB7XHJcblx0XHRpZiAoIXRoaXMudmFsdWUpIHtcclxuXHRcdFx0dmFyIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlLnNsaWNlKCk7XHJcblx0XHRcdHZhciB2YWx1ZSA9IHRoaXMuY2FycnkgPyB0aGlzLmNhcnJ5LmdldCgpIDogbnVsbDtcclxuXHRcdFx0dGhpcy5zb3VyY2VzLmZvckVhY2goKHNvdXJjZSwgaSkgPT4ge1xyXG5cdFx0XHRcdGlmICh2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwobnVsbCwgc291cmNlLCBuYW1lc3BhY2UsIHZhbHVlLCBpKSkge1xyXG5cdFx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluZHMgdGhlIG1vc3Qtc3BlY2lmaWMgbW9kdWxlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlIGZyb20gc291cmNlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdGluZ1x0XHRcdFx0XHRuYW1lc3BhY2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0ZmluZChuYW1lc3BhY2UpIHtcclxuXHRcdHZhciBuc0FycmF5ID0gbmFtZXNwYWNlLnNwbGl0KCcvJyk7XHJcblx0XHR2YXIgc3ViTWF0cml4LCBuc0tleSwgbnNEcmlsbCA9IHRoaXM7XHJcblx0XHR3aGlsZSgobnNLZXkgPSBuc0FycmF5LnNoaWZ0KCkpICYmIChuc0RyaWxsID0gbnNEcmlsbC5lbnRlcihuc0tleSkpKSB7XHJcblx0XHRcdHN1Yk1hdHJpeCA9IG5zRHJpbGw7IFxyXG5cdFx0fVxyXG5cdFx0Ly8gQ2xvbmUgbm93Li4uXHJcblx0XHR2YXIgZWwgPSBzdWJNYXRyaXguZ2V0KCk7XHJcblx0XHRpZiAoZWwpIHtcclxuXHRcdFx0cmV0dXJuIGVsLmNsb25lTm9kZSh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9kaXZpZGUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZGl2aWRlLmpzJztcclxuaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICcuLi9wYXJhbXMuanMnO1xyXG5pbXBvcnQgcmVjb21wb3NlIGZyb20gJy4vcmVjb21wb3NlLmpzJztcclxuaW1wb3J0IE1hdHJpeCBmcm9tICcuL01hdHJpeC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihidW5kbGVFbGVtZW50cywgcHJvbWlzZVJlY2lldmVyID0gbnVsbCkge1xyXG5cdFxyXG5cdHZhciBbbG9hZGluZ0J1bmRsZXMsIHJlYWR5QnVuZGxlc10gPSBfZGl2aWRlKGJ1bmRsZUVsZW1lbnRzLCBiID0+IGIgaW5zdGFuY2VvZiBQcm9taXNlKTtcclxuXHRjb25zdCBsb2FkaW5nQnVuZGxlc1Byb21pc2UgPSBQcm9taXNlLmFsbChsb2FkaW5nQnVuZGxlcykudGhlbihmZXRjaGVkQnVuZGxlcyA9PiB7XHJcblx0XHRyZWFkeUJ1bmRsZXMucHVzaCguLi5mZXRjaGVkQnVuZGxlcyk7XHJcblx0XHRsb2FkaW5nQnVuZGxlcyA9IFtdO1xyXG5cdH0pO1xyXG5cdGlmIChwcm9taXNlUmVjaWV2ZXIpIHtcclxuXHRcdHByb21pc2VSZWNpZXZlcihsb2FkaW5nQnVuZGxlc1Byb21pc2UpO1xyXG5cdH1cclxuXHR2YXIgd2FybmVkRWFybHlCdW5kbGVBY2Nlc3M7XHJcblx0Y29uc3QgYW50aWN5Y2xpY0J1bmRsZXNRdWVyeSA9IFtdO1xyXG5cdGNvbnN0IGJ1bmRsZU1hdHJpeCA9IG5ldyBNYXRyaXgocmVhZHlCdW5kbGVzLypzb3VyY2VzKi8sIFtdLypuYW1lc3BhY2UqLywgKGJ1bmRsZSwgbmFtZXNwYWNlLCBzdXBlckVsLCBidW5kbGVJbmRleCkgPT4ge1xyXG5cdFx0dmFyIF9uYW1lc3BhY2UgPSBuYW1lc3BhY2Uuam9pbignLycpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJcyB0aGUgY3VycmVudCBpbXBvcnQgcHJvY2VzcyB0cnlpbmcgdG8gYmUgY3ljbGljP1xyXG5cdFx0Ly8gV2UgbW92ZSBvbmUtbGV2ZWwgdXAgdGhlIG5hbWVzcGFjZSBoaWVyYXJjaHkuXHJcblx0XHRpZiAoYW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5pbmNsdWRlcyhfbmFtZXNwYWNlKSkge1xyXG5cdFx0XHRyZXR1cm4gYnVuZGxlTWF0cml4LmZpbmQobmFtZXNwYWNlLnNsaWNlKDAsIC0xKS5qb2luKCcvJykpO1xyXG5cdFx0fVxyXG5cdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wdXNoKF9uYW1lc3BhY2UpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJcyBzb21lb25lIHRyeWluZyB0byBpbXBvcnQgd2hpbGUgYnVuZGxlcyBhcmUgc3RpbGwgbG9hZGluZz9cclxuXHRcdGlmIChsb2FkaW5nQnVuZGxlcy5sZW5ndGggJiYgIXdhcm5lZEVhcmx5QnVuZGxlQWNjZXNzKSB7XHJcblx0XHRcdHdhcm5lZEVhcmx5QnVuZGxlQWNjZXNzID0gdHJ1ZTtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdSZW1vdGUgYnVuZGxlcyBhcmUgc3RpbGwgbG9hZGluZyBhdCB0aGlzIHRpbWUhIFlvdSBzaG91bGQgcHJvYmFiYmx5IHdyYXAgYnVuZGxlLWRlcGVuZGVudCBjb2RlIHdpdGhpbiBDaHRtbC5yZWFkeShjYWxsYmFja1ssIHRydWUvKndhaXRGb3JCdW5kbGVzKi9dKS4nKTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgcXVlcnkgbm93Li4uXHJcblx0XHR2YXIgQ1NTRXNjYXBlID0gZ2xvYmFsUGFyYW1zLmNvbnRleHQuQ1NTIFxyXG5cdFx0XHQ/IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUy5lc2NhcGUgXHJcblx0XHRcdDogc3RyID0+IHN0cjtcclxuXHRcdHZhciBlbCA9IF9hcnJGcm9tKGJ1bmRsZS5jb250ZW50LmNoaWxkcmVuKS5maWx0ZXIobm9kZSA9PiBub2RlLm1hdGNoZXMoJ1snICsgQ1NTRXNjYXBlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLm5hbWVzcGFjZSkgKyAnPVwiJyArIF9uYW1lc3BhY2UgKyAnXCJdJykpWzBdXHJcblxyXG5cdFx0aWYgKGVsICYmIHN1cGVyRWwpIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR2YXIgbm9yZWNvbXBvc2UgPSBbXTtcclxuXHRcdFx0XHRpZiAoYnVuZGxlLmhhc0F0dHJpYnV0ZSgnbm9yZWNvbXBvc2UnKSkge1xyXG5cdFx0XHRcdFx0bm9yZWNvbXBvc2UgPSAoYnVuZGxlLmdldEF0dHJpYnV0ZSgnbm9yZWNvbXBvc2UnKSB8fCAnKicpLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwudHJpbSgpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWwgPSByZWNvbXBvc2Uoc3VwZXJFbCwgZWwsICdwcmVwZW5kJywgbm9yZWNvbXBvc2UpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdbSW5oZXJpdGFuY2UgZXJyb3IgYXQgc291cmNlICMnICsgYnVuZGxlSW5kZXggKyAnXTogJyArIGUubWVzc2FnZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wb3AoKTtcclxuXHRcdFx0cmV0dXJuIGVsO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBVcGRhdGUgY3ljbGljaXNtLi4uIGxvbFxyXG5cdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wb3AoKTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gSWYgdGhlcmUgd2FzIG5vIG1vZHVsZSB3aXRoIHRoZSByZXF1ZXN0ZWQgbmFtZXNwYWNlXHJcblx0XHQvLyB3ZSByZXR1cm4gdGhlIHN1cGVyIG1vZHVsZVxyXG5cdFx0cmV0dXJuIGVsID8gZWwuY2xvbmVOb2RlKHRydWUpIDogKFxyXG5cdFx0XHRzdXBlckVsID8gc3VwZXJFbC5jbG9uZU5vZGUodHJ1ZSkgOiBudWxsXHJcblx0XHQpO1xyXG5cdH0vKmdldHRlciovKTtcclxuXHRcclxuXHRyZXR1cm4gYnVuZGxlTWF0cml4O1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcmVtYWluZGVyIG9mIGEgc3RyaW5nIGFmdGVyIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBhZnRlckxhc3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCwgYWZ0ZXJMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGFmdGVyTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cihwb3MgKyBzZWFyY2gubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGl0ZW0gaWYgbm90IGFscmVhZHkgZXhpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdC4uLml0bXNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCAuLi5pdGVtcykge1xyXG5cdGl0ZW1zLmZvckVhY2goaXRtID0+IHtcclxuXHRcdGlmIChhcnIuaW5kZXhPZihpdG0pIDwgMCkge1xyXG5cdFx0XHRhcnIucHVzaChpdG0pO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICcuLi9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZ2V0UHJvdG90eXBlQ2hhaW4gZnJvbSAnLi9nZXRQcm90b3R5cGVDaGFpbi5qcyc7XHJcblxyXG4vKipcclxuICogRWFnZXJseSByZXRyaWV2ZXMgb2JqZWN0IG1lbWJlcnMgYWxsIGRvd24gdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR2YXIga2V5c0FsbCA9IFtdO1xyXG5cdF9nZXRQcm90b3R5cGVDaGFpbihvYmosIHVudGlsKS5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRfcHVzaFVuaXF1ZShrZXlzQWxsLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcclxuXHR9KTtcclxuXHRyZXR1cm4ga2V5c0FsbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHVudGlsID0gdW50aWwgfHwgT2JqZWN0LnByb3RvdHlwZTtcclxuXHR1bnRpbCA9IHVudGlsICYmICFfaXNBcnJheSh1bnRpbCkgPyBbdW50aWxdIDogdW50aWw7XHJcblx0Ly8gV2UgZ2V0IHRoZSBjaGFpbiBvZiBpbmhlcml0YW5jZVxyXG5cdHZhciBwcm90b3R5cGFsQ2hhaW4gPSBbXTtcclxuXHR2YXIgb2JqID0gb2JqO1xyXG5cdHdoaWxlKChvYmogJiYgKCF1bnRpbCB8fCB1bnRpbC5pbmRleE9mKG9iaikgPCAwKSAmJiBvYmoubmFtZSAhPT0gJ2RlZmF1bHQnKSkge1xyXG5cdFx0cHJvdG90eXBhbENoYWluLnB1c2gob2JqKTtcclxuXHRcdG9iaiA9IG9iaiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogbnVsbDtcclxuXHR9XHJcblx0cmV0dXJuIHByb3RvdHlwYWxDaGFpbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2dldEFsbFByb3BlcnR5TmFtZXMgZnJvbSAnLi9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2FsbGJhY2sob2JqcywgY2FsbGJhY2ssIGRlZXBQcm9wcyA9IGZhbHNlLCBpc1JlcGxhY2UgPSBmYWxzZSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHR2YXIgb2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHRpZiAoX2lzTnVtZXJpYyhvYmoxKSB8fCBvYmoxID09PSB0cnVlIHx8IG9iajEgPT09IGZhbHNlKSB7XHJcblx0XHRkZXB0aCA9IG9iajE7XHJcblx0XHRvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdH1cclxuXHRpZiAoIW9ianMubGVuZ3RoKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ19tZXJnZSgpIHJlcXVpcmVzIHR3byBvciBtb3JlIGFycmF5L29iamVjdHMuJyk7XHJcblx0fVxyXG5cdG9ianMuZm9yRWFjaCgob2JqMiwgaSkgPT4ge1xyXG5cdFx0aWYgKCFfaXNUeXBlT2JqZWN0KG9iajIpICYmICFfaXNGdW5jdGlvbihvYmoyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQoZGVlcFByb3BzID8gX2dldEFsbFByb3BlcnR5TmFtZXMob2JqMikgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmoyKSkuZm9yRWFjaChrZXkgPT4ge1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoxID0gb2JqMVtrZXldO1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoyID0gb2JqMltrZXldO1xyXG5cdFx0XHRpZiAoKChfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikpIHx8IChfaXNPYmplY3QodmFsQXRPYmoxKSAmJiBfaXNPYmplY3QodmFsQXRPYmoyKSkpIFxyXG5cdFx0XHQmJiAoZGVwdGggPT09IHRydWUgfHwgZGVwdGggPiAwKSkge1xyXG5cdFx0XHRcdC8vIFJFQ1VSU0UuLi5cclxuXHRcdFx0XHRvYmoxW2tleV0gPSBfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikgPyBbXSA6IHt9O1xyXG5cdFx0XHRcdG1lcmdlQ2FsbGJhY2soW19pc051bWVyaWMoZGVwdGgpID8gZGVwdGggLSAxIDogZGVwdGgsIG9iajFba2V5XSwgdmFsQXRPYmoxLCB2YWxBdE9iajJdLCBjYWxsYmFjaywgZGVlcFByb3BzLCBpc1JlcGxhY2UsIHdpdGhTeW1ib2xzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChjYWxsYmFjayhrZXksIG9iajEsIG9iajIsIGkpKSB7XHJcblx0XHRcdFx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNSZXBsYWNlKSB7XHJcblx0XHRcdFx0XHRcdG9iajFba2V5XSA9IHZhbEF0T2JqMjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG9iajEucHVzaCh2YWxBdE9iajIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHdlJ3JlIHNldHRpbmcgYSByZWFkLW9ubHkgcHJvcGVydHlcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGlmICh3aXRoU3ltYm9scykge1xyXG5cdFx0XHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmoxLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqMiwga2V5KSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0b2JqMVtrZXldID0gb2JqMltrZXldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGNhdGNoKGUpIHt9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHRyZXR1cm4gb2JqMTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5vYmpzKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKG9ianMsIChrLCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiwge1xyXG5cdFN0YXRlbWVudHNcclxufSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ2FsbCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpcmVjdGl2ZXMgZXh0ZW5kcyBTdGF0ZW1lbnRzIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhIGZsYXQgbGlzdCBvZiBydWxlcyB3aG9zZVxyXG5cdCAqIHRoYXQgaGF2ZSBub3QgYmVlbiBvdmVycmlkZW4uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0ZmlsdGVyKCkge1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQ0FTQ0FESU5HIEFORCBPVkVSUklESU5HXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG5cdFx0dGhpcy5zdG10cy5mb3JFYWNoKGRpcmVjdGl2ZSA9PiB7XHJcblx0XHRcdERpcmVjdGl2ZXMuZmxhdHRlbihkaXJlY3RpdmUsIF9kaXJlY3RpdmUgPT4ge1xyXG5cdFx0XHRcdGRpcmVjdGl2ZXMucHVzaChfZGlyZWN0aXZlKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLnJlZHVjZSgoYnVpbGQsIGN1cnJlbnQpID0+IHtcclxuXHRcdFx0YnVpbGQuZm9yRWFjaChleGlzdGluZyA9PiB7XHJcblx0XHRcdFx0aWYgKGV4aXN0aW5nLmlzRHVwbGljYXRlIHx8IGV4aXN0aW5nLm92ZXJyaWRkZW4pIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGN1cnJlbnQudG9TdHJpbmcoKSA9PT0gZXhpc3RpbmcudG9TdHJpbmcoKSBcclxuXHRcdFx0XHQmJiAoY3VycmVudC5pbXBvcnRhbnQgPT09IGV4aXN0aW5nLmltcG9ydGFudCB8fCBjdXJyZW50LmZhbGxiYWNrID09PSBleGlzdGluZy5mYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdGN1cnJlbnQuaXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoY3VycmVudC5pbXBvcnRhbnQgIHx8IGV4aXN0aW5nLmZhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRleGlzdGluZy5vdmVycmlkZGVuID0gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKChleGlzdGluZy5pbXBvcnRhbnQgfHwgY3VycmVudC5mYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdGN1cnJlbnQub3ZlcnJpZGRlbiA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIGJ1aWxkLmNvbmNhdChbY3VycmVudF0pO1xyXG5cdFx0fSwgW10pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gRklOQUwgRklMVEVSSU5HIEFORCBQQVJTSU5HXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRyZXR1cm4gZGlyZWN0aXZlcy5maWx0ZXIoZGlyZWN0aXZlID0+ICFkaXJlY3RpdmUuaXNEdXBsaWNhdGUgJiYgIWRpcmVjdGl2ZS5vdmVycmlkZGVuKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV3cml0ZXMgZGlyZWN0aXZlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRzdGF0aWMgZmxhdHRlbihkaXJlY3RpdmUsIGNhbGxiYWNrLCBhc3NlcnRpb24gPSAnJykge1xyXG5cdFx0aWYgKGRpcmVjdGl2ZS5qc2VuVHlwZSA9PT0gJ0lmQ29uZGl0aW9uYWwnKSB7XHJcblx0XHRcdC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHRcdFx0Ly8gT24gdHJ1ZVxyXG5cdFx0XHQvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblx0XHRcdHZhciBfYXNzZXJ0aW9uID0gJygnICsgZGlyZWN0aXZlLmFzc2VydGlvbi50b1N0cmluZygpICsgJyknO1xyXG5cdFx0XHRpZiAoZGlyZWN0aXZlLm9uVHJ1ZSkge1xyXG5cdFx0XHRcdGlmIChkaXJlY3RpdmUub25UcnVlLmpzZW5UeXBlID09PSAnU3RhdGVtZW50cycpIHtcclxuXHRcdFx0XHRcdGRpcmVjdGl2ZS5vblRydWUuc3RtdHMuZm9yRWFjaChfZGlyZWN0aXZlID0+IHtcclxuXHRcdFx0XHRcdFx0RGlyZWN0aXZlcy5mbGF0dGVuKF9kaXJlY3RpdmUsIGNhbGxiYWNrLCAoYXNzZXJ0aW9uID8gYXNzZXJ0aW9uICsgJyAmJiAnIDogJycpICsgX2Fzc2VydGlvbilcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHREaXJlY3RpdmVzLmZsYXR0ZW4oZGlyZWN0aXZlLm9uVHJ1ZSwgY2FsbGJhY2ssIChhc3NlcnRpb24gPyBhc3NlcnRpb24gKyAnICYmICcgOiAnJykgKyBfYXNzZXJ0aW9uKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblx0XHRcdC8vIE9uIGZhbHNlXHJcblx0XHRcdC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHRcdFx0aWYgKGRpcmVjdGl2ZS5vbkZhbHNlKSB7XHJcblx0XHRcdFx0aWYgKGRpcmVjdGl2ZS5vbkZhbHNlLmpzZW5UeXBlID09PSAnU3RhdGVtZW50cycpIHtcclxuXHRcdFx0XHRcdGRpcmVjdGl2ZS5vbkZhbHNlLnN0bXRzLmZvckVhY2goX2RpcmVjdGl2ZSA9PiB7XHJcblx0XHRcdFx0XHRcdERpcmVjdGl2ZXMuZmxhdHRlbihfZGlyZWN0aXZlLCBjYWxsYmFjaywgKGFzc2VydGlvbiA/IGFzc2VydGlvbiArICcgJiYgJyA6ICcnKSArICchJyArIF9hc3NlcnRpb24pXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0RGlyZWN0aXZlcy5mbGF0dGVuKGRpcmVjdGl2ZS5vbkZhbHNlLCBjYWxsYmFjaywgKGFzc2VydGlvbiA/IGFzc2VydGlvbiArICcgJiYgJyA6ICcnKSArICchJyArIF9hc3NlcnRpb24pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoYXNzZXJ0aW9uKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2soSnNlbi5wYXJzZShhc3NlcnRpb24gKyAnICYmIFwiW0VORElGXVwiICYmICcgKyBkaXJlY3RpdmUudG9TdHJpbmcoKSkpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhbGxiYWNrKGRpcmVjdGl2ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIucGFyc2UoXHJcblx0XHRcdCFleHByLnRyaW0oKS5lbmRzV2l0aCgnOycpID8gZXhwciArICc7JyA6IGV4cHIsIFxyXG5cdFx0XHQoX2V4cHIsIF9QYXJzZXJzID0gbnVsbCwgX3BhcmFtcyA9IG51bGwpICA9PiBKc2VuLnBhcnNlKF9leHByLCBfUGFyc2VycywgX3BhcmFtcyA/IF9tZXJnZShwYXJhbXMsIF9wYXJhbXMpIDogcGFyYW1zKS8qcGFyc2VDYWxsYmFjayovLCBcclxuXHRcdFx0RGlyZWN0aXZlcy8qU3RhdGljKi9cclxuXHRcdCk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogTG9vcHMgdGhydSBvYmogZmxhdGx5IHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogU3RvcHMgd2hlbiBjYWxsYmFjayByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRvYmogXHRcdFx0VGhlIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0XHRjYWxsYmFjayBcdFx0VGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfG51bGxcdFx0XHRBbnkgbm9uLW51bGwgcmV0dXJuIGZyb20gY2FsbGJhY2tcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcclxuXHR2YXIgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0aWYgKF9pc1R5cGVPYmplY3Qob2JqKSkge1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrLCBpKSA9PiB7XHJcblx0XHRcdGlmIChyZXR1cm5WYWx1ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKF9pc051bWVyaWMoaykgPyBwYXJzZUZsb2F0KGspIDogaywgb2JqW2tdLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5WYWx1ZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIENvcGllcyBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0ZmlsdGVyXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGZpbHRlciA9IFtdLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdGlmIChfaXNOdW1lcmljKGFyZ3VtZW50c1swXSkgJiYgX2lzVHlwZU9iamVjdChhcmd1bWVudHNbMV0pKSB7XHJcblx0XHRkZXB0aCA9IGFyZ3VtZW50c1swXTtcclxuXHRcdG9iaiA9IGFyZ3VtZW50c1sxXTtcclxuXHRcdGZpbHRlciA9IGFyZ3VtZW50c1syXSB8fCBbXTtcclxuXHR9XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKFtkZXB0aCwge30sIG9ial0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiBfaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKGtleSkgXHJcblx0XHRcdDogKF9pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA/IGZpbHRlci5pbmRleE9mKGtleSkgPiAtMSA6IHRydWUpO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCB3aXRoU3ltYm9scyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgSFRNTCBDb250ZXh0IE1vZGVsIFNjaGVtYS5cclxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbi8qKlxyXG4gKiBAb2JqZWN0XHJcbiAqL1xyXG5jb25zdCBTY2hlbWEgPSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQG9iamVjdFxyXG5cdCAqL1xyXG5cdHN0ZDoge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBAdW5jYXRlZ29yaXplZFxyXG5cdFx0ICovXHJcblx0XHRodG1sOiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLFxyXG5cdFx0XHRtb2RlbDogWydoZWFkJywgJ2JvZHknXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNhcHRpb246IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIXRhYmxlJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjb2w6IHtcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRjb2xncm91cDoge1xyXG5cdFx0XHRtb2RlbDogW3snY29sZ3JvdXBbc3Bhbl0nOiBbJyNub3RoaW5nJ119LCB7Jzpub3QoY29sZ3JvdXBbc3Bhbl0pJzogWydjb2wnLCAndGVtcGxhdGUnXX1dLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0ZGQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnZGVmaW5pdGlvbicsXHJcblx0XHR9LFxyXG5cdFx0ZHQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnISNoZWFkaW5nJywgJyEjc2VjdGlvbmluZycsICchaGVhZGVyJywgJyFmb290ZXInXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAndGVybScsXHJcblx0XHR9LFxyXG5cdFx0ZmlnY2FwdGlvbjoge1xyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0aGVhZDoge1xyXG5cdFx0XHRtb2RlbDogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxlZ2VuZDoge1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxpOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2xpc3RpdGVtJyxcclxuXHRcdH0sXHJcblx0XHRvcHRncm91cDoge1xyXG5cdFx0XHRtb2RlbDogWydvcHRpb24nLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2dyb3VwJyxcclxuXHRcdH0sXHJcblx0XHRvcHRpb246IHtcclxuXHRcdFx0bW9kZWw6IFt7J29wdGlvbltsYWJlbF1bdmFsdWVdJzogWycjbm90aGluZyddfSwgeydvcHRpb25bbGFiZWxdOm5vdChvcHRpb25bdmFsdWVdKSc6IFsnI3RleHQnXX0sIHsnOm5vdChvcHRpb25bbGFiZWxdKSc6IFsnI3RleHQnXX1dLFxyXG5cdFx0fSxcclxuXHRcdHBhcmFtOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0cnA6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdH0sXHJcblx0XHRydDoge1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzb3VyY2U6IHtcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdW1tYXJ5OiB7XHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqL1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnI2hlYWRpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHRyYWNrOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0dGJvZHk6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ3RyJ10sXHJcblx0XHR9LFxyXG5cdFx0dGQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnISNoZWFkaW5nJywgJyEjc2VjdGlvbmluZycsICchaGVhZGVyJywgJyFmb290ZXInXSxcclxuXHRcdH0sXHJcblx0XHR0Zm9vdDoge1xyXG5cdFx0XHRtb2RlbDogWyd0cicsICcjc2NyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHRoZWFkOiB7XHJcblx0XHRcdG1vZGVsOiBbJ3RyJywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dHI6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ3RkJywgJ3RoJ10sXHJcblx0XHR9LFxyXG5cdFx0LyoqXHJcblx0XHQgKiBAY2F0ZWdvcml6ZWRcclxuXHRcdCAqL1xyXG5cdFx0YToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsIHsnYVtocmVmXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNpbnRlcmFjdGl2ZScsICchYSddLFxyXG5cdFx0fSxcclxuXHRcdGFiYnI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsXSxcclxuXHRcdH0sXHJcblx0XHRhZGRyZXNzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdycsICchI2hlYWRpbmcnLCAnISNzZWN0aW9uaW5nJywgJyFoZWFkZXInLCAnIWZvb3RlcicsICchYWRkcmVzcycsXSxcclxuXHRcdH0sXHJcblx0XHQvLyBJZiBhIGNoaWxkIG9mIDxtYXA+XHJcblx0XHRhcmVhOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGFydGljbGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctY29udGVudCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnYXJ0aWNsZScsXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydhcHBsaWNhdGlvbicsICdhcnRpY2xlJywgJ2RvY3VtZW50JywgJ21haW4nLF0sXHJcblx0XHR9LFxyXG5cdFx0YXNpZGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctY29udGVudCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnY29tcGxlbWVudGFyeScsXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydjb21wbGVtZW50YXJ5JywgJ25vdGUnLCAnc2VhcmNoJyxdLFxyXG5cdFx0fSxcclxuXHRcdGF1ZGlvOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZycsIHsnYXVkaW9bY29udHJvbHNdJzogWycjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCcsICchI21lZGlhJywgJ3RyYWNrJywgeyc6bm90KGF1ZGlvW3NyY10pJzogWydzb3VyY2UnXX1dLFxyXG5cdFx0fSxcclxuXHRcdGI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGJhc2U6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGJkaToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0YmRvOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRibG9ja3F1b3RlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNzZWN0aW9uaW5nLXJvb3QnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdH0sXHJcblx0XHRib2R5OiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnQGJhbm5lcicsICdAY29udGVudGluZm8nLCAnQGNvbXBsZW1lbnRhcnknLCAnQG1haW4nXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGJyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGJ1dHRvbjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnISNpbnRlcmFjdGl2ZSddLFxyXG5cdFx0fSxcclxuXHRcdGNhbnZhczoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNpbnRlcmFjdGl2ZScsICdhJywgJ2ltZ1t1c2VtYXBdJywgJ2J1dHRvbicsICdpbnB1dFt0eXBlPVwiYnV0dG9uXCJdJywgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScsICdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLCAnc2VsZWN0W211bHRpcGxlXScsICdzZWxlY3Rbc2l6ZT49MV0nLCAvKmhhcyB0YWJpbmRleCBidXQgbm90ICNpbnRlcmFjdGl2ZSovJ1t0YWJpbmRleF0hI2ludGVyYWN0aXZlJ10sXHJcblx0XHR9LFxyXG5cdFx0Y2l0ZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0Y29kZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZGF0YWxpc3Q6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyNzY3JpcHQtc3VwcG9ydGluZycsICdvcHRpb24nXSxcclxuXHRcdH0sXHJcblx0XHRkZWw6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50J10sXHJcblx0XHR9LFxyXG5cdFx0ZGV0YWlsczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctcm9vdCddLFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdycsICdzdW1tYXJ5J10sXHJcblx0XHR9LFxyXG5cdFx0ZGZuOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIWRmbiddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICd0ZXJtJyxcclxuXHRcdH0sXHJcblx0XHRkaWFsb2c6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1yb290J10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2RpYWxvZycsXHJcblx0XHR9LFxyXG5cdFx0ZGl2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqL1xyXG5cdFx0XHRtb2RlbDogW3snZGwgPiBkaXYnOiBbJ2R0JywgJ2RkJ119LCB7ZGl2LypUT0RPJzpub3QoZGwgPiBkaXYpJyovOiBbJyNmbG93J119XSxcclxuXHRcdH0sXHJcblx0XHRkbDoge1xyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0dHlwZTogWycjZmxvdycsIC8qezpjb250YWlucyg+ICogbmFtZS12YWx1ZSBncm91cCk6IFsnI3BhbHBhYmxlJ119Ki9dLFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ2RsJywgJ2R0JywgJ2RpdiddLFxyXG5cdFx0fSxcclxuXHRcdGVtOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRlbWJlZDoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRmaWVsZHNldDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNzZWN0aW9uaW5nLXJvb3QnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJ2xlZ2VuZCcsICcjZmxvdyddLFxyXG5cdFx0fSxcclxuXHRcdGZpZ3VyZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNzZWN0aW9uaW5nLXJvb3QnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJ2ZpZ2NhcHRpb24nXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnZmlndXJlJyxcclxuXHRcdH0sXHJcblx0XHRmb290ZXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydjb250ZW50aW5mbycsXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGZvcm06IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWZvcm0nXSxcclxuXHRcdH0sXHJcblx0XHRoMToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aDI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGgzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoNDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aDU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGg2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoZWFkZXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydiYW5uZXInLF0sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRoZ3JvdXA6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0aHI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdyddLFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdzZXBhcmF0b3InLFxyXG5cdFx0fSxcclxuXHRcdGk6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGlmcmFtZToge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRpbWc6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgeydpbWdbdXNlbWFwXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGlucHV0OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgeydpbnB1dDpub3QoW3R5cGUhPVwiaGlkZGVuXCJdKSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGluczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdGtiZDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGxhYmVsOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsICchbGFiZWwnXSxcclxuXHRcdH0sXHJcblx0XHRsaW5rOiB7XHJcblx0XHRcdHR5cGU6IFsnI21ldGFkYXRhJywgeydib2R5IGxpbmsnOiBbJyNmbG93JywgJyNwaHJhc2luZyddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdG1haW46IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ21haW4nLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bWFwOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50J10sXHJcblx0XHR9LFxyXG5cdFx0bWFyazoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdG1hdGg6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0Lypjb21wbGljYXRlZCovXHJcblx0XHRcdG1vZGVsOiBbXSxcclxuXHRcdH0sXHJcblx0XHRtZW51OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHRtZXRhOiB7XHJcblx0XHRcdHR5cGU6IFsnI21ldGFkYXRhJywgeydtZXRhW2l0ZW1wcm9wXSc6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHRcdG5hbWVzOiBbJ2FwcGxpY2F0aW9uLW5hbWUnLCAnYXV0aG9yJywgJ2Rlc2NyaXB0aW9uJywgJ2dlbmVyYXRvcicsICdrZXl3b3JkcycsICdyZWZlcnJlcicsICd0aGVtZS1jb2xvciddLFxyXG5cdFx0fSxcclxuXHRcdG1ldGVyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIW1ldGVyJ10sXHJcblx0XHR9LFxyXG5cdFx0bmF2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3NlY3Rpb25pbmctY29udGVudCcsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ25hdmlnYXRpb24nLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnbmF2aWdhdGlvbicsXSxcclxuXHRcdH0sXHJcblx0XHRub3NjcmlwdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsICcjZmxvdycsICcjcGhyYXNpbmcnXSwgXHJcblx0XHRcdG1vZGVsOiBbeydoZWFkIGxpbmsnOiBbJ3N0eWxlJywgJ21ldGEnLCAnbGluayddfSwgeyc6bm90KGhlYWQgbGluayknOiBbJyN0cmFuc3BhcmVudCcsICchbm9zY3JpcHQnXX1dLFxyXG5cdFx0fSxcclxuXHRcdG9iamVjdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCB7J29iamVjdFt1c2VtYXBdJzogWycjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCcsICdwYXJhbSddLFxyXG5cdFx0fSxcclxuXHRcdG9sOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHRvdXRwdXQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjbGFiZWxhYmxlJywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsICchbWV0ZXInXSxcclxuXHRcdH0sXHJcblx0XHRwOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRwaWN0dXJlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnc291cmNlJywgJ2ltZycsICcjYWNyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRwcmU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHByb2dyZXNzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIXByb2dyZXNzJ10sXHJcblx0XHR9LFxyXG5cdFx0cToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHJ1Ynk6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqLyBcclxuXHRcdFx0bW9kZWw6IFsncnAnLCAncnQnXSxcclxuXHRcdH0sXHJcblx0XHRzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c2FtcDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHNjcmlwdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNtZXRhZGF0YScsICcjcGhyYXNpbmcnLCAnI2FjcmlwdC1zdXBwb3J0aW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogW3snc2NyaXB0W3NyY10nOiBbXX1dLFxyXG5cdFx0fSxcclxuXHRcdHNlY3Rpb246IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1jb250ZW50JywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAncmVnaW9uJyxcclxuXHRcdFx0YWNjZXB0YWJsZVJvbGVzOiBbJ2FsZXJ0JywgJ2FsZXJ0ZGlhbG9nJywgJ2FwcGxpY2F0aW9uJywgJ2NvbnRlbnRpbmZvJywgJ2RpYWxvZycsICdkb2N1bWVudCcsICdsb2cnLCAnbWFpbicsICdtYXJxdWVlJywgJ3JlZ2lvbicsICdzZWFyY2gnLCAnc3RhdHVzJyxdLFxyXG5cdFx0fSxcclxuXHRcdHNlbGVjdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjbGFiZWxhYmxlJywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJ29wdGlvbicsICdvcHRncm91cCcsICcjYWNyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzbG90OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnXSxcclxuXHRcdH0sXHJcblx0XHRzbWFsbDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHNwYW46IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdHJvbmc6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdHlsZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YSddLFxyXG5cdFx0XHRtb2RlbDogWycjdGV4dCddLFxyXG5cdFx0fSxcclxuXHRcdHN1Yjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHN1cDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHN2Zzoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFtdLFxyXG5cdFx0fSxcclxuXHRcdHRhYmxlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWydjYXB0aW9uJywgJ2NvbGdyb3VwJywgJ3RoZWFkJywgJ3Rib2R5JywgJ3RyJywgJ3Rmb290JywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHRkOiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdH0sXHJcblx0XHR0ZW1wbGF0ZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHRleHRhcmVhOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2ludGVyYWN0aXZlJywgJyNsYWJlbGFibGUnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdH0sXHJcblx0XHR0aW1lOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFt7J3RpbWVbZGF0ZXRpbWVdJzogWycjcGhyYXNpbmcnXX0sIHsnOm5vdCh0aW1lW2RhdGV0aW1lXSknOiBbJyN0ZXh0J119XSxcclxuXHRcdH0sXHJcblx0XHR0aXRsZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YSddLFxyXG5cdFx0XHRtb2RlbDogWycjdGV4dCddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHVsOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHR2YXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHR2aWRlbzoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCB7J3ZpZGVvW2NvbnRyb2xzXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNtZWRpYScsICd0cmFjaycsIHsnOm5vdCh2aWRlb1tzcmNdKSc6IFsnc291cmNlJ119XSxcclxuXHRcdH0sXHJcblx0XHR3YnI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQG9iamVjdFxyXG5cdCAqL1xyXG5cdGFyaWE6IHtcclxuXHRcdGJhbm5lcjoge1xyXG5cdFx0XHR0eXBlOiBbJ0BiYW5uZXInXSwgXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjb250ZW50aW5mbzoge1xyXG5cdFx0XHR0eXBlOiBbJ0Bjb250ZW50aW5mbyddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNvbXBsZW1lbnRhcnk6IHtcclxuXHRcdFx0dHlwZTogWydAY29tcGxlbWVudGFyeSddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdG5hdmlnYXRpb246IHtcclxuXHRcdFx0dHlwZTogWydAbmF2aWdhdGlvbiddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxpc3Q6IHtcclxuXHRcdFx0dHlwZTogWydAbGlzdCddLCBcclxuXHRcdH0sXHJcblx0XHRsaXN0aXRlbToge1xyXG5cdFx0XHR0eXBlOiBbJ0BsaXN0aXRlbSddLCBcclxuXHRcdH0sXHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBzZW1hbnRpYyBjb250ZW50IG1vZGVsIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRnZXRDb250ZW50TW9kZWxGb3IoZWwpIHsgXHJcblx0XHR2YXIgZWxUYWdOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiBTY2hlbWEuc3RkW2VsVGFnTmFtZV0gPyBTY2hlbWEuZXhwYW5kUnVsZXMoZWwsIFNjaGVtYS5zdGRbZWxUYWdOYW1lXS5tb2RlbCB8fCBbXSkgOiBbXTtcclxuXHR9LFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIHNlbWFudGljIGNhdGVnb3JpZXMgZm9yIHRoZSBnaXZlbiBlbGVtZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0XHRcdFx0cm9sZUluY2x1c2l2ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGdldENhdGVnb3JpZXNGb3IoZWwsIHJvbGVJbmNsdXNpdmUgPSB0cnVlKSB7XHJcblx0XHR2YXIgZWxUYWdOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHZhciBlbFNjaGVtYSA9IFNjaGVtYS5zdGRbZWxUYWdOYW1lXSB8fCBTY2hlbWEuYXJpYVtlbFRhZ05hbWVdIHx8IHt9O1xyXG5cdFx0dmFyIGN1cnJlbnRFbENhdGVnb3JpZXMgPSBbXTtcclxuXHRcdGlmIChyb2xlSW5jbHVzaXZlICYmICFlbC5ub2RlTmFtZS5zdGFydHNXaXRoKCcjJykgXHJcblx0XHQmJiAoZWwuaGFzQXR0cmlidXRlKCdyb2xlJykgfHwgZWxTY2hlbWEuaW1wbGljaXRSb2xlKSkge1xyXG5cdFx0XHQvLyBDdXJyZW50IGVsJ3MgaW1wbGlhYmxlL2FjY2VwdGFibGUgcm9sZXNcclxuXHRcdFx0Ly8gKFRoZXNlIHRha2UgcHJlY2VkZW5jZSBvdmVyIG5hdGl2ZSBzZW1hbnRpY3MpXHJcblx0XHRcdGlmIChlbC5oYXNBdHRyaWJ1dGUoJ3JvbGUnKSkge1xyXG5cdFx0XHRcdHZhciBkZWZpbmVkUm9sZXMgPSBlbC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKS5zcGxpdCgnICcpO1xyXG5cdFx0XHRcdGVsLmdldEF0dHJpYnV0ZSgncm9sZScpLnNwbGl0KCcgJykuZm9yRWFjaChyb2xlID0+IHtcclxuXHRcdFx0XHRcdGlmIChlbFNjaGVtYSAmJiBlbFNjaGVtYS5hY2NlcHRhYmxlUm9sZXMgJiYgIWVsU2NoZW1hLmFjY2VwdGFibGVSb2xlcy5pbmNsdWRlcyhyb2xlKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyb2xlID0gcm9sZS50cmltKCk7XHJcblx0XHRcdFx0XHRjdXJyZW50RWxDYXRlZ29yaWVzLnB1c2goJ0AnICsgcm9sZSk7XHJcblx0XHRcdFx0XHRpZiAoU2NoZW1hLmFyaWFbcm9sZV0gJiYgU2NoZW1hLmFyaWFbcm9sZV0udHlwZSkge1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50RWxDYXRlZ29yaWVzID0gY3VycmVudEVsQ2F0ZWdvcmllcy5jb25jYXQoU2NoZW1hLmV4cGFuZFJ1bGVzKGVsLCBTY2hlbWEuYXJpYVtyb2xlXS50eXBlIHx8IFtdKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoZWxTY2hlbWEuaW1wbGljaXRSb2xlKSB7XHJcblx0XHRcdFx0X3B1c2hVbmlxdWUoY3VycmVudEVsQ2F0ZWdvcmllcywgJ0AnICsgZWxTY2hlbWEuaW1wbGljaXRSb2xlLCBlbFRhZ05hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBDdXJyZW50IG5vZGUncyBjYXRlZ29yaWVzL3RhZ25hbWVcclxuXHRcdFx0dmFyIGN1cnJlbnRFbENhdGVnb3JpZXMgPSBfcHVzaFVuaXF1ZShTY2hlbWEuZXhwYW5kUnVsZXMoZWwsIGVsU2NoZW1hLnR5cGUgfHwgW10pLCBlbFRhZ05hbWUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGN1cnJlbnRFbENhdGVnb3JpZXM7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogVmFsaWRhdGVzIHRoYXQgdGhlIGdpdmVuIG5vZGUgYmVsb25ncyBpbiB0aGUgY29udGV4dCdzIGNvbnRlbnQgbW9kZWxcclxuXHQgKiBnb2luZyBieSB0aGUgc2VtYW50aWNzXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGNvbnRleHRcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdG5vZGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGFzc2VydE5vZGVCZWxvbmdzSW5Db250ZW50TW9kZWwoY29udGV4dCwgbm9kZSkge1xyXG5cdFx0dmFyIGNvbnRleHRNb2RlbCA9IGNvbnRleHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCBcclxuXHRcdFx0PyBTY2hlbWEuZ2V0Q29udGVudE1vZGVsRm9yKGNvbnRleHQpXHJcblx0XHRcdDogY29udGV4dDtcclxuXHRcdHZhciBub2RlQ2F0ZWdvcmllcyA9IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCBcclxuXHRcdFx0PyBTY2hlbWEuZ2V0Q2F0ZWdvcmllc0Zvcihub2RlKVxyXG5cdFx0XHQ6IG5vZGU7XHJcblx0XHRpZiAoX2ludGVyc2VjdChjb250ZXh0TW9kZWwsIFsnI25vdGhpbmcnLCAnI3RleHQnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHZhciB2YWxpZDtcclxuXHRcdC8vIFNvIGN1cnJlbnQgY29udGVudCBtb2RlbCBoYXMgdG8gbGlzdCBlaXRoZXIgdGhpcyBub2RlJ3MgY2F0ZWdvcmllcyxcclxuXHRcdC8vIHRhZ25hbWUsIG9yIGltcGxpYWJsZS9hY2NlcHRhYmxlIHJvbGVzXHJcblx0XHRjb250ZXh0TW9kZWwuZm9yRWFjaChhbGxvd2VkTm9kZSA9PiB7XHJcblx0XHRcdGlmIChhbGxvd2VkTm9kZS5zdGFydHNXaXRoKCchJykpIHtcclxuXHRcdFx0XHR2YXIgZGlzYWxsb3dlZE5vZGUgPSBhbGxvd2VkTm9kZS5zdWJzdHIoMSk7XHJcblx0XHRcdFx0aWYgKG5vZGVDYXRlZ29yaWVzLmluY2x1ZGVzKGRpc2FsbG93ZWROb2RlKSkge1xyXG5cdFx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsaWQgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0aWYgKG5vZGVDYXRlZ29yaWVzLmluY2x1ZGVzKGFsbG93ZWROb2RlKSkge1xyXG5cdFx0XHRcdFx0dmFsaWQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdmFsaWQgJiYgdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgZ2l2ZW4gbm9kZSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZXh0IGRpcmVjdGx5XHJcblx0ICogZ29pbmcgYnkgdGhlIHNlbWFudGljc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRzY29wZVxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0bm9kZVxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0bm9kZVNjaGVtYVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0YXNzZXJ0Tm9kZUJlbG9uZ3NJblNjb3BlQXMoc2NvcGUsIG5vZGUsIG5vZGVTY2hlbWEgPSBudWxsKSB7XHJcblx0XHR2YXIgY29udGV4dENhdGVnb3JpZXMgPSBTY2hlbWEuZ2V0Q2F0ZWdvcmllc0ZvcihzY29wZSk7XHJcblx0XHR2YXIgY2xvc2VzdCwgY3VycmVudCA9IG5vZGUsIG5vZGVNb2RlbDtcclxuXHRcdHdoaWxlICghY2xvc2VzdCAmJiAoY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZSkpIHtcclxuXHRcdFx0aWYgKF9pbnRlcnNlY3QoY29udGV4dENhdGVnb3JpZXMsIFNjaGVtYS5nZXRDYXRlZ29yaWVzRm9yKGN1cnJlbnQpKS5sZW5ndGhcclxuXHRcdFx0XHQmJiBTY2hlbWEuYXNzZXJ0Tm9kZUJlbG9uZ3NJbkNvbnRlbnRNb2RlbChjdXJyZW50LCBub2RlU2NoZW1hID8gKG5vZGVTY2hlbWEudHlwZSB8fCBub2RlKSA6IG5vZGUpXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdGNsb3Nlc3QgPSBjdXJyZW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2xvc2VzdCA9PT0gc2NvcGU7XHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBGbGF0dGVucyB0aGUgc2NoZW1hIHJ1bGVzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRcdFx0XHRydWxlc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGV4cGFuZFJ1bGVzKGVsLCBydWxlcykge1xyXG5cdFx0dmFyIHJsZXMgPSBydWxlcy5yZWR1Y2UoKGNhdGVnb3JpZXMsIHJ1bGUpID0+IHtcclxuXHRcdFx0aWYgKF9pc09iamVjdChydWxlKSkge1xyXG5cdFx0XHRcdGlmIChlbC5tYXRjaGVzKE9iamVjdC5rZXlzKHJ1bGUpWzBdKSkge1xyXG5cdFx0XHRcdFx0Y2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMuY29uY2F0KE9iamVjdC52YWx1ZXMocnVsZSlbMF0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjYXRlZ29yaWVzLnB1c2gocnVsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGNhdGVnb3JpZXM7XHJcblx0XHR9LCBbXSk7XHJcblx0XHRpZiAocmxlcy5pbmNsdWRlcygnI3NlY3Rpb25pbmctcm9vdCcpKSB7XHJcblx0XHRcdHJsZXMucHVzaCgnI3NlY3Rpb25pbmctY29udGVudCcpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJsZXM7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgU2NoZW1hO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBKc2VuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2pzZW4nO1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBwYXJhbXMgZnJvbSAnLi9wYXJhbXMuanMnO1xyXG5pbXBvcnQgQ2h0bWwgZnJvbSAnLi9DaHRtbC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyZSBDSFRNIHdpdGhcclxuICogYSBnbG9iYWwgd2luZG93LlxyXG4gKi9cclxuKGZ1bmN0aW9uKFdpbmRvdykge1xyXG5cdENodG1sLmluaXQoV2luZG93LCAoKSA9PiB7XHJcblx0XHR2YXIgYnVuZGxlcyA9IF9hcnJGcm9tKFdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy50YWdNYXAuYnVuZGxlKSkucmV2ZXJzZSgpO1xyXG5cdFx0cmV0dXJuIGJ1bmRsZXMubWFwKGIgPT4ge1xyXG5cdFx0XHRpZiAoYi5oYXNBdHRyaWJ1dGUoJ3NyYycpICYmICFiLmNvbnRlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcblx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG5cdFx0XHRcdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdidW5kbGVsb2Fkc3VjY2VzcycsICgpID0+IHJlc29sdmUoYikpO1xyXG5cdFx0XHRcdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdidW5kbGVsb2FkZXJyb3InLCAoKSA9PiByZXNvbHZlKGIpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYjtcclxuXHRcdH0pXHJcblx0fSk7XHJcbn0pKHRoaXMgfHwgd2luZG93KTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IHtcclxuXHRwYXJhbXMsXHJcblx0SnNlbixcclxuXHRSZWZsZXgsXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IENodG1sO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBkaXNjb25uZWN0ZWRDYWxsYmFjayBmcm9tICcuL2Rpc2Nvbm5lY3RlZENhbGxiYWNrLmpzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jcmVhdGVFbGVtZW50LmpzJztcclxuaW1wb3J0IHNjaGVtYSBmcm9tICcuL3NjaGVtYS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIENodG1sIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29yZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBuZXcgQ2h0bWwgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZG9jdW1lbnR8SFRNTEVsZW1lbnRcdGVsXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncGFyYW1zJywge1xyXG5cdFx0XHR2YWx1ZTpfbWVyZ2UoZ2xvYmFsUGFyYW1zLCBwYXJhbXMpLFxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVzY2VuZGFudFBhcmFtcycsIHtcclxuXHRcdFx0dmFsdWU6X2NvcHkodGhpcy5wYXJhbXMpLFxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2VsJywge3ZhbHVlOmVsLCBlbnVtZXJhYmxlOnRydWUsfSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VsJywge1xyXG5cdFx0XHR2YWx1ZTplbC5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgPyBlbC5xdWVyeVNlbGVjdG9yKCdodG1sJykgOiBlbCxcclxuXHRcdFx0ZW51bWVyYWJsZTp0cnVlLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBST0xFU1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdGNvbnN0IHJvbGVzID0gKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdXBlcnJvbGUpIHx8ICcnKVxyXG5cdFx0XHQuc3BsaXQoJyAnKS5tYXAociA9PiByLnRyaW0oKSkuZmlsdGVyKHIgPT4gcik7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JvbGVzJywge3ZhbHVlOnJvbGVzLCBlbnVtZXJhYmxlOnRydWUsfSk7XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gVFJFRVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdGNvbnN0IHRyZWUgPSB7fTtcclxuXHRcdFJlZmxleC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5LCB7dmFsdWU6dHJlZSwgZW51bWVyYWJsZTp0cnVlLH0pO1xyXG5cdFx0UmVmbGV4LnRyYXAodHJlZSwgKGUsIHJlY2lldmVkLCBuZXh0KSA9PiB7XHJcblx0XHRcdHJldHVybiBuZXh0KHJlY2lldmVkIHx8IHRoaXMuZ2V0Tm9kZXMoZS5xdWVyeSkpO1xyXG5cdFx0fSwge3R5cGU6J2dldCd9KTtcclxuXHRcdC8vIFRoZSBmb2xsb3dpbmcgbm9kZXMsIGJlaW5nIHByZWxpc3RlZCxcclxuXHRcdC8vIGNhbiBiZSBhY2Nlc3NlZCBkeW5hbWljYWxseVxyXG5cdFx0Y29uc3Qgbm9kZXNIaW50ID0gKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5oaW50KSB8fCAnJylcclxuXHRcdFx0LnNwbGl0KCcgJykubWFwKHIgPT4gci50cmltKCkpLmZpbHRlcihyID0+IHIpO1xyXG5cdFx0UmVmbGV4LmluaXQodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZXNIaW50KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0cyBhIG5vZGUgb3IgbGlzdCBvZiBub2Rlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8aW50fGFycmF5XHQgbm9kZU5hbWVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIENodG1sfGFycmF5fG9iamVjdFxyXG5cdCAqL1xyXG5cdGdldE5vZGVzKG5vZGVOYW1lcykge1xyXG5cdFx0X2FyckZyb20obm9kZU5hbWVzKS5mb3JFYWNoKG5vZGVOYW1lID0+IHtcclxuXHRcdFx0aWYgKG5vZGVOYW1lIGluIHRoaXNbZ2xvYmFsUGFyYW1zLnRyZWVQcm9wZXJ0eV0gJiYgdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XVtub2RlTmFtZV0gaW5zdGFuY2VvZiBDb3JlKSB7XHJcblx0XHRcdFx0Ly8gQXJyYXlzIG11c3Qgbm90IGJlIHJldXNlZCFcclxuXHRcdFx0XHQvLyBUaGVpciBzb3VyY2VzIG9mIG5vZGVzIGNhbnQgYmUgZ3VhcmFudGVlZCB0byBiZSBzYW1lLlxyXG5cdFx0XHRcdC8vIHRoaXNbZ2xvYmFsUGFyYW1zLnRyZWVQcm9wZXJ0eV1bbm9kZU5hbWVdIGNvdWxkIGFsc28gYmUgYW4gZW1wdHkgZ2V0dGVyL3NldHRlclxyXG5cdFx0XHRcdC8vIFNvIHRoZSBpbnN0YW5jZW9mIGlzIHRoZSB3YXkgdG8gZ28gZm9yIGJvdGggcHJvYmxlbXNcclxuXHRcdFx0XHRyZXR1cm4gdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XVtub2RlTmFtZV07XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIG5vZGU7XHJcblx0XHRcdGlmICgobm9kZSA9IHRoaXMuZ2V0RXhwbGljaXROb2RlKG5vZGVOYW1lKSlcclxuXHRcdFx0fHwgKG5vZGUgPSB0aGlzLmdldEltcGxpY2l0Tm9kZShub2RlTmFtZSkpKSB7XHJcblx0XHRcdFx0dGhpcy5hZGROb2RlKG5vZGVOYW1lLCBub2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkobm9kZU5hbWVzKSA/IF9vYmpGcm9tKG5vZGVOYW1lcywgdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSkgOiB0aGlzW2dsb2JhbFBhcmFtcy50cmVlUHJvcGVydHldW25vZGVOYW1lc107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEF0dGVtcHRzIHRvIHJlc29sdmUgYSBub2RlIGZyb20gZXhwbGljaXQgdHJlZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdHJlcXVlc3ROb2RlTmFtZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBIVE1MRWxlbWVudFxyXG5cdCAqL1xyXG5cdGdldEV4cGxpY2l0Tm9kZShyZXF1ZXN0Tm9kZU5hbWUpIHtcclxuXHRcdC8vIElmIGdpdmVuIGEgcm9sZWNhc2UsIHdlIGNhbiBwZXJmb3JtIGEgcXVlcnkgaWYgd2UgdW5kZXJzdGFuZCB0aGUgc2VtYW50aWNzLlxyXG5cdFx0aWYgKHRoaXMucm9sZXMgJiYgdGhpcy5yb2xlcy5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHJvbGVzID0gZ2xvYmFsUGFyYW1zLnJvbGVjYXNlID8gW2dsb2JhbFBhcmFtcy5yb2xlY2FzZV0gOiB0aGlzLnJvbGVzO1xyXG5cdFx0XHQvLyBGaW5kIG1hdGNoZXMuLi5cclxuXHRcdFx0dmFyIENTU0VzY2FwZSA9IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUyA/IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUy5lc2NhcGUgOiBzdHIgPT4gc3RyO1xyXG5cdFx0XHRyZXR1cm4gcm9sZXMucmVkdWNlKChtYXRjaGVkTm9kZSwgcm9sZSkgPT4ge1xyXG5cdFx0XHRcdGlmICghbWF0Y2hlZE5vZGUpIHtcclxuXHRcdFx0XHRcdHZhciBjbG9zZXN0U3VwZXJTZWxlY3RvciA9ICdbJyArIENTU0VzY2FwZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdXBlcnJvbGUpICsgJ349XCInICsgcm9sZSArICdcIl0nO1xyXG5cdFx0XHRcdFx0dmFyIG5vZGVTZWxlY3RvciA9ICdbJyArIENTU0VzY2FwZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdWJyb2xlKSArICd+PVwiJyArIHJvbGUgKyAnLScgKyByZXF1ZXN0Tm9kZU5hbWUgKyAnXCJdJztcclxuXHRcdFx0XHRcdHZhciBjbG9zZXN0U3VwZXIsIF9tYXRjaGVkTm9kZTtcclxuXHRcdFx0XHRcdGlmICgoX21hdGNoZWROb2RlID0gKHRoaXMuZWwuc2hhZG93Um9vdCB8fCB0aGlzLmVsKS5xdWVyeVNlbGVjdG9yKG5vZGVTZWxlY3RvcikpXHJcblx0XHRcdFx0XHQvLyBJZiB0aGlzLmVsIGhhcyBhIHNoYWRvd1Jvb3QsIHdlIGRvbid0IGV4cGVjdCBfbWF0Y2hlZE5vZGUgdG8gYmUgYWJsZSB0byBmaW5kIGlzIHN1cGVyUm9sZSBlbGVtZW50LlxyXG5cdFx0XHRcdFx0Ly8gSWYgaXQgZmluZHMgb25lLCB0aGVuIGl0cyBub3QgZm9yIHRoZSBjdXJyZW4gc3VwZXJSb2xlIGVsZW1lbnQuXHJcblx0XHRcdFx0XHQmJiAoKHRoaXMuZWwuc2hhZG93Um9vdCAmJiAhKF9tYXRjaGVkTm9kZS5wYXJlbnROb2RlLmNsb3Nlc3QgJiYgX21hdGNoZWROb2RlLnBhcmVudE5vZGUuY2xvc2VzdChjbG9zZXN0U3VwZXJTZWxlY3RvcikpKVxyXG5cdFx0XHRcdFx0Ly8gX21hdGNoZWROb2RlIG11c3QgZmluZCB0aGlzLmVsIGFzIGl0cyBzdXBlclJvbGUgZWxlbWVudCB0byBxdWFsaWZ5LlxyXG5cdFx0XHRcdFx0XHR8fCAoIXRoaXMuZWwuc2hhZG93Um9vdCAmJiBfbWF0Y2hlZE5vZGUucGFyZW50Tm9kZSAmJiAoY2xvc2VzdFN1cGVyID0gX21hdGNoZWROb2RlLnBhcmVudE5vZGUuY2xvc2VzdChjbG9zZXN0U3VwZXJTZWxlY3RvcikpICYmIGNsb3Nlc3RTdXBlci5pc1NhbWVOb2RlKHRoaXMuZWwpKVxyXG5cdFx0XHRcdFx0KSkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVkTm9kZSA9IF9tYXRjaGVkTm9kZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG1hdGNoZWROb2RlO1xyXG5cdFx0XHR9LCBudWxsKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXR0ZW1wdHMgdG8gcmVzb2x2ZSBhIG5vZGUgZnJvbSBpbXBsaWNpdCB0cmVlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0cmVxdWVzdE5vZGVOYW1lXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEhUTUxFbGVtZW50fGFycmF5XHJcblx0ICovXHJcblx0Z2V0SW1wbGljaXROb2RlKHJlcXVlc3ROb2RlTmFtZSkge1xyXG5cdFx0aWYgKF9pc051bWVyaWMocmVxdWVzdE5vZGVOYW1lKSB8fCByZXF1ZXN0Tm9kZU5hbWUubWF0Y2goL1teYS16QS1aMC05XFwtXS8pKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIFVzZSBzY2hlbWEuLi5cclxuXHRcdHZhciBub2RlU2NoZW1hLCBub2RlU2VsZWN0b3IgPSBbXTtcclxuXHRcdHZhciB0cmllcyA9IFtdO1xyXG5cdFx0aWYgKHNjaGVtYS5hcmlhW3JlcXVlc3ROb2RlTmFtZV0pIHtcclxuXHRcdFx0dHJpZXMucHVzaCh7XHJcblx0XHRcdFx0c2NoZW1hOiBzY2hlbWEuYXJpYVtyZXF1ZXN0Tm9kZU5hbWVdLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBbJ1tyb2xlPVwiJyArIHJlcXVlc3ROb2RlTmFtZSArICdcIl0nXSxcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0cmllcy5wdXNoKHtcclxuXHRcdFx0XHRzY2hlbWE6IHNjaGVtYS5zdGRbcmVxdWVzdE5vZGVOYW1lXSB8fCBzY2hlbWEuYXJpYVtyZXF1ZXN0Tm9kZU5hbWVdLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBbcmVxdWVzdE5vZGVOYW1lLCAnW3JvbGU9XCInICsgcmVxdWVzdE5vZGVOYW1lICsgJ1wiXSddLFxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdF9lYWNoKHNjaGVtYS5zdGQsICh0YWduYW1lLCBzY2hlbWEpID0+IHtcclxuXHRcdFx0aWYgKHNjaGVtYS5pbXBsaWNpdFJvbGUgPT09IHJlcXVlc3ROb2RlTmFtZSkge1xyXG5cdFx0XHRcdHRyaWVzLnB1c2goe1xyXG5cdFx0XHRcdFx0c2NoZW1hOiBzY2hlbWEsXHJcblx0XHRcdFx0XHRzZWxlY3RvcjogW3RhZ25hbWVdLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBtYXRjaGVzID0gbnVsbDtcclxuXHRcdHRyaWVzLmZvckVhY2godHJpZSA9PiB7XHJcblx0XHRcdCh0aGlzLmVsLnNoYWRvd1Jvb3QgfHwgdGhpcy5lbCkucXVlcnlTZWxlY3RvckFsbCh0cmllLnNlbGVjdG9yLmpvaW4oJywnKSkuZm9yRWFjaChub2RlID0+IHtcclxuXHRcdFx0XHRpZiAoc2NoZW1hLmFzc2VydE5vZGVCZWxvbmdzSW5TY29wZUFzKHRoaXMuZWwsIG5vZGUsIHRyaWUuc2NoZW1hKSkge1xyXG5cdFx0XHRcdFx0aWYgKHRyaWUuc2NoZW1hICYmIHRyaWUuc2NoZW1hLnNpbmdsZXRvbikge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVzID0gbm9kZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIW1hdGNoZXMgfHwgX2lzQXJyYXkobWF0Y2hlcykpIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlcyA9IG1hdGNoZXMgfHwgW107XHJcblx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaChub2RlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoIW1hdGNoZXMgJiYgdHJpZS5zY2hlbWEgJiYgIXRyaWUuc2NoZW1hLnNpbmdsZXRvbikge1xyXG5cdFx0XHRcdG1hdGNoZXMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRkcyBhIG5vZGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGludFx0IG5vZGVOYW1lXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdFx0IG5vZGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29yZVxyXG5cdCAqL1xyXG5cdGFkZE5vZGUobm9kZU5hbWUsIG5vZGUpIHtcclxuXHRcdHZhciBub2RlQ29tcG9uZW50LCBmYWN0b3J5ID0gdGhpcy5wYXJhbXMuZmFjdG9yeSB8fCAoKGVsLCBwYXJhbXMpID0+IG5ldyBDb3JlKGVsLCBwYXJhbXMpKTtcclxuXHRcdGlmIChfaXNBcnJheShub2RlKSkge1xyXG5cdFx0XHQvLyBTdGlsbCBzZXQgdGhlIGNvbGxlY3Rpb24gYXMgbm9kZSwgZXZlbiB0aG8gaXQgd29udCBiZSByZXVzZWQuXHJcblx0XHRcdG5vZGVDb21wb25lbnQgPSBub2RlLm1hcChfbm9kZSA9PiBmYWN0b3J5KF9ub2RlLCB0aGlzLmRlc2NlbmRhbnRQYXJhbXMpKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG5vZGVDb21wb25lbnQgPSBmYWN0b3J5KG5vZGUsIHRoaXMuZGVzY2VuZGFudFBhcmFtcyk7XHJcblx0XHRcdC8vIFdlJ2xsIHJlbW92ZSBmcm9tIHRyZWUgYXQgdGhlXHJcblx0XHRcdC8vIHRpbWUgaXQgbGVhdmVzIHRoZSBET01cclxuXHRcdFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2sobm9kZSwgKCkgPT4ge1xyXG5cdFx0XHRcdFJlZmxleC5kZWwodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZU5hbWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFJlZmxleC5zZXQodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZU5hbWUsIG5vZGVDb21wb25lbnQpO1xyXG5cdFx0cmV0dXJuIG5vZGVDb21wb25lbnQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTXV0YXRpb25PYnNlcnZlciB0aGF0IGZpcmVzIHdoZW5cclxuICogdGhlIGVsZW1lbnQgbGVhdmVzIHRoZSBET00uXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdFx0XHRpbnB1dFxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNjb25uZWN0ZWRDYWxsYmFjayhlbCwgY2FsbGJhY2spIHtcclxuXHRpZiAoZWwucGFyZW50Tm9kZSAmJiBnbG9iYWxQYXJhbXMuY29udGV4dC5NdXRhdGlvbk9ic2VydmVyKSB7XHJcblx0XHR2YXIgY2FsbGVkID0gZmFsc2U7XHJcblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgZ2xvYmFsUGFyYW1zLmNvbnRleHQuTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xyXG5cdFx0XHRtdXRhdGlvbnMuZm9yRWFjaChtID0+IHtcclxuXHRcdFx0XHRpZiAoIWNhbGxlZCAmJiBfYXJyRnJvbShtLnJlbW92ZWROb2RlcykuaW5jbHVkZXMoZWwpKSB7XHJcblx0XHRcdFx0XHRjYWxsZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0XHRvYnNlcnZlci5vYnNlcnZlKGVsLnBhcmVudE5vZGUsIHtjaGlsZExpc3Q6dHJ1ZX0pO1xyXG5cdFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2soZWwucGFyZW50Tm9kZSwgKCkgPT4ge1xyXG5cdFx0XHRpZiAoIWNhbGxlZCkge1xyXG5cdFx0XHRcdGNhbGxlZCA9IHRydWU7XHJcblx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiwge0NvbnRleHRzfSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZm9sbG93aW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZvbGxvd2luZy5qcyc7XHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBfYmVmb3JlTGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmVMYXN0LmpzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jb3JlL2NyZWF0ZUVsZW1lbnQuanMnO1xyXG5pbXBvcnQgZGVmaW5lQnVuZGxlRWxlbWVudHMgZnJvbSAnLi9jb21wb3NpbmcvZGVmaW5lQnVuZGxlRWxlbWVudHMuanMnO1xyXG5pbXBvcnQgZGVmaW5lSW1wb3J0RWxlbWVudHMgZnJvbSAnLi9jb21wb3NpbmcvZGVmaW5lSW1wb3J0RWxlbWVudHMuanMnO1xyXG5pbXBvcnQgY3JlYXRlQnVuZGxlTWF0cml4IGZyb20gJy4vY29tcG9zaW5nL2NyZWF0ZUJ1bmRsZU1hdHJpeC5qcyc7XHJcbmltcG9ydCBwYXJzZU5hbWVzcGFjZSBmcm9tICcuL2NvbXBvc2luZy9wYXJzZU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2UgZnJvbSAnLi9jb21wb3NpbmcvcmVjb21wb3NlLmpzJztcclxuaW1wb3J0IERpcmVjdGl2ZXMgZnJvbSAnLi9EaXJlY3RpdmVzLmpzJztcclxuaW1wb3J0IENvcmUgZnJvbSAnLi9jb3JlL0NvcmUuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIENodG1sIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2h0bWwgZXh0ZW5kcyBDb3JlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKGVsLCBwYXJhbXMpO1xyXG5cclxuXHRcdC8vIENyZWF0ZSB0aGUgZmFjdG9yeSB1c2VkIGluIENvcmVcclxuXHRcdHRoaXMucGFyYW1zLmZhY3RvcnkgPSB0aGlzLmNvbnN0cnVjdG9yLmZyb207XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQXV0by1pbXBvcnRlZCBlbGVtZW50c1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ltcG9ydGVkJywgZSA9PiB7XHJcblx0XHRcdHRoaXMucGFyYW1zLmZhY3RvcnkoZS50YXJnZXQpO1xyXG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBOQU1FU1BBQ0VcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0XHJcblx0XHRjb25zdCBuYW1lc3BhY2VQYXJzZSA9IHBhcnNlTmFtZXNwYWNlKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UpIHx8ICcnKTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZXNwYWNlJywge3ZhbHVlOm5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSwgZW51bWVyYWJsZTp0cnVlLH0pO1xyXG5cdFx0XHJcblx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdC8vIE1JUlJPUlxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdFJlZmxleC5pbml0KHRoaXMsIGdsb2JhbFBhcmFtcy5iaW5kaW5nUHJvcGVydHkpO1xyXG5cdFx0Ly8gU2V0dXAgbWlycm9yXHJcblx0XHRSZWZsZXgub2JzZXJ2ZSh0aGlzLCBnbG9iYWxQYXJhbXMuYmluZGluZ1Byb3BlcnR5LCAoZGF0YSwgX2RhdGEsIGUpID0+IHtcclxuXHRcdFx0aWYgKG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KGRhdGEpICYmIGRhdGEpIHtcclxuXHRcdFx0XHRcdC8vIE1pcnJvclxyXG5cdFx0XHRcdFx0UmVmbGV4Lm9ic2VydmUoZGF0YSwgY2hhbmdlcyA9PiB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnBvcHVsYXRlKGRhdGEsIG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSwgZ2xvYmFsUGFyYW1zLnJlbW9kZWxDYWxsYmFjayk7XHJcblx0XHRcdFx0XHR9LCB7dGFnczpbJyNtaXJyb3InLCB0aGlzXX0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoX2lzVHlwZU9iamVjdChfZGF0YSkgJiYgX2RhdGEpIHtcclxuXHRcdFx0XHRcdC8vIFVubWlycm9yXHJcblx0XHRcdFx0XHRSZWZsZXgudW5vYnNlcnZlKF9kYXRhLCBudWxsLCBudWxsLCB7dGFnczpbJyNtaXJyb3InLCB0aGlzXX0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBJbml0aWFsIFN5bmMuLi5cclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5wb3B1bGF0ZShkYXRhIHx8IHt9LCBuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UsIGdsb2JhbFBhcmFtcy5yZW1vZGVsQ2FsbGJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBESVJFQ1RJVkVTXHJcblx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdFxyXG5cdFx0Y29uc3QgZGlyZWN0aXZlcyA9IFtdO1xyXG5cdFx0UmVmbGV4LmRlZmluZVByb3BlcnR5KHRoaXMsICdkaXJlY3RpdmVzJywge3ZhbHVlOmRpcmVjdGl2ZXMsIGVudW1lcmFibGU6dHJ1ZSx9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBldmFsdWF0aW9uQ29udGV4dCB3aWxsIGJlIFwidGhpc1wiIGFzIG1haW4gY29udGV4dCwgYW5kIHBhcmFtcy5lbnYgYXMgc3VwZXIgY29udGV4dFxyXG5cdFx0dmFyIGxvY2FsQ29udGV4dCA9IHt9O1xyXG5cdFx0dmFyIHN1cGVyQ29udGV4dCA9IHRoaXMucGFyYW1zLmVudjtcclxuXHRcdHZhciBldmFsdWF0aW9uQ29udGV4dCA9IG5ldyBDb250ZXh0cyh0aGlzLCBzdXBlckNvbnRleHQsIGxvY2FsQ29udGV4dCk7XHJcblx0XHQvLyBEZXNjZW5kYW50cyB3aWxsIHJlY2lldmUgbXkgbG9jYWxDb250ZXh0IGFuZCBzdXBlckNvbnRleHRcclxuXHRcdHRoaXMuZGVzY2VuZGFudFBhcmFtcy5lbnYgPSBuZXcgQ29udGV4dHMobG9jYWxDb250ZXh0LCBzdXBlckNvbnRleHQpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFN0cmluZ2lmaWVzIEpTRU4gdmFyc1xyXG5cdFx0dmFyIHN0cmluZ2lmeUVhY2ggPSBsaXN0ID0+IF91bmlxdWUobGlzdC5tYXAoZXhwciA9PiBfYmVmb3JlKF9iZWZvcmUoZXhwci50b1N0cmluZygpLCAnWycpLCAnKCcpKSk7XHJcblx0XHQvLyBXZSBoYW5kbGUgZGlyZWN0aXZlcyBhcyB0aGV5IG1ha2UgZW50cnlcclxuXHRcdFJlZmxleC5vYnNlcnZlKHRoaXMuZGlyZWN0aXZlcywgKGVudHJpZXMsIGV4aXRzLCBlKSA9PiB7XHJcblx0XHRcdE9iamVjdC5rZXlzKGVudHJpZXMpLmZvckVhY2goayA9PiB7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0Ly8gVW5iaW5kIGV4aXRzXHJcblx0XHRcdFx0aWYgKGV4aXRzW2tdKSB7XHJcblx0XHRcdFx0XHRSZWZsZXgudW5vYnNlcnZlKHRoaXMsIG51bGwsIG51bGwsIHt0YWdzOlsnI2RpcmVjdGl2ZScsIGV4aXRzW2tdXSx9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0Ly8gQmluZCBlbnRyaWVzXHJcblx0XHRcdFx0aWYgKGVudHJpZXNba10pIHtcclxuXHRcdFx0XHRcdGlmICh0aGlzLmF1dG9FdmFsICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRlbnRyaWVzW2tdLmV2YWwoZXZhbHVhdGlvbkNvbnRleHQsIFJlZmxleCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRSZWZsZXgub2JzZXJ2ZSh0aGlzLCBzdHJpbmdpZnlFYWNoKGVudHJpZXNba10ubWV0YS52YXJzKSwgKG5ld1N0YXRlLCBvbGRTdGF0ZSwgZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR2YXIgZXZhbFJldHVybiA9IGVudHJpZXNba10uZXZhbChldmFsdWF0aW9uQ29udGV4dCwgUmVmbGV4KTtcclxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHJlc3VsdCBvZiB0aGlzIGV2YWx1YXRpb24gaXMgZmFsc2UsXHJcblx0XHRcdFx0XHRcdC8vIGUuc3RvcFByb3BhZ2F0aW9uIHdpbGwgYmUgY2FsbGVkIGFuZCBzdWJzZXF1ZW50IGV4cHJlc3Npb25zXHJcblx0XHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGV2YWx1YXRlZC4gU28gd2UgbXVzdCBub3QgYWxsb3cgZmFsc2UgdG8gYmUgcmV0dXJuZWQuXHJcblx0XHRcdFx0XHRcdC8vIEFsbCBleHByZXNzaW9ucyBhcmUgbWVhbnQgdG8gYmUgZXZhbHVhdGVkIGluIHBhcmFsbGVsLCBpbmRlcGVuZGVudCBvZiBlYWNoIG90aGVyLlxyXG5cdFx0XHRcdFx0XHRpZiAoZXZhbFJldHVybiAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZXZhbFJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSwge2RhdGE6IGZhbHNlLCB0YWdzOlsnI2RpcmVjdGl2ZScsIGVudHJpZXNba11dfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0aWYgKHRoaXMuZGF0YUJsb2NrU2NyaXB0ID0gX2FyckZyb20oZWwuY2hpbGRyZW4pLmZpbHRlcihub2RlID0+IG5vZGUubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmpzZW4pKVswXSkge1xyXG5cdFx0XHRcdHZhciBkaXJlY3RpdmVzUHVzaCA9IFJlZmxleC5nZXQodGhpcy5kaXJlY3RpdmVzLCAncHVzaCcpO1xyXG5cdFx0XHRcdERpcmVjdGl2ZXMucGFyc2UoKHRoaXMuZGF0YUJsb2NrU2NyaXB0LnRleHRDb250ZW50IHx8ICcnKS50cmltKCkpLmZpbHRlcigpLmZvckVhY2goZGlyZWN0aXZlID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuYXV0b0V2YWwgPSBnbG9iYWxQYXJhbXMuaW5pdGlhbFJlbmRlcmluZztcclxuXHRcdFx0XHRcdGRpcmVjdGl2ZXNQdXNoKGRpcmVjdGl2ZSk7XHJcblx0XHRcdFx0XHR0aGlzLmF1dG9FdmFsID0gdHJ1ZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKHRoaXMuZGF0YUJsb2NrU2NyaXB0ICYmIGdsb2JhbFBhcmFtcy5oaWRlRGF0YUJsb2NrU2NyaXB0KSB7XHJcblx0XHRcdFx0dGhpcy5kYXRhQmxvY2tTY3JpcHQucmVtb3ZlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sIDApO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFsaWFzIG9mIHN1cGVyLmdldE5vZGVzKCkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0XHRub2RlTmFtZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDaHRtbFxyXG5cdCAqL1xyXG5cdGdldChub2RlTmFtZSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmdldE5vZGVzKG5vZGVOYW1lKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSAocmVhY3RpdmUpIGNvbnRleHQgb2JqZWN0IG9yIGxvZ2ljYWwgb2JqZWN0IHRvIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRcdGNvbnRleHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRXZlbnRcclxuXHQgKi9cclxuXHRiaW5kKGNvbnRleHQpIHtcclxuXHRcdGlmICghZ2xvYmFsUGFyYW1zLmJpbmRpbmdQcm9wZXJ0eSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RhdGEga2V5IGhhcyBub3QgYmVlbiBzZXQhJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCBnbG9iYWxQYXJhbXMuYmluZGluZ1Byb3BlcnR5LCBjb250ZXh0KTtcclxuXHR9XHRcclxuXHQvKipcclxuXHQgKiBDbGVhcnMgdGhlIGluc3RhbmNlIG9mIGl0cyBjb250ZXh0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBFdmVudFxyXG5cdCAqL1xyXG5cdHVuYmluZCgpIHtcclxuXHRcdGlmICghZ2xvYmFsUGFyYW1zLmJpbmRpbmdQcm9wZXJ0eSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RhdGEga2V5IGhhcyBub3QgYmVlbiBzZXQhJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCBnbG9iYWxQYXJhbXMuYmluZGluZ1Byb3BlcnR5LCBudWxsKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSAocmVhY3RpdmUpIGxpc3QgY29udGV4dCB0byB0aGUgaW5zdGFuY2UuXHJcblx0ICogQ2hpbGRub2RlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC9yZW1vdmVkIHBlciBrZXkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXkgXHRcdHNyY01vZGVsXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0c3VibmFtZXNwYWNlXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRyZW1vZGVsQ2FsbGJhY2tcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUmVmbGV4Lk11dGF0aW9uRXZlbnRcclxuXHQgKi9cclxuXHRwb3B1bGF0ZShzcmNNb2RlbCwgc3VibmFtZXNwYWNlLCByZW1vZGVsQ2FsbGJhY2sgPSBudWxsKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIG5vZGVOYW1lc3BhY2VBcnJheSA9IHN1Ym5hbWVzcGFjZS5zcGxpdCgnLy8nKTtcclxuXHRcdC8vIENyZWF0ZSBhIG5hbWVzcGFjZSBoYXNoLi4uXHJcblx0XHRpZiAobm9kZU5hbWVzcGFjZUFycmF5WzBdLmluZGV4T2YoJ1snKSA+IC0xKSB7XHJcblx0XHRcdG5vZGVOYW1lc3BhY2VBcnJheVswXSA9ICdcIicgKyBub2RlTmFtZXNwYWNlQXJyYXlbMF0ucmVwbGFjZSgvXFxbL2csICdcIiArICcpLnJlcGxhY2UoL1xcXS9nLCAnICsgXCInKSArICdcIic7XHJcblx0XHR9XHJcblx0XHR2YXIgc3JjTW9kZWxLZXlzID0gUmVmbGV4LmtleXMoc3JjTW9kZWwpO1xyXG5cdFx0dmFyIGN1cnJlbnROb2RlTmFtZXMgPSBSZWZsZXgua2V5cyh0aGlzW2dsb2JhbFBhcmFtcy50cmVlUHJvcGVydHldKTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZSA9IG5ldyBSZWZsZXguTXV0YXRpb25FdmVudCh0aGlzLmVsLCB7dHlwZToncmVtb2RlbGxpbmcnfSk7XHJcblx0XHRfdW5pcXVlKHNyY01vZGVsS2V5cy5jb25jYXQoY3VycmVudE5vZGVOYW1lcykpLmZvckVhY2gobm9kZU5hbWUgPT4ge1xyXG5cdFx0XHRub2RlTmFtZSA9IF9pc051bWVyaWMobm9kZU5hbWUpID8gcGFyc2VJbnQobm9kZU5hbWUpIDogbm9kZU5hbWU7XHJcblx0XHRcdHZhciBleGlzdGluZ05vZGUgPSB0aGlzLmdldE5vZGVzKG5vZGVOYW1lKTtcclxuXHRcdFx0dmFyIHJzcG5zO1xyXG5cdFx0XHRpZiAoUmVmbGV4LmhhcyhzcmNNb2RlbCwgbm9kZU5hbWUpKSB7XHJcblx0XHRcdFx0dmFyIHNyY0l0ZW0gPSBSZWZsZXguZ2V0KHNyY01vZGVsLCBub2RlTmFtZSksIGlzTmV3Tm9kZSA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmICghZXhpc3RpbmdOb2RlKSB7XHJcblx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0dmFyIG5vZGVOYW1lc3BhY2VBcnJheUNvcHkgPSBub2RlTmFtZXNwYWNlQXJyYXkuc2xpY2UoKTtcclxuXHRcdFx0XHRcdGlmIChub2RlTmFtZXNwYWNlQXJyYXlDb3B5WzBdLmluZGV4T2YoJ1wiJykgPiAtMSkge1xyXG5cdFx0XHRcdFx0XHRub2RlTmFtZXNwYWNlQXJyYXlDb3B5WzBdID0gSnNlbi5wYXJzZShub2RlTmFtZXNwYWNlQXJyYXlDb3B5WzBdKS5ldmFsKHNyY0l0ZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0bm9kZU5hbWVzcGFjZUFycmF5Q29weVswXSArPSAnLycgKyBub2RlTmFtZTtcclxuXHRcdFx0XHRcdHZhciBub2RlRWwgPSBDaHRtbC5pbXBvcnQobm9kZU5hbWVzcGFjZUFycmF5Q29weS5qb2luKCcvLycpKTtcclxuXHRcdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRpZiAobm9kZUVsKSB7XHJcblx0XHRcdFx0XHRcdHZhciBmb2xsb3dpbmcgPSBfZm9sbG93aW5nKHNyY01vZGVsS2V5cywgbm9kZU5hbWUgKyAnJy8qbnVtZXJpYyBub2RlTmFtZSBuZWVkcyB0aGlzKi8sIHRydWUvKmxlbmd0aCovKVxyXG5cdFx0XHRcdFx0XHRcdC5yZWR1Y2UoKGNsb3Nlc3QsIF9ub2RlTmFtZSkgPT4gY2xvc2VzdCB8fCB0aGlzLmdldE5vZGVzKF9ub2RlTmFtZSksIG51bGwpO1xyXG5cdFx0XHRcdFx0XHRpZiAoZm9sbG93aW5nKSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9sbG93aW5nLmVsLmJlZm9yZShub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZWwuYXBwZW5kKG5vZGVFbCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZXhpc3RpbmdOb2RlID0gdGhpcy5hZGROb2RlKG5vZGVOYW1lLCBub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHRpc05ld05vZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZXhpc3RpbmdOb2RlKSB7XHJcblx0XHRcdFx0XHRpZiAoX2lzRnVuY3Rpb24ocmVtb2RlbENhbGxiYWNrKSkge1xyXG5cdFx0XHRcdFx0XHRyc3BucyA9IHJlbW9kZWxDYWxsYmFjayhleGlzdGluZ05vZGUsIHNyY0l0ZW0sIG5vZGVOYW1lLCBpc05ld05vZGUpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cnNwbnMgPSBleGlzdGluZ05vZGUuYmluZChzcmNJdGVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoZXhpc3RpbmdOb2RlKSB7XHJcblx0XHRcdFx0aWYgKF9pc0Z1bmN0aW9uKHJlbW9kZWxDYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdHJzcG5zID0gcmVtb2RlbENhbGxiYWNrKGV4aXN0aW5nTm9kZSwgbm9kZU5hbWUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyc3BucyA9IGV4aXN0aW5nTm9kZS51bmJpbmQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIHJlbW92ZSA9ICgpID0+IHtcclxuXHRcdFx0XHRcdGV4aXN0aW5nTm9kZS5kZXN0cm95KCk7XHJcblx0XHRcdFx0XHRleGlzdGluZ05vZGUuZWwucmVtb3ZlKCk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAocnNwbnMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcblx0XHRcdFx0XHRyc3Bucy50aGVuKHJlbW92ZSkuY2F0Y2gocmVtb3ZlKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGUucmVzcG9uc2UocnNwbnMpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRnJlZXMgdGhlIGluc3RhbmNlIG9mIG9ic2VydmVkIGRpcmVjdGl2ZXMuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRkZXN0cm95KCkge1xyXG5cdFx0dGhpcy5kaXJlY3RpdmVzLmZvckVhY2goXHJcblx0XHRcdGJpbmRpbmcgPT4gUmVmbGV4LnVub2JzZXJ2ZSh0aGlzLCBudWxsLCBudWxsLCB7dGFnczpbJyNkaXJlY3RpdmUnLCBiaW5kaW5nXX0pXHJcblx0XHQpO1xyXG5cdFx0aWYgKHRoaXMuZGF0YUJsb2NrU2NyaXB0ICYmIGdsb2JhbFBhcmFtcy5oaWRlRGF0YUJsb2NrU2NyaXB0KSB7XHJcblx0XHRcdHRoaXMucHJlcGVuZCh0aGlzLmRhdGFCbG9ja1NjcmlwdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQgKiBJTlNUQU5DRS1SRUxBVEVEIE1FVEhPRFNcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICovXHJcblx0XHJcblx0LyoqXHJcblx0ICogVGhlIFwiaW5pdFwiIGZ1bmN0aW9uLlxyXG5cdCAqIEdpdmVzIENIVE1MIGEgZ2xvYmFsIHdpbmRvdyBjb250ZXh0XHJcblx0ICogYW5kIGxldHMgaXQgcGVyZm9ybSBvdGhlciBuZWNlc3NhcnkgaW5pdGlhbGl6YXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0Y29udGV4dFdpbmRvd1xyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0YnVuZGxlc0NhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRzdGF0aWMgaW5pdChjb250ZXh0V2luZG93LCBidW5kbGVzQ2FsbGJhY2sgPSBudWxsKSB7XHJcblx0XHRcclxuXHRcdGdsb2JhbFBhcmFtcy5jb250ZXh0ID0gY29udGV4dFdpbmRvdztcclxuXHRcdC8vIFdpbmRvdyBtdXN0IGJlIHNldCBhYm92ZS4uLiBiZWZvcmUgdGhpc1xyXG5cdFx0ZGVmaW5lQnVuZGxlRWxlbWVudHMoKTtcclxuXHRcdFxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBDaHRtbC5jb250ZW50TG9hZGVkUHJvbWlzZVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRDaHRtbC5jb250ZW50TG9hZGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG5cdFx0XHRpZiAoY29udGV4dFdpbmRvdy5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcblx0XHRcdFx0cmVzb2x2ZSgpOyByZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0Y29udGV4dFdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSwgZmFsc2UpO1xyXG5cdFx0XHRjb250ZXh0V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCByZXNvbHZlLCBmYWxzZSk7XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBnbG9iYWxQYXJhbXMuYnVuZGxlc1xyXG5cdFx0Ly8gQ2h0bWwubG9hZGluZ0J1bmRsZXNQcm9taXNlXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdENodG1sLmNvbnRlbnRMb2FkZWRQcm9taXNlLnRoZW4oKCkgPT4ge1xyXG5cdFx0XHR2YXIgYnVuZGxlRWxlbWVudHM7XHJcblx0XHRcdGlmIChidW5kbGVzQ2FsbGJhY2sgJiYgKGJ1bmRsZUVsZW1lbnRzID0gYnVuZGxlc0NhbGxiYWNrKCkpKSB7XHJcblx0XHRcdFx0aWYgKCFfaXNBcnJheShidW5kbGVFbGVtZW50cykpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGJ1bmRsZXNDYWxsYmFjaygpIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGFuIGFycmF5IScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRnbG9iYWxQYXJhbXMuYnVuZGxlcyA9IGNyZWF0ZUJ1bmRsZU1hdHJpeChidW5kbGVFbGVtZW50cywgbG9hZGluZ0J1bmRsZXNQcm9taXNlID0+IHtcclxuXHRcdFx0XHRcdENodG1sLmxvYWRpbmdCdW5kbGVzUHJvbWlzZSA9IGxvYWRpbmdCdW5kbGVzUHJvbWlzZTtcclxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRkZWZpbmVJbXBvcnRFbGVtZW50cyhsb2FkaW5nQnVuZGxlc1Byb21pc2UpO1xyXG5cdFx0XHRcdFx0fSwgMCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUaGUgXCJyZWFkeVwiIGZ1bmN0aW9uLlxyXG5cdCAqIENhbGxzIHVzIHdoZW4gaXQgYmVjb21lcyBzYWZlIHRvIHJ1biBidW5kbGUtcmVsYXRlZCBjb2RlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0Y2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHRcdFx0d2FpdEZvckJ1bmRsZXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHN0YXRpYyByZWFkeShjYWxsYmFjaywgd2FpdEZvckJ1bmRsZXMgPSB0cnVlKSB7XHJcblx0XHRDaHRtbC5jb250ZW50TG9hZGVkUHJvbWlzZS50aGVuKCgpID0+IHtcclxuXHRcdFx0aWYgKCF3YWl0Rm9yQnVuZGxlcykge1xyXG5cdFx0XHRcdGNhbGxiYWNrKCk7IHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRDaHRtbC5sb2FkaW5nQnVuZGxlc1Byb21pc2UudGhlbihjYWxsYmFjayk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBDaHRtbCBvdmVyIGEgcm9vdCByZXNvbHZlZCBmcm9tIGRlZmluaXRpb24gb3IgbWFya3VwIHN0cmluZy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8ZG9jdW1lbnR8SFRNTEVsZW1lbnRcdGlucHV0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRcdHBhcmFtc1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0XHRTdGF0aWNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ2h0bWxcclxuXHQgKi9cclxuXHRzdGF0aWMgZnJvbShpbnB1dCwgcGFyYW1zID0ge30sIFN0YXRpYyA9IENodG1sKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gUmVzb2x2ZSBlbGVtZW50IGZyb20gaW5wdXRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZWwgPSBpbnB1dDtcclxuXHRcdGlmIChfaXNTdHJpbmcoaW5wdXQpICYmICFpbnB1dC50cmltKCkuc3RhcnRzV2l0aCgnPCcpICYmIGlucHV0LmluZGV4T2YoJy8nKSAhPT0gLTEpIHtcclxuXHRcdFx0aWYgKCEoZWwgPSBDaHRtbC5pbXBvcnQoX2JlZm9yZShpbnB1dCwgJy8vJykpKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBmb3VuZCBvbiB0aGUgbmFtZXNwYWNlIFwiJyArIGlucHV0ICsgJ1wiIScpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoX2lzU3RyaW5nKGlucHV0KSkge1xyXG5cdFx0XHRcdGlmICghKGVsID0gY3JlYXRlRWxlbWVudChpbnB1dCkpKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXNvbHZlIHRoZSBzdHJpbmcgXCInICtpbnB1dCArICdcIiB0byBhbiBlbGVtZW50IScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgbnMsIHN1cGVyTnMsIHN1cGVyRWwsIGlzSW1wb3J0ID0gZWwubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmltcG9ydCk7XHJcblx0XHRcdGlmICgobnMgPSBfYmVmb3JlKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UpIHx8ICcnLCAnLy8nKSlcclxuXHRcdFx0Ly8gVGhlIGVudGlyZSBuYW1lc3BhY2UgaXMgdXNlZCBmb3IgZWxlbWVudHMgb2YgdHlwZSBpbXBvcnQuXHJcblx0XHRcdC8vIFRoZSBzdXBlcm5hbWVzcGFjZSBpcyB1c2VkIGZvciBub3JtYWwgZWxlbWVudHNcclxuXHRcdFx0JiYgKChpc0ltcG9ydCAmJiAoc3VwZXJOcyA9IG5zKSkgfHwgKHN1cGVyTnMgPSBfYmVmb3JlTGFzdChucywgJy8nKSkgJiYgc3VwZXJOcy5pbmRleE9mKCcvJykgPiAtMSlcclxuXHRcdFx0JiYgKHN1cGVyRWwgPSBDaHRtbC5pbXBvcnQoc3VwZXJOcykpKSB7XHJcblx0XHRcdFx0dmFyIF9lbCA9IGVsO1xyXG5cdFx0XHRcdGVsID0gcmVjb21wb3NlKHN1cGVyRWwsIGVsKTtcclxuXHRcdFx0XHRpZiAoaXNJbXBvcnQpIHtcclxuXHRcdFx0XHRcdF9lbC5yZXBsYWNlV2l0aChlbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKG5zKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdOYW1lc3BhY2UgcmVzb2x1dGlvbiBmYWlsZWQ6ICcgKyBucyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBuZXcgU3RhdGljKGVsLCBwYXJhbXMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBJbXBvcnRzIGEgbW9kdWxlIGZyb20gYnVuZGxlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdFx0XHRuYW1lc3BhY2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuXHQgKi9cclxuXHRzdGF0aWMgaW1wb3J0KG5hbWVzcGFjZSkge1xyXG5cdFx0aWYgKGdsb2JhbFBhcmFtcy5idW5kbGVzKSB7XHJcblx0XHRcdHJldHVybiBnbG9iYWxQYXJhbXMuYnVuZGxlcy5maW5kKG5hbWVzcGFjZSk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMnO1xyXG5pbXBvcnQgX2FmdGVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzJztcclxuXHJcblxyXG4vKipcclxuICogUGFyc2VzIGFuIGVsZW1lbnQncyBDSFRNTCBuYW1lc3BhY2UuXHJcbiAqIFRoaXMgZXhwbGFpbnMgaG93IGFuIGVsZW1lbnQncyBuYW1lc3BhY2UgaXMgdXNlZCBpbiBDSFRNTC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRuYW1lc3BhY2VTdHJcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWVzcGFjZVN0cikge1xyXG5cdHZhciBuYW1lc3BhY2VQYXJzZSA9IHtyb2FkbWFwOm5hbWVzcGFjZVN0cn07XHJcblx0aWYgKG5hbWVzcGFjZVBhcnNlLnJvYWRtYXApIHtcclxuXHRcdG5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSA9IF9iZWZvcmUobmFtZXNwYWNlUGFyc2Uucm9hZG1hcCwgJy8vJyk7XHJcblx0XHRuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UgPSBfYWZ0ZXIobmFtZXNwYWNlUGFyc2Uucm9hZG1hcCwgJy8vJyk7XHJcblx0XHQvLyBJbiBjYXNlIHRoaXMgaXMgdGhlIC8vLyBzcG90Li4uXHJcblx0XHRpZiAobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG5cdFx0XHRuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UgPSBfYWZ0ZXIobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLCAnLycpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZS5lbmRzV2l0aCgnLy8nKSAmJiBuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UuaW5kZXhPZignLy8vJykgPT09IC0xKSB7XHJcblx0XHRcdG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSA9IG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSArIG5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSArICcvLyc7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBuYW1lc3BhY2VQYXJzZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuLi9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiAxLiBSZXR1cm5zIHRoZSBFTlRSWSBmb2xsb3dpbmcgKGVpdGhlciB0aGUgRklSU1Qgb3IgdGhlIExBU1QgaW5zdGFuY2Ugb2YpIHRoZSByZWZlcmVuY2UuXHJcbiAqIDIuIFJldHVybnMgQSBOVU1CRVIgT0YgRU5UUklFUyBjb3VudGluZyBmb3J3YXJkcyBmcm9tIChlaXRoZXIgdGhlIEZJUlNUIG9yIHRoZSBMQVNUIGluc3RhbmNlIG9mKSB0aGUgZ2l2ZW4gcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRcdGFyclxyXG4gKiBAcGFyYW0gbWl4ZWRcdCBcdFx0cmVmZXJlbmNlXHJcbiAqIEBwYXJhbSBpbnR8Ym9vbCBcdFx0bGVuZ3RoXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHQgbG9vcFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0XHRsYXN0UmVmZXJlbmNlXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWR8YXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgcmVmZXJlbmNlLCBsZW5ndGggPSBmYWxzZSwgbG9vcCA9IGZhbHNlLCBsYXN0UmVmZXJlbmNlID0gZmFsc2UpIHtcclxuXHRpZiAoYXJyLmluZGV4T2YocmVmZXJlbmNlKSA9PT0gLTEpIHtcclxuXHRcdHJldHVybiBsZW5ndGggPyBbXSA6IHVuZGVmaW5lZDtcclxuXHR9XHJcblx0dmFyIGFtb3VudCA9IGxlbmd0aCA9PT0gdHJ1ZSA/IGFyci5sZW5ndGggLSAxIDogKGxlbmd0aCA9PT0gZmFsc2UgPyAxIDogbGVuZ3RoKTtcclxuXHR2YXIgZnJvbSA9IGxhc3RSZWZlcmVuY2UgPyBhcnIubGFzdEluZGV4T2YocmVmZXJlbmNlKSArIDEgOiBhcnIuaW5kZXhPZihyZWZlcmVuY2UpICsgMTtcclxuXHR2YXIgYWZ0ZXIgPSAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZSkgPyBhcnIuc2xpY2UoZnJvbSwgZnJvbSArIGFtb3VudCkgOiBbXTtcclxuXHRpZiAobG9vcCAmJiBhZnRlci5sZW5ndGggPCBhbW91bnQgJiYgYWZ0ZXIubGVuZ3RoIDwgYXJyLmxlbmd0aCkge1xyXG5cdFx0aWYgKCFfaXNGdW5jdGlvbihsb29wKSB8fCBsb29wKGFtb3VudCAtIGFmdGVyLmxlbmd0aCkpIHtcclxuXHRcdFx0YWZ0ZXIgPSBhZnRlci5jb25jYXQoYXJyLnNsaWNlKDAsIGFtb3VudCAtIGFmdGVyLmxlbmd0aCkpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxlbmd0aCA/IGFmdGVyIDogYWZ0ZXJbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2UgZnJvbSAnLi9yZWNvbXBvc2UuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uL3BhcmFtcy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcclxuXHRcclxuXHRjb25zdCBXaW5kb3cgPSBnbG9iYWxQYXJhbXMuY29udGV4dDtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmaW5lIHRoZSBjdXN0b21pemVkIGJ1aWx0LWluIHRlbXBsYXRlIGVsZW1lbnRcclxuXHQgKiB0aGF0IHN1cHBvcnRzIHJlbW90ZSBjb250ZW50LlxyXG5cdCAqL1xyXG5cdFdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAuYnVuZGxlLCBjbGFzcyBleHRlbmRzIFdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50IHtcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyBoYW5kbGVzIGJvdGggdHJpZ2dlcnMgcmVtb3RlIGxvYWRpbmdcclxuXHRcdCAqIHdoZW4gc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0gc3RyaW5nXHRuYW1lXHJcblx0XHQgKiBAcGFyYW0gc3RyaW5nXHRvbGRWYWx1ZVxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0bmV3VmFsdWVcclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG5cdFx0XHRpZiAobmV3VmFsdWUpIHtcclxuXHRcdFx0XHR0aGlzLmxvYWQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBdHRlbXB0IHRvIGxvYWQgcmVtb3RlIGNvbnRlbnQgaWYgc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0bG9hZCgpIHtcclxuXHRcdFx0dmFyIHNyYyA9IHRoaXMuZ2V0QXR0cmlidXRlKCdzcmMnKTtcclxuXHRcdFx0aWYgKHNyYyAmJiB0aGlzLmNvbnRlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdBIENIVE1MIGJ1bmRsZSBtdXN0IGRlZmluZSBvbmx5IGVpdGhlciBhIHJlbW90ZSBjb250ZW50IG9yIGxvY2FsIGNvbnRlbnQhIEJ1bmRsZSBpZ25vcmVkLicpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHNyYykge1xyXG5cdFx0XHRcdC8vIE1pc3NpbmcgaW4ganNkb21cclxuXHRcdFx0XHRpZiAoV2luZG93LmZldGNoKSB7XHJcblx0XHRcdFx0XHRXaW5kb3cuZmV0Y2goc3JjKS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLm9rID8gcmVzcG9uc2UudGV4dCgpIDogUHJvbWlzZS5yZWplY3QocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcblx0XHRcdFx0XHR9KS50aGVuKGNvbnRlbnQgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcblx0XHRcdFx0XHRcdC8vIERpc3BhdGNoIHRoZSBldmVudC5cclxuXHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBXaW5kb3cuRXZlbnQoJ2J1bmRsZWxvYWRzdWNjZXNzJywge1xyXG5cdFx0XHRcdFx0XHRcdGJ1YmJsZXM6dHJ1ZSxcclxuXHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdFx0fSkuY2F0Y2goZXJyb3IgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyBEaXNwYXRjaCB0aGUgZXZlbnQuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignRXJyb3IgZmV0Y2hpbmcgdGhlIGJ1bmRsZSBhdCAnICsgc3JjICsgJy4gKCcgKyBlcnJvciArICcpJyk7XHJcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgV2luZG93LkV2ZW50KCdidW5kbGVsb2FkZXJyb3InLCB7XHJcblx0XHRcdFx0XHRcdFx0YnViYmxlczp0cnVlLFxyXG5cdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBldmVudCB3aWxsIGZpcmUgQkVGT1JFIHRoZSBjb2RlIHRoYXQgYmluZHMgdG8gaXRcclxuXHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBXaW5kb3cuRXZlbnQoJ2J1bmRsZWxvYWRzdWNjZXNzJywge1xyXG5cdFx0XHRcdFx0XHRcdGJ1YmJsZXM6dHJ1ZSxcclxuXHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdFx0fSwgMCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBhdHRyaWJ1dGVzIHdlIHdhbnQgdG8gb2JzZXJ2ZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIGFycmF5XHJcblx0XHQgKi9cclxuXHRcdHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xyXG5cdFx0XHRyZXR1cm4gWydzcmMnXTtcclxuXHRcdH1cclxuXHR9LCB7ZXh0ZW5kczogJ3RlbXBsYXRlJ30pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIE1ha2VzIGEgc2VwYXJhdGlvbiBiZXR3ZWVuIGl0ZW1zIHRoYXQgcGFzcyBhIGNhbGxiYWNrIHRlc3QgYW5kIHRob3NlIHRoYXQgZmFpbC5cclxuICpcclxuICogQHBhcmFtIGFycmF5XHQgXHRcdFx0XHRhcnJcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRjYWxsYmFja1xyXG4gKlx0ICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBjYWxsYmFjaykge1xyXG5cdHZhciBwYXNzZXMgPSBbXTtcclxuXHR2YXIgZmFpbHVyZXMgPSBbXTtcclxuXHR2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAoY2FsbGJhY2soYXJyW2ldKSkge1xyXG5cdFx0XHRwYXNzZXMucHVzaChhcnJbaV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZmFpbHVyZXMucHVzaChhcnJbaV0pO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cdHJldHVybiBbcGFzc2VzLCBmYWlsdXJlc107XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2UgZnJvbSAnLi9yZWNvbXBvc2UuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uL3BhcmFtcy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2FkaW5nQnVuZGxlc1Byb21pc2UpIHtcclxuXHRcclxuXHRjb25zdCBXaW5kb3cgPSBnbG9iYWxQYXJhbXMuY29udGV4dDtcclxuXHRcdFx0XHRcclxuXHQvKipcclxuXHQgKiBEZWZpbmUgdGhlIGN1c3RvbSBpbXBvcnQgZWxlbWVudFxyXG5cdCAqL1xyXG5cdFdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoZ2xvYmFsUGFyYW1zLnRhZ01hcC5pbXBvcnQsIGNsYXNzIGV4dGVuZHMgV2luZG93LkhUTUxFbGVtZW50IHtcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGVzdHMgaWYgY29uZGl0aW9ucyBhcmUgcmlnaHQgdG8gcmVzb2x2ZSB0aGUgaW1wb3J0LlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYm9vbFxyXG5cdFx0ICovXHJcblx0XHRzaG91bGRSZXNvbHZlKCkge1xyXG5cdFx0XHRyZXR1cm4gIXRoaXMuaGFzQXR0cmlidXRlKCdvbmRlbWFuZCcpXHJcblx0XHRcdFx0JiYgIXRoaXMuY2xvc2VzdCgndGVtcGxhdGUnKVxyXG5cdFx0XHRcdCYmICF0aGlzLmNsb3Nlc3QoZ2xvYmFsUGFyYW1zLnRhZ01hcC5pbXBvcnQgKyAnW29uZGVtYW5kXScpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIHRyaWdnZXJzIHNlbGYtcmVwbGFjZW1lbnRcclxuXHRcdCAqIHdoZW4gc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0Y29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcblx0XHRcdHRoaXMucHJvY2Vzc2VkID0gZmFsc2U7XHJcblx0XHRcdGlmICh0aGlzLnNob3VsZFJlc29sdmUoKSkge1xyXG5cdFx0XHRcdHRoaXMucmVzb2x2ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgdHJpZ2dlcnMgc2VsZi1yZXBsYWNlbWVudFxyXG5cdFx0ICogd2hlbiBzbyBkZWZpbmVkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG5hbWVcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG9sZFZhbHVlXHJcblx0XHQgKiBAcGFyYW0gc3RyaW5nXHRuZXdWYWx1ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcblx0XHRcdGlmICh0aGlzLnNob3VsZFJlc29sdmUoKSkge1xyXG5cdFx0XHRcdHRoaXMucmVzb2x2ZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEF0dGVtcHQgc2VsZi1yZXBsYWNlbWVudCBpZiBzbyBkZWZpbmVkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRyZXNvbHZlKCkge1xyXG5cdFx0XHRpZiAoIXRoaXMucGFyZW50Tm9kZSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsb2FkaW5nQnVuZGxlc1Byb21pc2UudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0dmFyIHJlcGxhY2VtZW50LCBuYW1lc3BhY2UsIG5hbWVzcGFjZUF0dHIgPSBnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2U7XHJcblx0XHRcdFx0aWYgKChuYW1lc3BhY2UgPSBfYmVmb3JlKHRoaXMuZ2V0QXR0cmlidXRlKG5hbWVzcGFjZUF0dHIpIHx8ICcnLCAnLy8nKSlcclxuXHRcdFx0XHQmJiAobmFtZXNwYWNlICE9PSB0aGlzLl9fbmFtZXNwYWNlKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fX25hbWVzcGFjZSA9IG5hbWVzcGFjZTtcclxuXHRcdFx0XHRcdGlmICghZ2xvYmFsUGFyYW1zLmJ1bmRsZXMgfHwgIShyZXBsYWNlbWVudCA9IGdsb2JhbFBhcmFtcy5idW5kbGVzLmZpbmQobmFtZXNwYWNlKSkpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5pbm5uZXJUZXh0ID0gJ05vIGVsZW1lbnQgZm91bmQgb24gdGhlIG5hbWVzcGFjZSBcIicgKyBuYW1lc3BhY2UgKyAnXCIhJztcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHZhciByZXNvbHZlZCA9IHJlY29tcG9zZShyZXBsYWNlbWVudCwgdGhpcyk7XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLmhhc0F0dHJpYnV0ZSgnc2hhZG93JykpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIXRoaXMucGFyZW50Tm9kZS5zaGFkb3dSb290KSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuYXR0YWNoU2hhZG93KHttb2RlOiAnb3Blbid9KTtcclxuXHRcdFx0XHRcdFx0XHR9IFxyXG5cdFx0XHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5zaGFkb3dSb290LmFwcGVuZChyZXNvbHZlZCk7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlcGxhY2VXaXRoKHJlc29sdmVkKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXNvbHZlZC5zZXRBdHRyaWJ1dGUoJ2F1dG9pbXBvcnRlZCcsICd0cnVlJyk7XHJcblx0XHRcdFx0XHRcdHJlc29sdmVkLmRpc3BhdGNoRXZlbnQobmV3IFdpbmRvdy5FdmVudCgnaW1wb3J0ZWQnLCB7XHJcblx0XHRcdFx0XHRcdFx0YnViYmxlczp0cnVlLFxyXG5cdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGF0dHJpYnV0ZXMgd2Ugd2FudCB0byBvYnNlcnZlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYXJyYXlcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcblx0XHRcdHJldHVybiBbJ29uZGVtYW5kJywgZ2xvYmFsUGFyYW1zLmF0dHJNYXAubmFtZXNwYWNlXTtcclxuXHRcdH1cclxuXHR9KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICcuLi9wYXJhbXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgb3IgZmluZHMgYSBET00gZWxlbWVudCBmcm9tIHNvdXJjZS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRzb3VyY2VcclxuICogQHBhcmFtIG9iamVjdFx0XHRjb250ZXh0RG9jdW1lbnRcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc291cmNlLCBjb250ZXh0RG9jdW1lbnQgPSBudWxsKSB7XHJcblx0Y29udGV4dERvY3VtZW50ID0gY29udGV4dERvY3VtZW50IHx8IGdsb2JhbFBhcmFtcy5jb250ZXh0LmRvY3VtZW50O1xyXG5cdGlmIChjb250ZXh0RG9jdW1lbnQpIHtcclxuXHRcdHZhciBlbDtcclxuXHRcdGlmIChzb3VyY2UudHJpbSgpLnN0YXJ0c1dpdGgoJzwnKSkge1xyXG5cdFx0XHQvLyBDcmVhdGUgYSBub2RlIGZyb20gbWFya3VwXHJcblx0XHRcdHZhciB0ZW1wID0gY29udGV4dERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0XHR0ZW1wLmlubmVySHRtbCA9IHNvdXJjZTtcclxuXHRcdFx0ZWwgPSB0ZW1wLmZpcnN0Q2hpbGQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbCA9IGNvbnRleHREb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNvdXJjZSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZWw7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgcGFyYW1zIGZyb20gJy4vcGFyYW1zLmpzJztcclxuaW1wb3J0IENodG1sIGZyb20gJy4vaW5kZXguanMnO1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBKc2VuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2pzZW4nO1xyXG5wYXJhbXMuZW52ID0gJ2Jyb3dzZXInO1xyXG5cclxuLy8gQXMgZ2xvYmFsc1xyXG5pZiAoIXdpbmRvdy5XZWJOYXRpdmUpIHtcclxuXHR3aW5kb3cuV2ViTmF0aXZlID0ge307XHJcbn1cclxud2luZG93LldlYk5hdGl2ZS5DaHRtbCA9IENodG1sO1xyXG53aW5kb3cuV2ViTmF0aXZlLkNodG1sLnBhcmFtcyA9IHBhcmFtcztcclxud2luZG93LldlYk5hdGl2ZS5DaHRtbC5SZWZsZXggPSBSZWZsZXg7XHJcbndpbmRvdy5XZWJOYXRpdmUuQ2h0bWwuSnNlbiA9IEpzZW47XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=