!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={env:"",context:{},attrMap:{hint:"c-hint",namespace:"c-namespace",superrole:"c-role",subrole:"c-role",bundle:"c-bundle",nocompose:["nocompose","shadow"]},tagMap:{jsen:'script[type="text/jsen"]',bundle:'template[is="c-bundle"]',import:"c-import"},treeProperty:"tree",modelProperty:"model",keyValAttributes:[],listAttributes:[],remodelCallback:null,recomposeCallback:null,hideDataBlockScript:!0},s=function(e){return Array.isArray(e)},i=function(e){return"string"==typeof e},a=function(e){return arguments.length&&(void 0===e||void 0===e)},o=function(e){return null===e||""===e},l=function(e){return Array.isArray(e)||"object"==typeof e},p=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},c=function(e,t=!0){return s(e)?e:!t&&p(e)?[e]:!1!==e&&0!==e&&function(e){return o(e)||a(e)||!1===e||0===e||l(e)&&!Object.keys(e).length}(e)?[]:function(e){return!i(e)&&!a(e.length)}(e)?Array.prototype.slice.call(e):p(e)?Object.values(e):[e]},h=function(e){return function(e){return"function"==typeof e}(e)||e&&"[object function]"==={}.toString.call(e)},u=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},d=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},g=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!s(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{d(r,...Object.getOwnPropertyNames(e))}),r};function m(e,t,r=!1,n=!1,i=!0){var a=0,o=e.shift();if((u(o)||!0===o||!1===o)&&(a=o,o=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,c)=>{(l(e)||h(e))&&(r?g(e):Object.getOwnPropertyNames(e)).forEach(l=>{var h=o[l],d=e[l];if((s(h)&&s(d)||p(h)&&p(d))&&(!0===a||a>0))o[l]=s(h)&&s(d)?[]:{},m([u(a)?a-1:a,o[l],h,d],t,r,n,i);else if(t(l,o,e,c))if(s(o)&&s(e))n?o[l]=d:o.push(d);else try{i?Object.defineProperty(o,l,Object.getOwnPropertyDescriptor(e,l)):o[l]=e[l]}catch(e){}})}),o}var f=function(...e){return m(e,(e,t,r)=>!0,!1,!1,!1)},v=function(e,t,r=!1){for(var n=e.indexOf(t);n>-1&&(r||!1===r);)e.splice(n,1),r>0&&r--,n=e.indexOf(t);return e},b=function(e,t){if(!e)return!1;if(e instanceof t)return!0;var r=e=>{for(;e&&e!==Function.prototype;){if(e===t||e.prototypes&&e.prototypes.reduce((e,n)=>e||n===t||r(n),!1))return!0;e=Object.getPrototypeOf(e)}return!1};return r(e.constructor)},y=function(e){return"number"==typeof e},w=function(e){return p(e)&&Object.getPrototypeOf(e)===Object.prototype},x=function(e){return!0===e||!1===e},E=function(e,t){var r=void 0;return l(e)&&Object.keys(e).forEach((n,s)=>{!1!==r&&(r=t(u(n)?parseFloat(n):n,e[n],s))}),r};const j=function(e,t,r=!0,n=1){if(s(e)&&s(t)&&e.length!==t.length)return!r;if(p(e)&&p(t)){var i=Object.keys(e),a=Object.keys(t);if(!i.length&&!a.length)return w(e)&&w(t)?r:e===t===r;if(!j(i,a))return!r}if(n>0&&(s(e)&&s(t)||p(e)&&p(t))){var o=function(e,t,r=!0,n=!0,i=!1,a=!1){if(s(e)&&s(t)){var o=[],c=!0;return e.forEach(e=>{if(c){var h=!1;E(t,(t,i)=>{(!h||n&&l(e))&&(h=r(e,i),(s(h)&&!h.length||p(h)&&!Object.keys(h).length)&&(h=!1),l(h)&&n&&(e=h))}),l(h)?o.push(n?h:e):x(h)?i&&!h||!i&&h?o.push(e):a&&(c=!1):o.push(h)}}),o}if(p(e)&&p(t)){o={},c=!0;return Object.keys(e).forEach(h=>{if(c){var u=r(e[h],t[h]);(s(u)&&!u.length||p(u)&&!Object.keys(u).length)&&(u=!1),l(u)?o[h]=n?u:e[h]:x(u)?i&&!u||!i&&u?o[h]=e[h]:a&&(c=!1):o[h]=u}}),o}}(e,t,(e,t)=>j(e,t,r,n-1),!1,!1,!0);return s(o)?o.length===e.length&&o.length===t.length:p(o)&&p(e)?Object.keys(o).length===Object.keys(e).length&&Object.keys(o).length===Object.keys(t).length:o}return h(r)?r(e,t):y(e)&&y(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var k=j,O=class{even(e){return!(!p(e)||e.jsenType!==this.jsenType)&&k(e,this)}inherit(e){return this}withComments(e){return this.meta||(this.meta={}),this.meta.comments=e,this}withVars(e){return this.meta||(this.meta={}),this.meta.vars=e,this}};const T=class extends O{};Object.defineProperty(T.prototype,"jsenType",{get:()=>"Reference"});var S=T;const F=class extends O{};Object.defineProperty(F.prototype,"jsenType",{get:()=>"CallExpression"});var P=F;const C=class{static parse(e,t,r={},n=C){if(r.meta||(r.meta={vars:[]}),e.length){for(var i=Object.values(t||n.grammars),a=0;a<i.length;a++){var o=r.meta&&s(r.meta.vars)?r.meta.vars.length:0,l=i[a].parse(e,(e,t,s={})=>C.parse(e,t,s?f(r,s):r,n));if(l&&(l.meta||(l.meta={}),l.meta.vars=r.meta.vars.slice(o),(b(l,S)||b(l,P))&&(v(l.meta.vars,l.context),v(r.meta.vars,l.context),r.meta.vars.push(l))),l&&s(r.explain)&&r.explain.push(e+" >>-------------\x3e> "+l.jsenType),l)return l}if(!1===r.assert)return;throw new Error("[Syntax error:] "+e)}}};var A=C;const R=function(e,t=1,r=!0){return!u(t)||t<=0?e:(!s(e)&&p(e)&&r&&(e=Object.values(e)),s(e)?e.reduce((e,n)=>s(n)||p(n)&&r?e.concat(R(s(n)?n:Object.values(n),t-1,r)):e.concat(n),[]):e)};var $=R,N=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},D=function(e,t=1){return arguments.length>1?N(e.slice().reverse(),t).reverse():N(e.slice().reverse())},_=function(e,t=[]){return m([{},e],(e,r,n)=>{if(!h(n[e]))return h(t)?t(e):!s(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)};const M=class{static lex(e,t,r){if(!i(e))throw new Error("Argument1 must be a string!");var n=new M(e,r);return M.$cache[e]=M.$cache[e]||[],M.$cache[e].push(n),n.lex(t)}static split(e,t,r){return M.lex(e,t,r).tokens}static match(e,t,r){return M.lex(e,t,r).matches}constructor(e,t){if(!i(e))throw new Error("Lexer requires the first argument to be a string.");this.$str=e,this.$options=t||{},this.$options.blocks||(this.$options.blocks=M.$blocks),this.$options.quotes||(this.$options.quotes=M.$quotes),this.$options.comments||(this.$options.comments=M.$comments),this.$cache=[]}lex(e,t){var r={delims:c(e),options:f(!0,{},this.$options,t||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(!1!==r.options.cache)for(var n=0;n<this.$cache.length;n++)if(k(this.$cache[n].delims,r.delims)&&k(this.$cache[n].options,r.options))return _(this.$cache[n]);if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+$(r.nesting).join(", "));return!1!==r.options.cache&&this.$cache.push(r),r}_evalCharsAt(e,t){if(!(t>=this.$str.length)){var r=1,n={},s={},i={};if(e.openComment||(s=this._testQuotes(e,t)),e.openQuote||(n=this._testComments(e,t)),e.openComment||n.ending)if(e.nesting.length||i.ending)this._push(e,this.$str[t]);else r=(o=n.starting||n.ending||this.$str[t]).length,this._push(e,o,"comments",n.starting);else if(e.openQuote||s.ending)this._push(e,this.$str[t]);else{if(e.options.limit&&e.matches.length===e.options.limit)return this._push(e,this.$str[t]),this._evalCharsAt(e,t+1);i=this._testNesting(e,t);i=this._testNesting(e,t);var a=this._testChars(e.options.stopChars||[],e,t);if(!e.nesting.length&&!1!==a)return e.options.stopChar=a,void(e.options.stopCharForward=this.$str.substr(t));if(e.delims.length)if(e.nesting.length||i.ending){var o;r=(o=i.starting||i.ending||this.$str[t]).length,this._push(e,o)}else{this._push(e,"");var l=this._testChars(e.delims,e,t);if(!1!==l&&(e.matches.push(l),e.matchesi[t]=l,r=l.length||1,!e.options.preserveDelims))return this._evalCharsAt(e,t+(l.length||1));this._push(e,l||this.$str[t])}else 2===e.nesting.length&&i.starting?(e.matches.push(null),this._push(e,i.starting),r=i.starting.length):!e.nesting.length&&i.ending?(this._push(e,i.ending),r=i.ending.length,e.matches.push(null)):this._push(e,this.$str[t])}return this._evalCharsAt(e,t+r)}}_testQuotes(e,t){var r={};return(e.options.quotes||[]).forEach(n=>{this.$str.substr(t,1)===n&&(e.openQuote?n===e.openQuote&&(e.openQuote=!1,r.ending=n):(e.openQuote=n,r.starting=n))}),r}_testComments(e,t){var r={};return(e.options.comments||[]).forEach(n=>{if(e.openComment){if(D(n)===D(e.openComment)){var s;(s=this.$str.substr(t).match(new RegExp("^"+D(n))))&&(e.openComment=!1,r.ending=s[0])}}else(s=this.$str.substr(t).match(new RegExp("^"+N(n))))&&(e.openComment=n,r.starting=s[0])}),r}_testNesting(e,t){var r={};return(e.options.blocks||[]).forEach(n=>{var s=this.$str.substr(t).match(new RegExp("^"+N(n)));if(s)e.nesting=e.nesting.concat([n]),r.starting=s[0];else if(e.nesting.length&&D(n)===D(D(e.nesting))){var i=this.$str.substr(t).match(new RegExp("^"+D(n)));i&&(e.nesting=e.nesting.slice(0,-1),r.ending=i[0])}}),e.maxDepth=Math.max(e.maxDepth,e.nesting.length),r}_testChars(e,t,r){for(var n=0;n<e.length;n++){var s=e[n];if(h(s)){var i=s(this.$str.substr(0,r),this.$str.substr(r));if(!1!==i)return i}if(t.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+s,!0!==t.options.useRegex?t.options.useRegex:""));if(a)return a[0]}if(!t.options.ci&&this.$str.substr(r,s.length)===s||t.options.ci&&this.$str.substr(r,s.length).toLowerCase()===s.toLowerCase())return s}return!1}_push(e,t,r="tokens",n=!1){var s=e.matches.length;if(a(e.tokens[s])&&(e.tokens[s]=""),"comments"===r){e.tokens[s].comments||(e.tokens[s]=new String(e.tokens[s]),e.tokens[s].comments=[]);var i=e.tokens[s].comments.length-(!e.tokens[s].comments.length||n?0:1);e.tokens[s].comments[i]=(e.tokens[s].comments[i]||"")+t}else{var o=e.tokens[s].comments;e.tokens[s]=new String(e.tokens[s]+t),e.tokens[s].comments=o}}split(e,t,r){return this.lex(t,r).tokens}match(e,t,r){return this.lex(t,r).matches}regParse(e,t){return this.lex(e,f({useRegex:!0},t||{}))}regSplit(e,t){return this.regParse(e,t).tokens}regMatch(e,t){return this.regParse(e,t).matches}};M.$blocks=[["\\(","\\)"],["\\[","\\]"],["\\{","\\}"]],M.$quotes=['"',"'","`"],M.$comments=[["\\/\\*","\\*\\/"],["\\/\\/","(\\r)?\\n"]],M.$cache={};var W=M;class q extends Array{get(e,t={},r=!0){for(var n=0;n<this.length;n++){var s=I(this[n],e,t);if(!a(s)||B(this[n],e,t))return h(s)&&r?s.bind(this[n]):s}}set(e,t,r={}){const n=(e,t,r,n)=>n.set?n.set(e,t,r):(e[t]=r,!0);for(var s=0;s<this.length;s++)if(B(this[s],e,r))return n(this[s],e,t,r);return!(!l(this[0])||!this[0])&&n(this[0],e,t,r)}del(e,t={}){for(var r=0;r<this.length;r++)if(B(this[r],e,t))return t.deleteProperty||t.del?(t.deleteProperty||t.del)(this[r],e):(delete this[r][e],!0)}has(e,t,r={}){for(var n=0;n<this.length;n++)if(B(this[n],e,r)){var s=I(this[n],e,r);return B(s,t,r)}throw new Error('"'+e+'" is undefined!')}exec(e,t,r={}){for(var n=0;n<this.length;n++){var s=I(this[n],e,r);if(!a(s)||B(this[n],e,r)){if(!h(s)){if(r.exec)return r.exec(this[n],e,t);throw new Error('"'+e+'" is not a function! (Called on type: '+typeof this[n]+".)")}return r.apply?r.apply(s,this[n],t):s.apply(this[n],t)}}if(r.execUnknown)return r.execUnknown(this,e,t);throw new Error('"'+e+'" is undefined! (Called on types: '+this.map(e=>typeof e).join(", ")+".)")}static create(e){return e instanceof q?e:e?new q(e):new q}}const I=(e,t,r)=>r.get?r.get(e,t):l(e)&&e||i(e)||y(e)?e[t]:void 0,B=(e,t,r)=>r.has?r.has(e,t):l(e)&&e?t in e:!a(e[t]);var L=function(e,t,r){return e.startsWith(t)&&e.endsWith(r)},Q=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},U=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},H=function(e,t){return U(e,t,!0)},z=function(e,t,r){return H(Q(e,t),r)};const V=class extends O{};Object.defineProperty(V.prototype,"jsenType",{get:()=>"Abstraction"});var K=V;const J=class extends K{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr.eval(e,t)}toString(e=null){return"("+this.expr.toString(e)+")"}static parse(e,t,r=J){if(L(e,"(",")")&&!W.match(e,[" "]).length)return new r(t(z(e,"(",")")))}};var Y=J;const Z=class extends O{};Object.defineProperty(Z.prototype,"jsenType",{get:()=>"ArrayType"});var G=Z;const X=class extends G{constructor(e){super(),this.exprs=e||[]}inherit(e){if(e instanceof G){var t=e.exprs.filter(e=>this.exprs.reduce((t,r)=>t&&!e.even(r),!0));this.exprs=t.concat(this.exprs)}return this}eval(e=null,t={}){return this.exprs.map(r=>r.eval(e,t))}toString(e=null){return"["+this.exprs.map(t=>t.toString(e)).join(", ")+"]"}static parse(e,t,r=X){if(L(e,"[","]")&&!W.match(e.trim(),[" "]).length)return new r(W.split(z(e,"[","]"),[","]).map(e=>e.trim()).filter(e=>e).map(e=>t(e)))}};var ee=X;const te=class extends O{};Object.defineProperty(te.prototype,"jsenType",{get:()=>"Arguments"});var re=te;const ne=class extends re{constructor(e=[]){super(),this.list=e}eval(e=null,t={}){return this.list.map(r=>r.eval(e,t))}toString(e=null){return"("+this.list.map(t=>t.toString(e)).join(", ")+")"}static parse(e,t,r=ne){if(e=e.trim(),L(e,"(",")")&&!W.match(e,[" "]).length)return new r(W.split(z(e,"(",")"),[","]).map(e=>t(e.trim())))}};var se=ne,ie=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)};const ae=class extends O{};Object.defineProperty(ae.prototype,"jsenType",{get:()=>"AssertionExpression"});var oe=ae;const le=class extends oe{constructor(e,t){super(),this.exprs=e,this.logic=t}eval(e=null,t={}){if("!"===this.logic)return!N(this.exprs).eval(e,t);$(le.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(le.operators.or||"").trim().toUpperCase(),s=r===(le.operators.nor||"").trim().toUpperCase(),i=r===(le.operators.and||"").trim().toUpperCase(),a=r===(le.operators.nand||"").trim().toUpperCase(),o=!0,l=0,p=0;p<this.exprs.length;p++){if(o=this.exprs[p].eval(e,t),i&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:i||a?i:s&&0===l}toString(e=null){return"!"===this.logic?"!"+N(this.exprs).toString(e):this.exprs.map(t=>t.toString(e)).join(" "+this.logic+" ")}static parse(e,t,r=le){if(e.startsWith("!"))return new r([t(e.substr(1))],"!");var n=W.lex(e,$(r.operators));if(n.tokens.length>1){var s=ie(n.matches);if(s.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+e+"!");return new r(n.tokens.map(e=>t(e.trim())),N(s))}}};le.operators={and:"&&",or:"||"};var pe=le;const ce=class extends O{};Object.defineProperty(ce.prototype,"jsenType",{get:()=>"AssignmentExpression"});var he=ce;const ue=class extends he{constructor(e,t,r="="){super(),this.reference=e,this.val=t,this.operator=r}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.val.eval(e,t);if(!a(r.context)&&!a(r.name))return q.create(r.context).set(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return[this.reference.toString(e),this.operator,this.val.toString(e)].join(" ")}static parse(e,t,r=ue){var n=W.lex(e,r.operators);if(2===n.tokens.length){var s,i;if(!((s=t(n.tokens.shift().trim()))instanceof S&&(i=t(n.tokens.shift().trim()))))throw new Error("Invalid assignment expression: "+e);return new r(s,i,n.matches[0].trim())}}};ue.operators=[" = "];var de=ue;const ge=class extends O{};Object.defineProperty(ge.prototype,"jsenType",{get:()=>"BooleanType"});var me=ge;const fe=class extends me{constructor(e){super(),this.state=e}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(e,t,r=fe){if("true"===(e=e.toLowerCase().trim())||"false"===e)return new r(e)}};var ve=fe;const be=class extends P{constructor(e,t){super(),this.reference=e,this.args=t}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.args.eval(e,t);if(!a(r.context)&&!a(r.name))return q.create(r.context).exec(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.reference.toString(e)+this.args.toString(e)}static parse(e,t,r=be){if(!e.startsWith("(")&&e.endsWith(")")&&!W.match(e,[" "]).length){var n,s=W.split(e,[]),i=s.pop();if(!((n=t(s.join("")))instanceof S&&(i=t(i,[se]))))throw new Error("Invalid call directive: "+e);return new r(n,i)}}};var ye=be;const we=class extends O{};Object.defineProperty(we.prototype,"jsenType",{get:()=>"ComparisonExpression"});var xe=we;const Ee=class extends xe{constructor(e,t,r){super(),this.operand1=e,this.operand2=t,this.operator=r}eval(e=null,t={}){return Ee.compare(this.operand1.eval(e,t),this.operand2.eval(e,t),this.operator)}toString(e=null){return[this.operand1.toString(e),this.operator,this.operand2.toString(e)].join(" ")}static parse(e,t,r=Ee){var n=$(r.operators).map(e=>" "+e+" "),s=W.lex(e,n);if(s.tokens.length>1){if(s.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+e+"!");return new r(t(N(s.tokens).trim()),t(D(s.tokens).trim()),s.matches[0].trim())}}static compare(e,t,r="=="){if(-1===$(Ee.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return e===t;case"==":case"=":return e==t;case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"!=":return e!=t;case"!==":return e!==t;case"^=":return i(e)&&e.startsWith(t);case"$=":return i(e)&&e.endsWith(t);case"*=":return!(!s(t)&&!i(t))&&e.indexOf(t)>-1;case"~=":return i(e)&&i(t)&&(" "+e+" ").indexOf(" "+t+" ")>-1;case">=<":if(!s(t)||2!==t.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return e>=t[0]&&e<=t[1];case"/**/":return t.match(new RegExp(e));default:return!1}}static diff(e,t,r){return!Ee.compare(e,t,r?"===":"==")}};Ee.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var je=Ee;const ke=class extends O{};Object.defineProperty(ke.prototype,"jsenType",{get:()=>"TernaryConditional"});var Oe=ke;const Te=class extends Oe{constructor(e,t,r){super(),this.assertion=e,this.onTrue=t,this.onFalse=r}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue.eval(e,t):this.onFalse.eval(e,t)}toString(e=null){return[this.assertion.toString(e),Te.operators[0],this.onTrue.toString(e),Te.operators[1],this.onFalse.toString(e)].join(" ")}static parse(e,t,r=Te){var n=W.split(e,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+e+"!");return new r(t(n[0].trim()),t(n[1].trim()),t(n[2].trim()))}}};Te.operators=["?",":"];var Se=Te;const Fe=class extends O{};Object.defineProperty(Fe.prototype,"jsenType",{get:()=>"DeleteExpression"});var Pe=Fe;const Ce=class extends Pe{constructor(e,t="delete"){super(),this.reference=e,this.operator=t}eval(e=null,t={}){var r=this.reference.getEval(e,t);if(!a(r.context)&&!a(r.name))return q.create(r.context).del(r.name,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.operator+" "+this.reference.toString(e)}static parse(e,t,r=Ce){var n=W.lex(e,Object.values(r.operators));if(1===n.matches.length&&e.startsWith(n.matches[0]+" ")){var s;if(!((s=t(n.tokens.pop().trim()))instanceof S))throw new Error("Invalid delete directive: "+e);return new r(s,n.matches[0].trim())}}};Ce.operators={red:"reduce",del:"delete"};var Ae=Ce,Re=function(e,t=[],r=!0){var n=0;return u(arguments[0])&&l(arguments[1])&&(n=arguments[0],e=arguments[1],t=arguments[2]||[]),m([n,{},e],(e,r,n)=>h(t)?t(e):!s(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)};const $e=class extends O{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"FunctionType"});var Ne=$e;const De=class extends O{};Object.defineProperty(De.prototype,"jsenType",{get:()=>"Statements"});var _e=De;const Me=class extends O{};Object.defineProperty(Me.prototype,"jsenType",{get:()=>"ReturnDirective"});var We=Me;const qe=class extends _e{constructor(e,t){super(),this.stmts=e||[],this.delim=t}eval(e=null,t={}){for(var r=[],n=0;n<this.stmts.length;n++){if(this.stmts[n]instanceof We)return this.stmts[n].eval(e,t);r[n]=this.stmts[n].eval(e,t)}return r}toString(e=null){return this.stmts.map(t=>t.toString(e)).join(this.delim)}static parse(e,t,r=qe){var n=W.lex(e,$(r.operators).concat([(e,t)=>!(!e.endsWith("}")||t.trim().startsWith("else"))&&""]));if(n.matches.length)return new r(n.tokens.map(e=>t(e.trim())).filter(e=>e),n.matches[0].trim())}};qe.operators=[";","\r\n"];var Ie=qe;const Be=class extends Ne{constructor(e,t,r={}){super(),this.paramters=e||{},this.statements=t,this.arrowFunctionFormatting=r}inherit(e){if(e instanceof Ne){for(var t=Object.keys(e.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,t.length);n++){var s=t[n],i=r[n];if(!i&&s)throw new Error("Parameter #"+n+" ("+s+") in parent function must be implemented.");if(i&&s){var a=e.paramters[s],o=this.paramters[i];if(o&&!a)throw new Error("Parameter #"+n+" ("+i+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+i+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=e}return this}eval(e=null,t={}){return(...r)=>{var n={};E(Object.keys(this.paramters),(s,i)=>{var a=this.paramters[i];if(r.length-1<s&&!a)throw new Error('The parameter "'+i+'" is required.');n[i]=r.length>s?r[s]:this.paramters[i]?this.paramters[i].eval(e,t):null});var s=q.create(n).concat(q.create(e));return this.statements.eval(s,t)}}toString(e=null){var t=[];if(E(this.paramters,(r,n)=>{t.push(r+(n?"="+n.toString(e):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===t.length&&-1===t[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?t[0]:"("+t.join(", ")+")")+" => "+(n?this.statements.toString(e):"{"+this.statements.toString(e)+"}")}return"function ("+t.join(", ")+") {"+this.statements.toString(e)+"}"}static parse(e,t,r=Be){var n;if((e=e.trim()).startsWith("function")&&(n=W.split(e,[]).slice(1).filter(e=>e.trim()))&&2===n.length)var s=!1,i=z(n.shift().trim(),"(",")"),a=z(n.shift().trim(),"{","}");else{if(e.startsWith("function")||!(n=W.split(e,["=>"]))||2!==n.length)return;i=n.shift().trim(),a=n.shift().trim(),s={};L(i,"(",")")?i=z(i,"(",")"):s.head=!1,L(a,"{","}")?a=z(a,"{","}"):s.body=!1}var o={};W.split(i,[","]).forEach(e=>{var r=e.split("=");r[1]?o[r[0].trim()]=t(r[1].trim()):o[e.trim()]=null});var l=t(a,[Ie],{assert:!1})||t(a);return new r(o,l,s)}};Be.operators=["=>"];var Le=Be;const Qe=class extends O{};Object.defineProperty(Qe.prototype,"jsenType",{get:()=>"IfConditional"});var Ue=Qe;const He=class extends Ue{constructor(e,t,r,n={}){super(),this.assertion=e,this.onTrue=t,this.onFalse=r,this.params=n}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue.eval(e,t):this.onFalse?this.onFalse.eval(e,t):void 0}toString(e=null){var t=this.params.onTrueIsBlock?"{"+this.onTrue.toString(e)+"}":this.onTrue.toString(e),r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(e)+"}":this.onFalse?this.onFalse.toString(e):"";return"if ("+this.assertion.toString(e)+")"+t+(r?" else "+r:"")}static parse(e,t,r=He){var n;if((e=e.trim()).startsWith("if")&&(n=W.split(e,[],{limit:2}).slice(1).filter(e=>e.trim()))&&2===n.length){var s,i,a=t(z(n.shift().trim(),"(",")").trim()),o=W.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),p=(o.shift()||"").trim();return L(l,"{","}")?(s=!0,l=t(l=z(l,"{","}").trim(),[Ie],{assert:!1})||t(l)):l=t(l),p&&(L(p,"{","}")?(i=!0,p=t(p=z(p,"{","}").trim(),[Ie],{assert:!1})||t(p)):p=t(p)),new r(a,l,p,{onTrueIsBlock:s,onFalseIsBlock:i})}}};var ze=He,Ve=function(e,t,r=null){return s(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]};const Ke=class extends O{};Object.defineProperty(Ke.prototype,"jsenType",{get:()=>"MathExpression"});var Je=Ke;const Ye=class extends Je{constructor(e,t){super(),this.val=e,this.exprs=t}eval(e=null,t={}){return this.exprs.reduce((r,n)=>{var s=n.val.eval(e,t),i=n.operator.trim();if(!(u(r)&&u(s)||"+"===i))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(i){case"+":return r+s;case"-":return r-s;case"*":return r*s;case"/":return r/s}},this.val.eval(e,t))}toString(e=null){return[this.val.toString(e)].concat(this.exprs.map(t=>t.operator+" "+t.val.toString(e))).join(" ")}static parse(e,t,r=Ye){var n=W.lex(e,$(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var s=ie(n.matches);if(Ve(s,Ye.operators.sup).length&&Ve(s,Ye.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+e+"!");return new r(t(n.tokens.shift().trim()),n.tokens.map((e,r)=>({operator:n.matches[r],val:t(e.trim())})))}}};Ye.operators={sup:["*","/"],sub:[" + "," - "]};var Ze=Ye;const Ge=class extends O{};Object.defineProperty(Ge.prototype,"jsenType",{get:()=>"NumberType"});var Xe=Ge;const et=class extends Xe{constructor(e,t=0){super(),this.int=e,this.dec=t}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(e=null){return this.int+(this.dec?"."+this.dec:null)}static parse(e,t,r=et){if(u(e)){e=e.split(".");return new r(parseInt(e.shift()),parseInt(e.shift()))}}};var tt=et;const rt=class extends O{};Object.defineProperty(rt.prototype,"jsenType",{get:()=>"ObjectType"});var nt=rt;const st=class extends nt{constructor(e){super(),this.entries=e||{}}inherit(e){return e instanceof nt&&E(e.entries,(e,t)=>{e in this.entries||(this.entries[e]=t)}),this}eval(e=null,t={}){var r={};return E(this.entries,(n,s)=>{r[n]=s.eval(e,t)}),r}toString(e=null){var t=[];return E(this.entries,(r,n)=>{t.push(r+st.operators.sub+n.toString(e))}),"{"+t.join(st.operators.sup)+"}"}static parse(e,t,r=st){if(L(e,"{","}")&&!W.match(e.trim(),[" "]).length){var n={},s=W.split(z(e,"{","}"),[st.operators.sup]).map(e=>e.trim()).filter(e=>e);return E(s,(e,r)=>{var s=W.split(r,[st.operators.sub],{limit:1});n[N(s).trim()]=t(D(s).trim())}),new r(n)}}};st.operators={sup:",",sub:":"};var it=st;const at=class extends O{};Object.defineProperty(at.prototype,"jsenType",{get:()=>"PresenceOperator"});var ot=at;const lt=class extends ot{constructor(e,t,r="in"){super(),this.prop=e,this.reference=t,this.operator=r}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.prop.eval(e,t);if(!a(r.context)&&!a(r.name))return q.create(r.context).has(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return[this.prop.toString(e),this.operator,this.reference.toString(e)].join(" ")}static parse(e,t,r=lt){var n=W.lex(e,r.operators);if(2===n.tokens.length){var s,i;if(!((s=t(n.tokens.shift().trim()))&&(i=t(n.tokens.shift().trim()))instanceof S))throw new Error("Invalid presence check expression: "+e);return new r(s,i,n.matches[0].trim())}}};lt.operators=[" in "];var pt=lt;const ct=class extends S{constructor(e,t,r=!1){super(),this.context=e,this.name=t,this.backticks=r}getEval(e=null,t={}){var r=e,n=this.name;return this.context&&(n instanceof O&&(n=n.eval(e,t)),r=this.context.eval(e,t)),{context:r,name:n}}eval(e=null,t={}){var r=this.getEval(e,t);if(!a(r.context)&&!a(r.name))return q.create(r.context).get(r.name,t)}toString(e=null){var t=this.name;if(this.context){var r=this.context.toString(e);t instanceof O?t="["+t.toString(e)+"]":this.backticks&&(t="`"+t+"`")}else{r=e;this.backticks&&(t="`"+t+"`")}return(r||"")+(r&&!t.startsWith("[")?ct.separator:"")+t}static parse(e,t,r=ct){if(!W.match(e.trim(),[" "]).length){var n,s,i=W.split(e,[]),a=i.pop(),o=W.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),i=i.concat(o)),L(a,"`","`")&&(a=z(a,"`","`"),s=!0),i.length&&((n=t(i.join(""))).isContext=!0),L(a,"[","]")){if(!n)throw new Error("Invalid reference: "+e+"!");a=t(z(a,"[","]"))}return new r(n,a,s)}}};ct.separator=".";var ht=ct;const ut=class extends We{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr?this.expr.eval(e,t):void 0}toString(e=null){return this.expr?"return "+this.expr.toString(e):"return"}static parse(e,t,r=ut){var n=e.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(t(e.substr(6).trim()))}};var dt=ut;const gt=class extends O{};Object.defineProperty(gt.prototype,"jsenType",{get:()=>"StringType"});var mt=gt;const ft=class extends mt{constructor(e,t){super(),this.expr=e,this.quote=t}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(e,t,r=ft){if(e=e.trim(),(L(e,'"','"')||L(e,"'","'"))&&!W.match(e,[" "]).length){var n=L(e,'"','"')?'"':"'";return new r(z(e,n,n),n)}}};var vt=ft;A.grammars={If:ze,Return:dt,Deletion:Ae,Assignment:de,Presence:pt,Func:Le,Abstraction:Y,Condition:Se,Assertion:pe,Comparison:je,Math:Ze,Arr:ee,Obj:it,Num:tt,Str:vt,Bool:ve,Call:ye,Reference:ht};var bt=A,yt=function(e,t=null){var r={};return 2===arguments.length&&(i(e)?r[e]=t:s(e)&&s(t)&&e.forEach((e,n)=>r[e]=t[n])),r},wt=class{constructor(e,t={}){this.$={},this.$.target=e,this.$.details=t,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],E(t,(e,t)=>{"$"!==e&&Object.defineProperty(this,e,{value:t})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(e){if(!(e instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(e),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(e){var t,r=p(e)&&!a(e.propagationStopped)&&!a(e.defaultPrevented);!1===e||r&&e.propagationStopped?this.stopPropagation():!1===e||r&&e.defaultPrevented?this.preventDefault():(e instanceof Promise&&(t=e)||r&&(t=e.promises))&&this.promise(t)}},xt=class extends wt{constructor(e,t={}){super(e,t)}},Et=class{disconnect(){this.disconnected=!0}},jt=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(e){return this.fireables.push(e),e}removeFireable(e,t=[]){this.fireables=this.fireables.filter(t=>t!==e)}findFireables(e){return this.fireables.filter(t=>!(e.handler&&t.handler!==e.handler||e.params&&(e.params.type&&t.params.type!==e.params.type||e.params.tags&&Ve(t.params.tags||[],e.params.tags).length!==e.params.tags.length)))}static createForTarget(e,t,r){var n;if(e&&l(e))return(n=e[kt])||(n={},Object.defineProperty(e,kt,{get:()=>n,set:e=>{if(e!==n)throw new Error('Attempt to overwrite the "'+kt+'" special property!')},enumerable:!1})),n[t]="listeners"===t?new r(e):new r,n[t]}static getForTarget(e,t){var r;if(e&&l(e)&&(r=e[kt]))return r[t]}};const kt="< r e f l e x >";var Ot=class extends Et{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e,t,r){return this.disconnected||this.params.type&&this.params.type!==e.type?t(...c(arguments).slice(2)):this.handler(e,r,t)}};class Tt extends jt{fire(e,t=null){if(this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.query===e.query).length)return t?t():void 0;this.currentlyFiringEvents.push(e);const r=(n,...s)=>{var i=this.fireables[n];return i?i.fire(e,(...e)=>r(n+1,...e),...s):t?t(...s):s[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(e){return super.createForTarget(e,"traps",Tt)}static getForTarget(e){return super.getForTarget(e,"traps")}}var St=class extends wt{constructor(e,t={}){if(t.data&&(t.fields=Object.keys(t.data)),super(e,t),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(e=>{var t=r+"."+e;this.originatingFields.push(t),this.originatingData[t]=this.srcEvt.originatingData[e],this._originatingData[t]=this.srcEvt._originatingData[e]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=k(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class Ft extends jt{findFireables(e){return super.findFireables(e).filter(t=>o(e.fields)||a(e.fields)||k(c(t.fields),c(e.fields)))}fire(e){return this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.fields===e.fields).length||(this.currentlyFiringEvents.push(e),this.fireables.forEach(t=>{e.propagationStopped||t.params.type&&t.params.type!==e.type||t.fire(e)}),this.currentlyFiringEvents.pop()),e}static createForTarget(e){return super.createForTarget(e,"observers",Ft)}static getForTarget(e){return super.getForTarget(e,"observers")}}var Pt=function(e,t,r=null,n={}){if(!e||!l(e))throw new Error("Object must be of type object!");var s;(h(t)||o(t)||a(t))&&(n=arguments.length>2?r:{},r=t,t=null),(s=Ft.getForTarget(e))&&s.findFireables({handler:r,fields:t,params:n}).forEach(e=>{s.removeFireable(e)})},Ct=function(e,t,r){Pt(r,null,{tags:["#e-bubbling",e]})},At=function(e){return typeof e},Rt=function(e,t,r={},n={}){t=c(t).slice();for(var s=e;!a(s)&&!o(s)&&t.length;){var i=t.shift();if(!(r.get?r.get(s,i):l(s)?i in s:s[i]))return void(n.exists=!1);s=r.get?r.get(s,i):s[i]}return n.exists=!0,s},$t=class extends Et{constructor(e,t=null,r={}){if(super(),this.handler=e,this.fields=t,this.params=r,this.fieldsArray=c(this.fields),this.isDynamicField=this.fieldsArray.filter(e=>e.indexOf("..")>-1||e.startsWith(".")||e.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(e){this.disconnected||this.params.type&&this.params.type!==e.type||e.dataEven&&!1!==this.params.diff||this.fireCallback(e,t=>{if(t){var r=[],n=[];return t.forEach(t=>{var s=e.originatingFields.reduce((r,n)=>{var s=e.originatingData[n],i=e._originatingData[n];if(!r&&t===n)return[s,i];if(!r&&(t+".").startsWith(n+".")){var a=Q(t,n+".");return[Rt(s,a.split("."),{get:Mt}),Rt(i,a.split("."),{get:Mt})]}return r},null);if(s)r.push(s.shift()),n.push(s.shift());else{var a=Rt(e.target,i(t)?t.split("."):t,{get:Mt});r.push(a),n.push(a)}}),s(this.fields)?e.response(this.handler(r,n,e)):e.response(this.handler(r[0],n[0],e))}r={},n={};return e.fields.forEach(t=>{var s=t in e.data?e.data[t]:Mt(e.target,t),i=t in e._data?e._data[t]:s;r[t]=s,n[t]=i}),e.response(this.handler(r,n,e))})}fireCallback(e,t){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((t,n)=>(t=i(t)?t.replace(/`/g,""):t,r[n]=[],e.originatingFields.filter(s=>{var i=s.split("."),a=this.isDynamicField?t.split(".").map((e,t)=>e||i[t]||"").join("."):t;return d(r[n],a),(a===s||!1!==this.params.observeUp&&!e.srcEvt&&(a+".").startsWith(s+".")||this.params.observeDown&&(s+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(e=>!e).length)}).length)).length&&(n=r,n.reduce((e,t)=>{var r=[];return e.forEach(e=>{c(t).forEach(t=>{var n=e.slice();n.push(t),r.push(n)})}),r},[[]])).forEach(t)}else(e.fields===e.originatingFields||this.params.observeDown)&&t();var n}},Nt=function(e,t,r=null,n={}){if(!e||!l(e))throw new Error("Object must be of type object!");if(h(t)&&(n=arguments.length>2?r:{},r=t,t=null),!h(r))throw new Error('Callback must be a function; "'+At(r)+'" given!');var s;return(s=Ft.getForTarget(e))||(s=Ft.createForTarget(e)),s.addFireable(new $t(r,t,n))},Dt=function(e,t,r){var n;Nt(r,(s,i,a)=>{if(n=Ft.getForTarget(e)){var o=yt(t,r);return n.fire(new St(e,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",e]})},_t=function(e,t,r=[],n=!1){var i=e.map((e,t)=>{if(!e||!l(e))throw new Error("Target must be of type object!");return{target:e,targetCopy:Re(e,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),a=t(...e);return i.map(e=>{var t,i,a=Object.keys(e.targetCopy),o=Object.keys(e.target),p=ie(a.concat(o)).filter(t=>{if(!(r.length&&!r.includes(t)||s(e.target)&&("length"===t||"< r e f l e x >"===t))){if(o.includes(t)?(e._setData[t]=e.targetCopy[t],e.setData[t]=e.target[t],a.includes(t)||e.created.push(t)):(e._delData[t]=e.targetCopy[t],e.delData[t]=void 0,e.deleted.push(t)),e.targetCopy[t]!==e.target[t])return e.targetCopy[t]&&l(e.targetCopy[t])&&Ct(e.target,0,e.targetCopy[t]),e.target[t]&&l(e.target[t])&&Dt(e.target,t,e.target[t]),!0;delete e.setData[t],delete e._setData[t]}});return((i=Ft.getForTarget(e.target))||n)&&(t=new St(e.target,{type:"transaction",data:f(e.setData,e.delData),_data:f(e._setData,e._delData),created:e.created,deleted:e.deleted}),i&&(Object.keys(e.delData).length&&t.response(i.fire(new St(e.target,{type:"del",data:e.delData,_data:e._delData,deleted:e.deleted}))),Object.keys(e.setData).length&&t.response(i.fire(new St(e.target,{type:"set",data:e.setData,_data:e._setData,created:e.created}))))),n?t:p}),a},Mt=function(e,t){if(!e||!l(e))throw new Error("Target must be of type object!");var r,n,i=function(r){return arguments.length?r:s(t)?yt(t,e):e[t]};return r=(n=Tt.getForTarget(e))?n.fire(new xt(e,{type:"get",query:t}),i):i(),s(e)&&!u(t)&&h(r)?function(...t){return _t([e],()=>r.apply(e,t))}:r},Wt=function(e,t){return e.reduce((e,r)=>e&&t(r),!0)},qt=function(e,t){if(!e||!l(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t in e};return(r=Tt.getForTarget(e))?r.fire(new xt(e,{type:"has",query:t}),n):n()},It=function(e,t,r,n=null,a=!1){if(!t||!l(t))throw new Error("Target must be of type object!");p(r)&&(a=n);var o,h,u=r,d={},g={},m=[],f=(r,n,s)=>{var i;d[r]=t[r],qt(t,r)||m.push(r),e&&(n=(i=n||{}).value);var a,o,p=function(e){return arguments.length?e:(i?Object.defineProperty(t,r,i):t[r]=n,!0)};if(o=Tt.getForTarget(t)){var c=i?{type:"def",query:r,descriptor:i,related:s}:{type:"set",query:r,value:n,related:s};a=o.fire(new xt(t,c),p)}else a=p();return a?(g[r]=n,g[r]!==d[r]?(d[r]&&l(d[r])&&Ct(t,0,d[r]),g[r]&&l(g[r])&&Dt(t,r,g[r])):(delete g[r],delete d[r])):delete d[r],a},v=[];if(s(u)||(i(u)||y(u))&&(u=c(u)))v=u.map(e=>f(e,n,u));else if(p(r)){var b=Object.keys(r);v=b.map(e=>f(e,r[e],b))}return((h=Ft.getForTarget(t))||a)&&(o=new St(t,{type:"set",data:g,_data:d,created:m}),h&&h.fire(o)),a?o:Wt(v,e=>e)},Bt=function(e,t,r=null,n=!1){return It(!1,...arguments)},Lt=function(e,t){c(t).forEach(t=>{var r,n,s=e[t],i=Object.getOwnPropertyDescriptor(e,t)||{enumerable:!(t in e)};"value"in i&&delete i.value,"writable"in i&&delete i.writable,i.get=()=>{if(r)return s;r=!0;var n=Mt(e,t);return r=!1,n},i.set=r=>{if(n)return s=r,!0;n=!0;Bt(e,t,r);return n=!1,!0},Object.defineProperty(e,t,i)})},Qt=function(e,t){if(!t||!l(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e?Object.getOwnPropertyNames(t):Object.keys(t)};return(r=Tt.getForTarget(t))?r.fire(new xt(t,{type:e?"ownKeys":"keys"}),n):n()},Ut=function(e){return Qt(!1,...arguments)};var Ht=function(e,t,r=null,n=!1){return It(!0,...arguments)},zt=function(e,t,r=!1){if(!e||!l(e))throw new Error("Target must be of type object!");t=c(t);var n,s,i={},a={},o=[],p=t.map(r=>{i[r]=e[r],qt(e,r)&&o.push(r);var n,s,p=function(t){return arguments.length?t:(delete e[r],!0)};return(n=(s=Tt.getForTarget(e))?s.fire(new xt(e,{type:"del",query:r,related:t}),p):p())&&(a[r]=void 0,i[r]&&l(i[r])&&Ct(e,0,i[r])),n});return((s=Ft.getForTarget(e))||r)&&(n=new St(e,{type:"del",data:a,_data:i,deleted:o}),s&&Object.keys(a).length&&s.fire(n)),r?n:Wt(p,e=>e)};class Vt extends jt{fire(e){return this.fireables.forEach(t=>{e.propagationStopped||t.fire(e)}),e}static createForTarget(e,t=Vt){return super.createForTarget(e,"listeners",t)}static getForTarget(e){return super.getForTarget(e,"listeners")}}var Kt=class extends Et{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e){this.params.type===e.type&&e.response(this.handler.call(this.target,e.e))}};var Jt={build:function e(t,r=!1){if(!t||!l(t))throw new Error("Target must be of type object!");var n=Ut(t);n.forEach(n=>{var s=Mt(t,n);l(s)&&s&&(Dt(t,n,s),e(s,r))}),r&&Lt(t,n)},observe:Nt,unobserve:Pt,trap:function(e,t,r={}){if(!e||!l(e))throw new Error("Object must be of type object!");if(!h(t))throw new Error('Callback must be a function; "'+At(t)+'" given!');var n;return(n=Tt.getForTarget(e))||(n=Tt.createForTarget(e)),n.addFireable(new Ot(t,r))},untrap:function(e,t=null,r={}){if(!e||!l(e))throw new Error("Object must be of type object!");var n;(n=Ft.getForTarget(e))&&n.findFireables({handler:t,params:r}).forEach(e=>{n.removeFireable(e)})},def:Ht,defineProperty:Ht,set:Bt,del:zt,deleteProperty:zt,link:Dt,unlink:Ct,transaction:_t,get:Mt,has:qt,init:Lt,keys:Ut,ownKeys:function(e){return Qt(!0,...arguments)},on:function(e,t,r,n={}){var s;return(s=Vt.getForTarget(e))||(s=Vt.createForTarget(e)),s.addFireable(new Kt(r,f(n,{type:t})))},off:function(e,t,r=null,n={}){var s;(s=Vt.getForTarget(e))&&s.findFireables({handler:r,type:t,params:n}).forEach(e=>{s.removeFireable(e)})},trigger:function(e,t,r={}){var n;if(n=Vt.getForTarget(e))return n.fire(new wt(e,f(r,{type:t})))},MutationEvent:St,QueryEvent:xt,Event:wt},Yt=function(e,t,r,a=[]){if(a=a.concat([n.attrMap.namespace,...n.attrMap.nocompose]),t.hasAttribute("norecompose")&&(a=a.concat((t.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()))),h(n.recomposeCallback)){var o=n.recomposeCallback(e,t,r,a);if(!1===o)return!1;(i(o)||s(o))&&(a=a.concat(o))}ie(n.listAttributes.concat([n.attrMap.hint,n.attrMap.superrole,n.attrMap.subrole,"role","class"])).forEach(n=>{var s,i;if(!a.includes(n)&&!a.includes("*")&&(s=e.getAttribute(n))){if(i=t.getAttribute(n))var o="prepend"===r?[s,i]:[i,s];else o=[s];t.setAttribute(n,ie(o.join(" ").split(" ").map(e=>e.trim())).join(" ")),a.push(n)}}),ie(n.keyValAttributes.concat("style")).forEach(n=>{var s,i;if(!a.includes(n)&&!a.includes("*")&&(s=e.getAttribute(n))){if(i=t.getAttribute(n))(o="prepend"===r?[s,i]:[i,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(n,o.join(" ")),a.push(n)}});for(var l=0;l<e.attributes.length;l++){var p=e.attributes[l];a.includes(p.name)||a.includes("*")||t.hasAttribute(p.name)||(t.setAttribute(p.name,p.value),a.push(p.name))}if(!a.includes("@directives")&&!a.includes("*")){var u=c((t.shadowRoot||t).children).filter(e=>e.matches(n.tagMap.jsen)),d=c((e.shadowRoot||e).children).filter(e=>e.matches(n.tagMap.jsen));d.length&&(u.length?u[0][r](d[0].textContent):t.prepend(d[0].cloneNode(!0)))}return t},Zt=function(e,t){return t.matches(n.tagMap.import)?function(e,t){t=t.cloneNode(!0);var r=e.getAttribute(n.attrMap.namespace),s=(t.getAttribute(n.attrMap.namespace),(t.getAttribute(n.attrMap.superrole)||"").split(" ").map(e=>e.trim()));return t.setAttribute(n.attrMap.namespace,r),Yt(e,t,"append"),c((e.shadowRoot||e).children).forEach((e,r)=>{if(!e.matches(n.tagMap.jsen)){e=e.cloneNode(!0);var i=[],a=[];(e.getAttribute(n.attrMap.subrole)||"").split(" ").map(e=>e.trim()).forEach(e=>{var t=s.filter(t=>e.startsWith(t+"-"));t.length&&(i.push(t[0]),a.push(e))});var o=n.context.CSS?n.context.CSS.escape:e=>e;if(i.length){var l,p=i.map(e=>"["+o(n.attrMap.superrole)+'~="'+e+'"]'),c=a.map(e=>"["+o(n.attrMap.subrole)+'~="'+e+'"]');t.shadowRoot&&(l=t.shadowRoot.querySelectorAll(c))||1===(l=t.querySelectorAll(c)).length&&l[0].closest(p)===t?(Yt(l[0],e,"prepend"),l[0].replaceWith(e)):t.append(e)}else t.append(e)}}),t}(t,e):Yt(e,t,"prepend")};class Gt{constructor(e,t,r,n=null){this.sources=c(e),this.namespace=c(t),this.getter=r,this.carry=n,this.collections={},this.value}enter(e){return e in this.collections||(this.collections[e]=new Gt(this.sources,this.namespace.concat(e),this.getter,this)),this.collections[e]}leave(){return this.carry}get(){if(!this.value){var e=this.namespace.slice(),t=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(t=this.getter.call(null,r,e,t,n))&&(this.value=t)})}return this.value}find(e){for(var t,r,n=e.split("/"),s=this;(r=n.shift())&&(s=s.enter(r));)t=s;var i=t.get();if(i)return i.cloneNode(!0)}}class Xt extends Ie{flatten(){var e=[],t=(r,n="")=>{if("IfConditional"===r.jsenType){var s="("+r.assertion.toString()+")";"Statements"===r.onTrue.jsenType?r.onTrue.stmts.forEach(e=>{t(e,(n?n+" && ":"")+s)}):t(r.onTrue,(n?n+" && ":"")+s),r.onFalse&&("Statements"===r.onFalse.jsenType?r.onFalse.stmts.forEach(e=>{t(e,(n?n+" && ":"")+"!"+s)}):t(r.onFalse,(n?n+" && ":"")+"!"+s))}else n?e.push(bt.parse(n+' && "[ENDIF]" && '+r.toString())):e.push(r)};return this.stmts.forEach(e=>{t(e)}),e}filter(){return this.flatten().reduce((e,t)=>(e.forEach(e=>{e.isDuplicate||e.overridden||(t.toString()!==e.toString()||t.important!==e.important&&t.fallback!==e.fallback?t.important||e.fallback?e.overridden=!0:(e.important||t.fallback)&&(t.overridden=!0):t.isDuplicate=!0)}),e.concat([t])),[]).filter(e=>!e.isDuplicate&&!e.overridden)}static parse(e,t={}){return super.parse(e.trim().endsWith(";")?e:e+";",(e,r=null,n=null)=>bt.parse(e,r,n?f(t,n):t),Xt)}}var er=function(...e){return m(e,(e,t,r)=>{if(s(t)&&s(r)){if(-1===t.indexOf(r[e]))return!0}else if(!(e in t))return!0})};const tr={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{":not(dl > div)":["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(e){var t=e.nodeName.toLowerCase();return tr.std[t]?tr.expandRules(e,tr.std[t].model||[]):[]},getCategoriesFor(e,t=!0){var r=e.nodeName.toLowerCase(),n=tr.std[r]||tr.aria[r]||{},s=[];if(t&&!e.nodeName.startsWith("#")&&(e.hasAttribute("role")||n.implicitRole))if(e.hasAttribute("role")){e.getAttribute("role").split(" ");e.getAttribute("role").split(" ").forEach(t=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(t)||(t=t.trim(),s.push("@"+t),tr.aria[t]&&tr.aria[t].type&&(s=s.concat(tr.expandRules(e,tr.aria[t].type||[]))))})}else n.implicitRole&&d(s,"@"+n.implicitRole,r);else s=d(tr.expandRules(e,n.type||[]),r);return s},assertNodeBelongsInContentModel(e,t){var r,n=e instanceof HTMLElement?tr.getContentModelFor(e):e,s=t instanceof HTMLElement?tr.getCategoriesFor(t):t;return!Ve(n,["#nothing","#text"]).length&&(n.forEach(e=>{if(e.startsWith("!")){var t=e.substr(1);s.includes(t)&&(r=!1)}else!1!==r&&s.includes(e)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(e,t,r=null){for(var n,s=tr.getCategoriesFor(e),i=t;!n&&(i=i.parentNode);)Ve(s,tr.getCategoriesFor(i)).length&&tr.assertNodeBelongsInContentModel(i,r&&r.type||t)&&(n=i);return n===e},expandRules(e,t){var r=t.reduce((t,r)=>(p(r)?e.matches(Object.keys(r)[0])&&(t=t.concat(Object.values(r)[0])):t.push(r),t),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var rr,nr=tr;class sr{constructor(e,t={}){Object.defineProperty(this,"params",{value:er(n,t)}),Object.defineProperty(this,"_el",{value:e,enumerable:!0}),Object.defineProperty(this,"el",{value:"#document"===e.nodeName?e.querySelector("html"):e,enumerable:!0});const r=(e.getAttribute(n.attrMap.superrole)||"").split(" ").map(e=>e.trim()).filter(e=>e);Object.defineProperty(this,"roles",{value:r,enumerable:!0});const s={};Jt.defineProperty(this,n.treeProperty,{value:s,enumerable:!0}),Jt.trap(s,(e,t,r)=>r(t||this.getNodes(e.query)),{type:"get"});const i=(e.getAttribute(n.attrMap.hint)||"").split(" ").map(e=>e.trim()).filter(e=>e);Jt.init(this[n.treeProperty],i)}getNodes(e){return c(e).forEach(e=>{if(e in this[n.treeProperty]&&this[n.treeProperty][e]instanceof sr)return this[n.treeProperty][e];var t;((t=this.getExplicitNode(e))||(t=this.getImplicitNode(e)))&&this.addNode(e,t)}),s(e)?_objFrom(e,this[n.treeProperty]):this[n.treeProperty][e]}getExplicitNode(e){if(this.roles&&this.roles.length||(this.roles=(this.el.getAttribute(n.attrMap.superrole)||"").replace("  "," ").split(" ")).length){var t=n.rolecase?[n.rolecase]:this.roles,r=n.context.CSS?n.context.CSS.escape:e=>e;return t.reduce((t,s)=>{if(!t){var i,a,o="["+r(n.attrMap.superrole)+'~="'+s+'"]',l="["+r(n.attrMap.subrole)+'~="'+s+"-"+e+'"]';(a=(this.el.shadowRoot||this.el).querySelector(l))&&(this.el.shadowRoot&&(!a.parentNode.closest||!a.parentNode.closest(o))||!this.el.shadowRoot&&a.parentNode&&(i=a.parentNode.closest(o))&&i.isSameNode(this.el))&&(t=a)}return t},null)}}getImplicitNode(e){if(!u(e)&&!e.match(/[^a-zA-Z0-9\-]/)){var t=[];nr.aria[e]?t.push({schema:nr.aria[e],selector:['[role="'+e+'"]']}):t.push({schema:nr.std[e]||nr.aria[e],selector:[e,'[role="'+e+'"]']}),E(nr.std,(r,n)=>{n.implicitRole===e&&t.push({schema:n,selector:[r]})});var r=null;return t.forEach(e=>{(this.el.shadowRoot||this.el).querySelectorAll(e.selector.join(",")).forEach(t=>{nr.assertNodeBelongsInScopeAs(this.el,t,e.schema)&&(e.schema&&e.schema.singleton?r=t:r&&!s(r)||(r=r||[]).push(t))})}),r}}addNode(e,t){var r,i=this.params.factory||((e,t)=>new sr(e,t));return s(t)?r=t.map(e=>i(e,this.params)):(r=i(t,this.params),function e(t,r){if(t.parentNode&&n.context.MutationObserver){var s=!1;new n.context.MutationObserver(e=>{e.forEach(e=>{!s&&c(e.removedNodes).includes(t)&&(s=!0,r())})}).observe(t.parentNode,{childList:!0}),e(t.parentNode,()=>{s||(s=!0,r())})}}(t,()=>{Jt.del(this[n.treeProperty],e)})),Jt.set(this[n.treeProperty],e,r),r}}class ir extends sr{constructor(e,t={}){super(e,t),this.params.factory=this.constructor.from;const r=function(e){var t={roadmap:e};return t.roadmap&&(t.namespace=U(t.roadmap,"//"),t.subnamespace=Q(t.roadmap,"//"),t.subnamespace.startsWith("/")&&(t.subnamespace=Q(t.subnamespace,"/")),t.subnamespace.endsWith("//")&&-1===t.subnamespace.indexOf("///")&&(t.subnamespace=t.subnamespace+t.namespace+"//")),t}(e.getAttribute(n.attrMap.namespace)||"");Object.defineProperty(this,"namespace",{value:r.namespace,enumerable:!0});Jt.defineProperty(this,"directives",{value:[],enumerable:!0});Jt.observe(this.directives,(e,t,r)=>{Object.keys(e).forEach(r=>{var n;t[r]&&Jt.unobserve(this,null,null,{tags:["#directive",t[r]]}),e[r]&&(!1!==this.autoEval&&e[r].eval(this,{get:Jt.get}),Jt.observe(this,(n=e[r].meta.vars,ie(n.map(e=>U(U(e.toString(),"["),"(")))),(t,n,s)=>{var i=e[r].eval(this,{get:Jt.get});if(!1!==i)return i},{tags:["#directive",e[r]]}))})}),setTimeout(()=>{var t;(this.dataBlockScript=c(e.children).filter(e=>e.matches(n.tagMap.jsen))[0])&&(t=Xt.parse((this.dataBlockScript.textContent||"").trim()))||(t=new Xt);var r=Jt.get(this.directives,"push");t.filter().forEach(e=>{this.autoEval=n.initialRendering,r(e),this.autoEval=!0}),this.dataBlockScript&&n.hideDataBlockScript&&this.dataBlockScript.remove()},0),Jt.init(this,n.modelProperty),Jt.observe(this,n.modelProperty,(e,t,s)=>{if(r.subnamespace)return l(e)&&e&&Jt.observe(e,t=>this.populate(e,r.subnamespace,n.remodelCallback),{tags:["#mirror",this]}),l(t)&&t&&Jt.unobserve(t,null,null,{tags:["#mirror",this]}),this.populate(e||{},r.subnamespace,n.remodelCallback)})}get(e){return super.getNodes(e)}bind(e){if(!n.modelProperty)throw new Error("Data key has not been set!");return Jt.set(this,n.modelProperty,e)}unbind(){if(!n.modelProperty)throw new Error("Data key has not been set!");return Jt.del(this,n.modelProperty)}populate(e,t,r=null){var s=t.split("//");s[0].indexOf("[")>-1&&(s[0]='"'+s[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var i=Jt.keys(e),o=Jt.keys(this[n.treeProperty]),l=new Jt.MutationEvent(this.el,{type:"remodelling"});return ie(i.concat(o)).forEach(t=>{t=u(t)?parseInt(t):t;var n,o=this.getNodes(t);if(Jt.has(e,t)){var p=Jt.get(e,t),c=!1;if(!o){var d=s.slice();d[0].indexOf('"')>-1&&(d[0]=bt.parse(d[0]).eval(p)),d[0]+="/"+t;var g=ir.import(d.join("//"));if(g){var m=function(e,t,r=!1,n=!1,s=!1){if(-1===e.indexOf(t))return r?[]:void 0;var i=!0===r?e.length-1:!1===r?1:r,o=s?e.lastIndexOf(t)+1:e.indexOf(t)+1,l=a(t)?[]:e.slice(o,o+i);return n&&l.length<i&&l.length<e.length&&(h(n)&&!n(i-l.length)||(l=l.concat(e.slice(0,i-l.length)))),r?l:l[0]}(i,t+"",!0).reduce((e,t)=>e||this.getNodes(t),null);m?m.el.before(g):this.el.append(g),o=this.addNode(t,g),c=!0}}o&&(n=h(r)?r(o,p,t,c):o.bind(p))}else if(o){var f=()=>{o.destroy(),o.el.remove()};(n=h(r)?r(o,t):o.unbind())instanceof Promise?n.then(f).catch(f):f()}l.response(n)}),l}destroy(){this.directives.forEach(e=>Jt.unobserve(this,null,null,{tags:["#directive",e]})),this.dataBlockScript&&n.hideDataBlockScript&&this.prepend(this.dataBlockScript)}static init(e,t=null){n.context=e,function(){const e=n.context;e.customElements.define(n.attrMap.bundle,class extends e.HTMLTemplateElement{attributeChangedCallback(e,t,r){r&&this.load()}load(){var t=this.getAttribute("src");t&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):t&&(e.fetch?e.fetch(t).then(e=>e.ok?e.text():Promise.reject(e.statusText)).then(t=>{this.innerHTML=t,this.dispatchEvent(new e.Event("bundleloadsuccess"))}).catch(r=>{console.warn("Error fetching the bundle at "+t+". ("+r+")"),this.dispatchEvent(new e.Event("bundleloaderror"))}):setTimeout(()=>{this.dispatchEvent(new e.Event("bundleloadsuccess"))},0))}static get observedAttributes(){return["src"]}},{extends:"template"})}(),ir.contentLoadedPromise=new Promise(t=>{"complete"!==e.document.readyState?(e.document.addEventListener("DOMContentLoaded",t,!1),e.addEventListener("load",t,!1)):t()}),ir.contentLoadedPromise.then(()=>{var e;if(t&&(e=t())){if(!s(e))throw new Error("The bundlesCallback() function must return an array!");n.bundles=function(e,t=null){var[r,s]=function(e,t){for(var r=[],n=[],s=e.length,i=0;i<s;i++)t(e[i])?r.push(e[i]):n.push(e[i]);return[r,n]}(e,e=>e instanceof Promise);const i=Promise.all(r).then(e=>{s.push(...e),r=[]});var a;t&&t(i);const o=[],l=new Gt(s,[],(e,t,s,i)=>{var p=t.join("/");if(o.includes(p))return l.find(t.slice(0,-1).join("/"));o.push(p),r.length&&!a&&(a=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within Chtml.ready(callback[, true/*waitForBundles*/])."));var c=n.context.CSS?n.context.CSS.escape:e=>e,h=e.content.querySelector("["+c(n.attrMap.namespace)+'="'+p+'"]');if(h&&s){try{e.hasAttribute("norecompose")&&(e.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()),h=Zt(s,h)}catch(e){console.error("[Inheritance error at source #"+i+"]: "+e.message)}return o.pop(),h}return o.pop(),h?h.cloneNode(!0):s?s.cloneNode(!0):null});return l}(e,e=>{ir.loadingBundlesPromise=e,setTimeout(()=>{!function(e){const t=n.context;t.customElements.define(n.tagMap.import,class extends t.HTMLElement{shouldResolve(){return!this.hasAttribute("ondemand")&&!this.closest("template")&&!this.closest(n.tagMap.import+"[ondemand]")}connectedCallback(){this.processed=!1,this.shouldResolve()&&this.resolve()}attributeChangedCallback(e,t,r){this.shouldResolve()&&this.resolve()}resolve(){if(!this.parentNode)return!1;e.then(()=>{var e,t,r=n.attrMap.namespace;if((t=U(this.getAttribute(r)||"","//"))&&t!==this.__namespace)if(this.__namespace=t,n.bundles&&(e=n.bundles.find(t))){var s=Zt(e,this);this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(s),this.remove()):this.replaceWith(s)}else this.innnerText='No element found on the namespace "'+t+'"!'})}static get observedAttributes(){return["ondemand",n.attrMap.namespace]}})}(e)},0)})}})}static ready(e,t=!0){ir.contentLoadedPromise.then(()=>{t?ir.loadingBundlesPromise.then(e):e()})}static from(e,t={},r=ir){var s=e;if(i(e)&&!e.trim().startsWith("<")&&-1!==e.indexOf("/")){if(!(s=ir.import(U(e,"//"))))throw new Error('No element found on the namespace "'+e+'"!')}else{if(i(e)&&!(s=function(e,t=null){if(t=t||n.context.document){var r;if(e.trim().startsWith("<")){var s=t.createElement("div");s.innerHtml=e,r=s.firstChild}else r=t.querySelector(e);return r}}(e)))throw new Error('Could not resolve the string "'+e+'" to an element!');var a,o,l,p=s.matches(n.tagMap.import);if((a=U(s.getAttribute(n.attrMap.namespace)||"","//"))&&(p&&(o=a)||(o=H(a,"/"))&&o.indexOf("/")>-1)&&(l=ir.import(o))){var c=s;s=Zt(l,s),p&&c.replaceWith(s)}else a&&console.warn("Namespace resolution failed: "+a)}return new r(s,t)}static import(e){if(n.bundles)return n.bundles.find(e)}}rr=window,ir.init(rr,()=>c(rr.document.querySelectorAll(n.tagMap.bundle)).reverse().map(e=>e.hasAttribute("src")&&!e.content.children.length?new Promise(t=>{e.addEventListener("bundleloadsuccess",()=>t(e)),e.addEventListener("bundleloaderror",()=>t(e))}):e));var ar=ir;n.env="browser",window.WebNative||(window.WebNative={}),window.WebNative.Chtml=ar,window.WebNative.Chtml.params=n,window.WebNative.Chtml.Reflex=Jt,window.WebNative.Chtml.Jsen=bt}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,